<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Search Results for &#8220;Parse yaml&#8221; &#8211; Middleware Inventory</title>
	<atom:link href="https://www.middlewareinventory.com/search/Parse+yaml/feed/rss2/" rel="self" type="application/rss+xml" />
	<link>https://www.middlewareinventory.com</link>
	<description>An inventory of [i]nformation, Middleware and much more.</description>
	<lastBuildDate>Sat, 05 Nov 2022 12:23:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.5.6</generator>

<image>
	<url>https://www.middlewareinventory.com/wp-content/uploads/2017/12/cropped-Screen-Shot-2017-12-22-at-12.16.54-PM-3-32x32.png</url>
	<title>Search Results for &#8220;Parse yaml&#8221; &#8211; Middleware Inventory</title>
	<link>https://www.middlewareinventory.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Ansible Retry Examples &#8211; Retry a task until condition met &#124;  DevopsJunction</title>
		<link>https://www.middlewareinventory.com/blog/ansible-retry-examples/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-retry-examples/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Sun, 01 May 2022 10:14:21 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=8203</guid>

					<description><![CDATA[<p>in this article, we are going to see how to retry an ansible task until it meets a certain condition or validation. It is more like do sometask until somecondition kind of setup available in all the programming and scripting languages Ansible lets you execute a task until a condition[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-retry-examples/">Ansible Retry Examples &#8211; Retry a task until condition met |  DevopsJunction</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>in this article, we are going to see how to retry an ansible task until it meets a certain condition or validation.</p>
<p>It is more like <code>do sometask until somecondition</code> kind of setup available in all the programming and scripting languages</p>
<p>Ansible lets you execute a task until a condition is met or satisfied. using <code>retry until</code> specification.</p>
<p>&nbsp;</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry.jpg"><img class="post-img alignnone wp-image-8408 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry.jpg" alt="Ansible retry" width="1748" height="1240" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry.jpg 1748w, https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry-300x213.jpg 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry-1024x726.jpg 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry-768x545.jpg 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry-1536x1090.jpg 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/05/ansible-retry-90x65.jpg 90w" sizes="(max-width: 1748px) 100vw, 1748px" /></a></p>
<p>&nbsp;</p>
<h2>Ansible Retry until file exists &#8211; A Quick example to Ansible Retry</h2>
<p>In this quick example, you can see that we are trying to validate if the file is created at a certain path.</p>
<p>You can think of it as a file watcher,</p>
<p>Our Ansible task waits for the file to be created until it eventually times out. we can also define the number of retries and interval between each check</p>
<p>If the file is not created before the retries the task would be marked as failed.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Retry until a file is available
  hosts: localhost
  tasks:
    - name: Validate if the file is present
      shell: ls -lrt /tmp/myprocess.pid
      register: lsresult
      until: "lsresult is not failed"
      retries: 10
      delay: 10</pre>
<p>This is how it looks like when the file is not created even after 10 retries with a delay of 10 seconds.</p>
<p>by default the value you are giving for <code>delay</code> would be considered in seconds.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM.png"><img class="post-img alignnone wp-image-8323 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM.png" alt="ansible retry until" width="1652" height="1206" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM.png 1652w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM-300x219.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM-1024x748.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM-768x561.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM-1536x1121.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-2.50.14-AM-90x65.png 90w" sizes="(max-width: 1652px) 100vw, 1652px" /></a></p>
<p>The task would be marked as <code>failed</code></p>
<p>you can write your task with any module and make it retry until a certain condition is met.</p>
<p>Here I have used <code>Shell</code> module of ansible and running <code>ls -lrt</code> command. you can do the same with <code>file</code> module too</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Retry until a file is available
  hosts: localhost
  tasks:
    - name: Validate if the file is present
      file:
        path: /tmp/myprocess.pid
        state: file
      register: lsresult
      until: "lsresult is not failed"
      retries: 10
      delay: 10</pre>
<p>Here the <code>state: file</code> just returns the state of the path provided. So we are using it to validate the presence of the file here.</p>
<p>&nbsp;</p>
<h2>Where Ansible Retry until can be used?</h2>
<p>As you can see we can use <strong>until,</strong> <strong>retries </strong>and <strong>delay </strong>keywords with any task and make it retry for no of times with a defined interval</p>
<p>I cannot say this is an alternative to the typical loop that runs the job until the condition is met.</p>
<p>As you might have already noticed</p>
<blockquote><p> Ansible <strong>Retry until</strong> can rerun the task only until the <strong>defined number of retries</strong>. It cannot run the task forever until the condition is met, like a typical loop.</p></blockquote>
<p>So we cannot use ansible retry for tasks which we cannot foresee/estimate how long it may take.</p>
<p>So this is definitely not a replacement for our typical loop. But it solves a major problem of having an infinite loop by timing out the task after defined retries.</p>
<p>But sometimes we might want a task to continue infinite times until a certain condition is met, Despite the no of retries it has to take.</p>
<p>Is there a way to make ansible retry go infinite retries?</p>
<p>Fortunately Yes, there is a way to make Ansible retry to go on an infinite loop. we will talk about it later.</p>
<p>&nbsp;</p>
<h2>Ansible Retries without Until</h2>
<div id="retrying-a-task-until-a-condition-is-met" class="section">
<p>When you run a task with <code class="docutils literal notranslate"><span class="pre">until</span></code> and register the result as a variable, the registered variable will include a key called “attempts”, which records the number of the retries for the task.</p>
<div class="admonition note">
<p>You must set the <code class="docutils literal notranslate"><span class="pre">until</span></code> parameter if you want a task to retry.</p>
<p>If <code class="docutils literal notranslate"><span class="pre">until</span></code> is not defined, the value for the <code class="docutils literal notranslate"><span class="pre">retries</span></code> parameter is forced to 1. So it would not retry</p>
<p>Let us take the same playbook we have been using so far, A File watcher.</p>
<p>All I am going to do is to remove the <code>until</code> keyword but the retries are going to remain as 10 times.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Retry until a file is available
  hosts: localhost
  tasks:
    - name: Validate if the file is present
      file:
        path: /tmp/myprocess.pid
        state: file
      register: lsresult
      retries: 10
      delay: 10

</pre>
</div>
</div>
<p>&nbsp;</p>
<p>Here is the execution output of this playbook ( on the right)</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM.png"><img class="post-img alignnone wp-image-8329 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM.png" alt="Ansible Retry until" width="3390" height="988" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM.png 3390w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM-300x87.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM-1024x298.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM-768x224.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM-1536x448.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-17-at-1.07.55-AM-2048x597.png 2048w" sizes="(max-width: 3390px) 100vw, 3390px" /></a></p>
<p>You can see, Despite having the retries set to 10 the task did not re-run.  this would be the result of using retries without until conditional validation</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>Difference between Ansible Wait_for and Retry until</h2>
<p>If you have been practising Ansible for some time then you might have got this question already in your mind.</p>
<p>How it is different from the Ansible wait_for module.</p>
<p>For those who do not know what is ansible wait_for please read our dedicated ansible wait_for article and return here</p>
<blockquote class="wp-embedded-content" data-secret="ISxTRBjvWn"><p><a href="https://www.middlewareinventory.com/blog/ansible-wait_for-examples/">Ansible wait_for module examples &#8211; How to | Devops Junction</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;Ansible wait_for module examples &#8211; How to | Devops Junction&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/ansible-wait_for-examples/embed/#?secret=ISxTRBjvWn" data-secret="ISxTRBjvWn" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<p>While ansible wait_for helps in a similar use case and makes the task wait until a certain condition is met.</p>
<p>There are few major differences between ansible wait_for and ansible retry until</p>
<p>Here I tried to summarize a few of them</p>
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;"><span style="color: #003366;"><strong>Ansible wait_for</strong></span></td>
<td style="width: 50%; height: 28px;"><strong><span style="color: #003366;"> Ansible Retry until</span></strong></td>
</tr>
<tr style="height: 54px;">
<td style="width: 50%; height: 54px;">A limited number of use cases, cannot be used directly with any module as wait_for is a module itself.</td>
<td style="width: 50%; height: 54px;">Can rerun any module with Ansible retry, until</td>
</tr>
<tr style="height: 54px;">
<td style="width: 50%; height: 54px;">It can work with Ports and network interfaces and can wait until a reboot is completed</td>
<td style="width: 50%; height: 54px;">Cannot work directly with Network interfaces or used for port, connection  monitoring</td>
</tr>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;">The customized failure message is possible</td>
<td style="width: 50%; height: 28px;">Since Ansible Retry is not a separate module but an addon to rerun any module. it cannot have a customized failure message</td>
</tr>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;">Rerun the entire task as an attempt until the condition is met, so can track the no of attempts.</td>
<td style="width: 50%; height: 28px;">Rerun the condition only, cannot track the attempts made</td>
</tr>
</tbody>
</table>
<p>So both of them have specific use cases. While some of them can be overlapping like a file watcher but we can choose to use the right fit for your job.</p>
<p>In fact, the file watcher playbook we have been discussing in our article can be achieved through ansible wait_for too as I have mentioned.</p>
<p>here is the ansible-playbook waits for the file to be created using <code>wait_for</code> module</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">- name: Wait for the file to be available
  register: waitforfile
  wait_for:
    path: /tmp/myprocess.pid
    delay: 10
    timeout: 30
    state: present
    msg: "Specified PID FILE is not present"</pre>
<p>The execution output of this playbook has been given below.</p>
<p>As you can see,  It simply waits for the condition in the background and once the timeout is elapsed it fails.</p>
<p>So both ansible retries until and wait_for do their tasks in different manner/approach.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM.png"><img class="post-img alignnone wp-image-8330 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM.png" alt="Ansible retry until " width="3380" height="1032" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM.png 3380w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM-300x92.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM-1024x313.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM-768x234.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM-1536x469.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-18-at-12.13.23-AM-2048x625.png 2048w" sizes="(max-width: 3380px) 100vw, 3380px" /></a></p>
<h2></h2>
<p>Here are some more examples we collected about Ansible retries until.</p>
<p>As we have already mentioned you can use retries with any module and make it retry until a certain condition is met</p>
<h2></h2>
<h2>Ansible Retry until the remote URL is returning a message &#8211; Ansible wait_for URL or website</h2>
<p>Here is an example of Ansible retry being used with the URI module to continuously check the remote URL and retry until the URL returns a certain message or content</p>
<p>In another word, we are waiting for the website or webpage to respond.</p>
<p>In this example, we are trying to hit the locally hosted web application at <code>http://localhost:8080</code></p>
<p>but in real use cases, it can be a remote URL</p>
<p>here we are looking for a message <code>Completed</code> be present in the response. If the response is not <code>Completed</code></p>
<p>or the site is not responding or returning some 5xx 4xx error. the job would simply retry 2 times with a delay of 10.</p>
<p>You can increase the delay and retries as per your requirement.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Ansible Retry Examples
  hosts: localhost
  tasks:
  - name: Job Status Check
    uri:
      url: http://localhost:8080
      return_content: yes
    register: result
    until: "'Completed' in result.content"
    ignore_errors: yes
    retries: 2
    delay: 10</pre>
<p>Here is the execution result along with the simple server node js code I have used to setup my server which returns a message <code>Completed</code></p>
<p>If the message is present. the job would immediately become successful at the first time as shown in the following snapshot</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM.png"><img class="post-img alignnone wp-image-8389 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM.png" alt="ansible retry" width="3584" height="1676" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM.png 3584w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM-300x140.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM-1024x479.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM-768x359.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM-1536x718.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.01.29-PM-2048x958.png 2048w" sizes="(max-width: 3584px) 100vw, 3584px" /></a></p>
<p>If the message is not present. the job would retry for the specified number of times before eventually failing.</p>
<p>Refer to the following snapshot where we have changed the message in the server.js to <code>InProgress</code></p>
<p>We have also changed the retries to <code>10</code> and as you can see on the right side. It fails after trying for 10 times.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM.png"><img class="post-img alignnone wp-image-8390 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM.png" alt="" width="3584" height="1694" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM.png 3584w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM-300x142.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM-1024x484.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM-768x363.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM-1536x726.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-28-at-8.47.59-PM-2048x968.png 2048w" sizes="(max-width: 3584px) 100vw, 3584px" /></a></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>Ansible Retry until with include_tasks</h2>
<p>here is one more example where we are going to execute a couple of other ansible playbooks using <code>include_tasks</code> until the condition is satisfied</p>
<p>It is similar to the same template we have been following. Instead of one task, we are going to invoke one/multiple tasks using include_tasks</p>
<p>now let us see an example where we are going to invoke two tasks</p>
<ul>
<li>The first task is to retry until the file exists</li>
<li>Send Slack notification with the status of the file creation</li>
</ul>
<p>Both these tasks would be on the same file which would be called by include_tasks</p>
<p>Since this is include_tasks, we are going to create two individual files.</p>
<ul>
<li>main.yml &#8211; the main playbook</li>
<li>retry-until-file-create.yml &#8211; tasks file</li>
</ul>
<p>here is the <code>main.yml</code> file which invokes the other tasks using <code>include_tasks</code></p>
<p><strong><span style="color: #003366;">main.yml</span></strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Ansible Retry with include_tasks example
  hosts: localhost
  tasks:
    - name: Executing the task
      include_tasks:
        file: retry-until-file-create.yaml
</pre>
<p>&nbsp;</p>
<p><strong><span style="color: #003366;">retry-until-file-create.yaml</span></strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
  - name: Wait for the file to be available
    register: fileexists
    file:
      path: /tmp/myprocess.pid
      state: file
    until: fileexists is not failed
    retries: 5
    delay: 10
    ignore_errors: true
  
  - name: notify Slack that the job is failing
    tags: slack
    community.general.slack:
      token: T02****8KPF/*******/WOa7r*****tXy7Ao0jnWn
      msg: |
          ### StatusUpdate ###
          &#8211; ------------------------------------
          ``
          `Server`: {{ansible_host}}
          `Status`: Ansible File Watcher Job failed
          &#8211; ------------------------------------
      channel: '#ansible'
      color: good
      username: 'Ansible on {{ inventory_hostname }}'
      link_names: 0
      parse: 'none'
    when: fileexists is failed

  - name: notify Slack that the job is Successful
    tags: slack
    community.general.slack:
      token: T02****8KPF/*******/WOa7r*****tXy7Ao0jnWn
      msg: |
          ### StatusUpdate ###
          &#8211; ------------------------------------
          ``
          `Server`: {{ansible_host}}
          `Status`: Ansible File Watcher Job Successful.
          &#8211; ------------------------------------
      channel: '#ansible'
      color: good
      username: 'Ansible on {{ inventory_hostname }}'
      link_names: 0
      parse: 'none'
    when: fileexists is not failed</pre>
<p>that is a. quick example of using <code>incloude_tasks</code> with ansible retries</p>
<p>The Main task would validate if the file exists for a defined period and fail, Since we have set <code>ignore_errors: true</code> it would not fail the entire playbook</p>
<p>It will then move on the next stage of sending notification based on the status of the main task.</p>
<p>If the file exists, the main task would be successful <code>not failed</code> and it would invoke the Successful message Slack notification</p>
<p>In case of failure, it would invoke the failure notification message.</p>
<p>Both are done using the <code>when: result is failed</code> or <code>not failed</code> validation</p>
<p>Here is a simple Slack notification that has been generated and received in our slack channel.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM.png"><img class="post-img alignnone wp-image-8406 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM.png" alt="Ansible retry include_tasks" width="2824" height="652" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM.png 2824w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM-300x69.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM-1024x236.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM-768x177.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM-1536x355.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/04/Screenshot-2022-04-30-at-11.41.18-PM-2048x473.png 2048w" sizes="(max-width: 2824px) 100vw, 2824px" /></a></p>
<p>&nbsp;</p>
<h2>Ansible Retry until with include_tasks &#8211; Ansible Infinite Retry</h2>
<p>As I have mentioned earlier, there is a way to make ansible retry to go infinite</p>
<p>Let&#8217;s see, How to make Ansible retry never end</p>
<p>To make Ansible Retry go infinite and continue even after the retries timeout we have to use the same principle we used with import_tasks</p>
<p>The first thing to make ansible retry go infinite is to split the task you want to execute and run it as part of <code>import_tasks</code></p>
<ul>
<li>main.yml &#8211; the main playbook</li>
<li>retry-until-file-create.yml &#8211; tasks file</li>
</ul>
<p>In the previous example, we have seen how to create two playbooks one is a main playbook and the other contains the tasks</p>
<p>The only difference between the previous example and the current one is one line.</p>
<p>we are going to make the <code>retry-until-file-create.yml</code> to call itself once again using the <code>import_tasks</code></p>
<blockquote><p>the task playbook would call itself once again ( restart) if the task is not successful</p></blockquote>
<p>Here are the playbooks</p>
<p><strong><span style="color: #003366;">main.yml</span></strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Ansible Retry with include_tasks example
  hosts: localhost
  tasks:
    - name: Executing the task
      include_tasks:
        file: retry-until-file-create.yaml
</pre>
<p>&nbsp;</p>
<p><strong><span style="color: #003366;">retry-until-file-create.yaml</span></strong></p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
  - name: Wait for the file to be available
    register: fileexists
    file:
      path: /tmp/myprocess.pid
      state: file
    until: fileexists is not failed
    retries: 5
    delay: 10
    ignore_errors: true
  
  - name: notify Slack that the job is failing
    tags: slack
    community.general.slack:
      token: T02****8KPF/*******/WOa7r*****tXy7Ao0jnWn
      msg: |
          ### StatusUpdate ###
          &#8211; ------------------------------------
          ``
          `Server`: {{ansible_host}}
          `Status`: Ansible File Watcher Job failed
          &#8211; ------------------------------------
      channel: '#ansible'
      color: good
      username: 'Ansible on {{ inventory_hostname }}'
      link_names: 0
      parse: 'none'
    when: fileexists is failed
    ignore_errors: true

  - name: notify Slack that the job is Successful
    tags: slack
    community.general.slack:
      token: T02****8KPF/*******/WOa7r*****tXy7Ao0jnWn
      msg: |
          ### StatusUpdate ###
          &#8211; ------------------------------------
          ``
          `Server`: {{ansible_host}}
          `Status`: Ansible File Watcher Job Successful.
          &#8211; ------------------------------------
      channel: '#ansible'
      color: good
      username: 'Ansible on {{ inventory_hostname }}'
      link_names: 0
      parse: 'none'
    when: fileexists is not failed

  - name: Re run the task if failed
    include_tasks: retry-until-file-create.yaml
    when: "fileexists is failed"</pre>
<p>&nbsp;</p>
<p>Here is the terminal recording of this playbook execution.</p>
<p><script id="asciicast-CF45z2LpEpchmPEX0imQOpp18" src="https://asciinema.org/a/CF45z2LpEpchmPEX0imQOpp18.js" async></script></p>
<p>As you can see the job is continuously retrying without ending when the main task is failing and stop automatically when the main task ( File existence) is successful.</p>
<p>This is how we can make Ansible retry continue infinitely without timing out</p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>In this article, we have learnt about ansible retry until and how it differs from ansible wait module</p>
<p>We also learnt the following key objectives.</p>
<ul>
<li>How to retry until a task is complete with Ansible</li>
<li>How to retry until a file exists in Ansible</li>
<li>Retrying with include_tasks</li>
<li>How to send Slack notification when the job fails after retry</li>
<li>How to make Ansible retry to run infinite without a timeout</li>
</ul>
<p>hope this helps.  If you are looking for professional DevOps support for your company or individually do reach out to us at <a href="mailto:rumenlishkoff@gmail.com">rumenlishkoff@gmail.com</a></p>
<a href="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg"><img class="post-img" src="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg" alt="gritfy" width="1047" height="415" class="alignnone size-full wp-image-6623" /></a>
<p>&nbsp;</p>
<p>Cheers<br />
Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576713" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="8203"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/ansible-retry-examples/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576713" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576713"></span>
		</div>

		
</div>
<hr>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-retry-examples/">Ansible Retry Examples &#8211; Retry a task until condition met |  DevopsJunction</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-retry-examples/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ansible Pre Tasks and Post Tasks Example &#124; Devops Junction</title>
		<link>https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Wed, 19 Jan 2022 06:17:52 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=6982</guid>

					<description><![CDATA[<p>In this article, we are going to see how to use ansible pre tasks and post tasks with examples. What is Ansible pre_tasks? Ansible pretask is a conditional execution block that runs before running the play. It can be a task with some prerequisites check (or) validation Some examples we[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/">Ansible Pre Tasks and Post Tasks Example | Devops Junction</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>In this article, we are going to see how to use ansible pre tasks and post tasks with examples.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks.jpg"><img class="post-img alignnone wp-image-8054 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks.jpg" alt="ansible pre tasks" width="1748" height="1240" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks.jpg 1748w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks-300x213.jpg 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks-1024x726.jpg 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks-768x545.jpg 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks-1536x1090.jpg 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/ansible_pre_tasks-90x65.jpg 90w" sizes="(max-width: 1748px) 100vw, 1748px" /></a></p>
<h2><strong>What is Ansible pre_tasks?</strong></h2>
<p>Ansible pretask is a conditional execution block that runs before running the play. It can be a task with some prerequisites check (or) validation</p>
<p>Some examples we can think where ansible pre-task would be helpful</p>
<ul>
<li>To install dependency packages before running the actual application <code>npm install</code> or <code>pip install -r requirements.txt</code></li>
<li>To validate if the environment meets sufficient criteria like memory, OS version etc before installing a software</li>
<li>configuring SSH key prior so that you can log in</li>
<li>Server provisioning steps like creating user, group etc before the installation or setup begin</li>
</ul>
<p>There are more examples we can continue adding to this list</p>
<p>To put it simply. If you want to run anything as a prerequisite or prevalidation before your actual play. ansible pre_tasks is your way to go</p>
<p>&nbsp;</p>
<h2><strong>What is Ansible post_tasks?</strong></h2>
<p>Just like ansible pre_tasks but this is executed after the actual play or task is completed.</p>
<p>this is mostly useful for post validation or assertion to make sure things are in the right shape or the result is matching our expectations.</p>
<p>Some examples we can think of are listed below</p>
<ul>
<li>To validate if things were installed properly and the playbook executed fine.</li>
<li>To send emails or Slack notifications after successful completion of a playbook</li>
<li>Running some other task or for accessing some API or external service upon playbook completion like webhook</li>
<li>Starting the application after the installation and configuration is completed</li>
</ul>
<p>We can keep this list going with more and more use cases for ansible post_tasks</p>
<p>Simply put, ansible post_tasks is to conditionally execute a block or play upon the successful completion of the playbook. it can be used for post validation, post-execution automation.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>How to use pre_tasks and post_tasks in Ansible</h2>
<p>Let us see how to use ansible <code>pre_tasks</code> and <code>post_tasks</code> in the ansible-playbook practically.</p>
<p>In this playbook, we are going to perform the following tasks</p>
<ul>
<li style="list-style-type: none;">
<ul>
<li>Install necessary commands and tools using <code>apt</code> module &#8211; <code>pre_tasks</code></li>
<li>Validate the nodejs installation is successful and print version using debug and assert</li>
<li>Create a directory to download the nodejs application</li>
<li>Download the nodejs codebase from GIT repo using Tokenized URL</li>
<li>Tokens are saved and retrieved from the Secrets file named <code>gitsecrets.yml</code></li>
<li>Do <code>npm install</code>once the code is downloaded</li>
<li>Start the nodejs application</li>
<li>Validate if the port is open and Node js is accepting requests</li>
<li>Send Slack notification using ansible slack module &#8211; <code>post_tasks</code></li>
</ul>
</li>
</ul>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4">---
  - name: Install and Launch the Simple NodeJS Application
    hosts: testserver
    vars_files:
       - gitsecrets.yml
    vars:
       - destdir: /apps/sampleapp

    pre_tasks:
      - name : install dependencies before starting
        become: yes
        register: aptinstall
        apt:
           name: 
            - nodejs
            - npm
            - git
           state: latest
           update_cache: yes
      
      - name : validate the nodejs installation
        debug: msg="Installation of node is Successfull"
        when: aptinstall is changed
    
    tasks:
       - name: Version of Node and NPM
         shell:
            "npm -v &amp;&amp; nodejs -v"
         register: versioninfo

       - name: Validate if the installation is intact
         assert:
          that: "versioninfo is changed"

      
       - name: Create Dest Directory if not exists
         become: yes
         file: 
          path: "{{ destdir }}"
          state: directory
          owner: vagrant
          group: vagrant
          mode: 0755

       - name: Download the NodeJS code from the GitRepo
         become: yes
         git:
            repo: 'https://{{gittoken}}@github.com/AKSarav/SampleNodeApp.git'
            dest: "{{ destdir }}"

       - name: Change the ownership of the directory
         become: yes
         file:
           path: "{{destdir}}"
           owner: "vagrant"
         register: chgrpout

       - name: Install Dependencies with NPM install command
         shell:
            "npm install"
         args:
            chdir: "{{ destdir }}"
         register: npminstlout

       - name: Debug npm install command
         debug: msg='{{npminstlout.stdout_lines}}'


       - name: Start the App
         async: 10
         poll: 0
         shell:
            "(node index.js &gt; nodesrv.log 2&gt;&amp;1 &amp;)"
         args:
           chdir: "{{ destdir }}"
         register: appstart

       - name: Validating the port is open
         tags: nodevalidate
         wait_for:
           host: "localhost"
           port: 5000
           delay: 10
           timeout: 30
           state: started
           msg: "NodeJS server is not running"

    post_tasks:
        - name: notify Slack that the servers have been updated 
          tags: slack
          community.general.slack:
            token: T026******PF/B02U*****N/WOa7r**********Ao0jnWn
            msg: |
                ### StatusUpdate ###
                &#8211; ------------------------------------
                ``
                `Server`: {{ansible_host}}
                `Status`: NodeJS Sample Application installed successfully
                &#8211; ------------------------------------
            channel: '#ansible'
            color: good
            username: 'Ansible on {{ inventory_hostname }}'
            link_names: 0
            parse: 'none'
          delegate_to: localhost</pre>
<p>&nbsp;</p>
<p>You can see how we are using <code>pre_tasks</code> and <code>post_tasks</code> in this playbook</p>
<p>we are using <code>pre_tasks</code> to run a task that installs necessary components and packages like node, npm etc</p>
<p>Learn more about, <a href="https://www.middlewareinventory.com/blog/ansible-apt-examples/">how to use apt with ansible</a>.</p>
<p>and using <code>post_tasks</code> to send a notification to the Slack channel upon Task completion using the ansible slack module and webhook. I will try to cover this slack integration in detail in my next article</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/01/slack-notification-ansible.png"><img class="post-img alignnone wp-image-8049 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2022/01/slack-notification-ansible.png" alt="ansible post_task" width="1402" height="422" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/01/slack-notification-ansible.png 1402w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/slack-notification-ansible-300x90.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/slack-notification-ansible-1024x308.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/slack-notification-ansible-768x231.png 768w" sizes="(max-width: 1402px) 100vw, 1402px" /></a></p>
<p>&nbsp;</p>
<p>Here is the output of this playbook</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="bootstrap4">$ ansible-playbook install-nodejs-app.yaml -i hosts &#8211; ask-vault-password
Vault password: 

PLAY [Install and Launch the Simple NodeJS Application] ************************************************************************************

TASK [Gathering Facts] *********************************************************************************************************************
ok: [testserver]

TASK [install dependencies before starting] ************************************************************************************************
changed: [testserver]

TASK [validate the nodejs installation] ****************************************************************************************************
ok: [testserver] =&gt; {
    "msg": "Installation of node is Successfull"
}

TASK [Version of Node and NPM] *************************************************************************************************************
changed: [testserver]

TASK [Validate if the installation is intact] **********************************************************************************************
ok: [testserver] =&gt; {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [Create Dest Directory if not exists] *************************************************************************************************
changed: [testserver]

TASK [Download the NodeJS code from the GitRepo] *******************************************************************************************
changed: [testserver]

TASK [Change the ownership of the directory] ***********************************************************************************************
ok: [testserver]

TASK [Install Dependencies with NPM install command] ***************************************************************************************
changed: [testserver]

TASK [Debug npm install command] ***********************************************************************************************************
ok: [testserver] =&gt; {
    "msg": [
        "nodeproject1@1.0.0 /apps/sampleapp",
        "├─┬ express@4.17.2 ",
        "│ ├─┬ accepts@1.3.7 ",
        "│ │ ├─┬ mime-types@2.1.34 ",
        "│ │ │ └── mime-db@1.51.0 ",
        "│ │ └── negotiator@0.6.2 ",
        "│ ├── array-flatten@1.1.1 ",
        "│ ├─┬ body-parser@1.19.1 ",
        "│ │ ├── bytes@3.1.1 ",
        "│ │ ├─┬ http-errors@1.8.1 ",
        "│ │ │ ├── inherits@2.0.4 ",
        "│ │ │ └── toidentifier@1.0.1 ",
        "│ │ ├─┬ iconv-lite@0.4.24 ",
        "│ │ │ └── safer-buffer@2.1.2 ",
        "│ │ └── raw-body@2.4.2 ",
        "│ ├── content-disposition@0.5.4 ",
        "│ ├── content-type@1.0.4 ",
        "│ ├── cookie@0.4.1 ",
        "│ ├── cookie-signature@1.0.6 ",
        "│ ├─┬ debug@2.6.9 ",
        "│ │ └── ms@2.0.0 ",
        "│ ├── depd@1.1.2 ",
        "│ ├── encodeurl@1.0.2 ",
        "│ ├── escape-html@1.0.3 ",
        "│ ├── etag@1.8.1 ",
        "│ ├─┬ finalhandler@1.1.2 ",
        "│ │ └── unpipe@1.0.0 ",
        "│ ├── fresh@0.5.2 ",
        "│ ├── merge-descriptors@1.0.1 ",
        "│ ├── methods@1.1.2 ",
        "│ ├─┬ on-finished@2.3.0 ",
        "│ │ └── ee-first@1.1.1 ",
        "│ ├── parseurl@1.3.3 ",
        "│ ├── path-to-regexp@0.1.7 ",
        "│ ├─┬ proxy-addr@2.0.7 ",
        "│ │ ├── forwarded@0.2.0 ",
        "│ │ └── ipaddr.js@1.9.1 ",
        "│ ├── qs@6.9.6 ",
        "│ ├── range-parser@1.2.1 ",
        "│ ├── safe-buffer@5.2.1 ",
        "│ ├─┬ send@0.17.2 ",
        "│ │ ├── destroy@1.0.4 ",
        "│ │ ├── mime@1.6.0 ",
        "│ │ └── ms@2.1.3 ",
        "│ ├── serve-static@1.14.2 ",
        "│ ├── setprototypeof@1.2.0 ",
        "│ ├── statuses@1.5.0 ",
        "│ ├─┬ type-is@1.6.18 ",
        "│ │ └── media-typer@0.3.0 ",
        "│ ├── utils-merge@1.0.1 ",
        "│ └── vary@1.1.2 ",
        "└─┬ redis@4.0.2 ",
        "  ├── @node-redis/bloom@1.0.1 ",
        "  ├─┬ @node-redis/client@1.0.2 ",
        "  │ ├── cluster-key-slot@1.1.0 ",
        "  │ ├── generic-pool@3.8.2 ",
        "  │ ├─┬ redis-parser@3.0.0 ",
        "  │ │ └── redis-errors@1.2.0 ",
        "  │ └── yallist@4.0.0 ",
        "  ├── @node-redis/json@1.0.2 ",
        "  ├── @node-redis/search@1.0.2 ",
        "  └── @node-redis/time-series@1.0.1 "
    ]
}

TASK [Start the App] ***********************************************************************************************************************
changed: [testserver]

TASK [Validating the port is open] *********************************************************************************************************
ok: [testserver]

TASK [notify Slack that the servers have been updated] *************************************************************************************
ok: [testserver -&gt; localhost]

PLAY RECAP *********************************************************************************************************************************
testserver                 : ok=13   changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</pre>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>In this article, we have learnt what is ansible pre tasks and ansible post tasks and how to use them.</p>
<p>As a summary, we learnt <code>pre_tasks</code> is to execute some tasks prior/before executing the actual play or tasks. there can be many tasks under <code>pre_tasks</code></p>
<p>Likewise, ansible <code>post_tasks</code> is to execute some tasks post/after the successful completion of the actual play or tasks. Like sending emails and slack notifications etc.</p>
<p>We have also learned how to send slack notifications using ansible post_task in this article along with a few more tricks like</p>
<ul>
<li>Ansible Assertion</li>
<li><a href="https://www.middlewareinventory.com/blog/ansible-git-example/">Ansible Git</a></li>
<li><a href="https://www.middlewareinventory.com/blog/ansible-wait_for-examples/">How to use ansible wait_for</a></li>
<li><a href="https://www.middlewareinventory.com/blog/ansible-apt-examples/">how to install packages with Ansible apt</a></li>
<li><a href="https://www.middlewareinventory.com/blog/ansible-shell-examples/">Ansible Shell</a>.</li>
<li>How to use Ansible Vault and secrets in the playbook</li>
</ul>
<p>We have around 50+ articles dedicatedly for each of these modules. in DevopsJunction.</p>
<p>Please refer to the following article and make use of it.</p>
<blockquote class="wp-embedded-content" data-secret="bBgfQnsMUO"><p><a href="https://www.middlewareinventory.com/blog/ansible-playbook-example/">Ansible Playbook Examples &#8211; Sample Ansible Playbooks | Devops Junction</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;Ansible Playbook Examples &#8211; Sample Ansible Playbooks | Devops Junction&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/ansible-playbook-example/embed/#?secret=bBgfQnsMUO" data-secret="bBgfQnsMUO" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<p>&nbsp;</p>
<p>Cheers<br />
Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="6982"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/">Ansible Pre Tasks and Post Tasks Example | Devops Junction</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ansible Copy Examples &#8211; How to copy files and directories with Ansible</title>
		<link>https://www.middlewareinventory.com/blog/ansible-copy-examples/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-copy-examples/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Sat, 15 Jan 2022 14:58:49 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=7956</guid>

					<description><![CDATA[<p>In this article, we are going to see practical examples of Ansible copy. We will be seeing various examples of ansible copy To keep things simple we have created the playbook that you can test in your localhost itself, In other words, ansible control machine you can change the hosts[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-copy-examples/">Ansible Copy Examples &#8211; How to copy files and directories with Ansible</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>In this article, we are going to see practical examples of Ansible copy. We will be seeing various examples of ansible copy</p>
<p>To keep things simple we have created the playbook that you can test in your <code>localhost</code> itself, In other words, ansible control machine</p>
<p>you can change the hosts variable to a valid remote host group if you would like to try on the remote machines.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy.jpg"><img class="alignnone size-full wp-image-7971" src="https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy.jpg" alt="Ansible Copy" width="1748" height="1240" srcset="https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy.jpg 1748w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy-300x213.jpg 300w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy-1024x726.jpg 1024w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy-768x545.jpg 768w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy-1536x1090.jpg 1536w, https://www.middlewareinventory.com/wp-content/uploads/2022/01/AnsibleCopy-90x65.jpg 90w" sizes="(max-width: 1748px) 100vw, 1748px" /></a></p>
<h2>Ansible Copy Module</h2>
<p>The <code>copy</code> module executes a simple copy on the file or directory on the local or on the remote machine.</p>
<p>You can use an ansible copy for the following requirements</p>
<ul>
<li>To copy files from a local source to a local destination</li>
<li>To copy files from a remote source to a remote destination (remote_src)</li>
<li>To copy files from a local source to a remote destination</li>
</ul>
<p>You can use the <code>fetch</code> module to copy files from the remote source to local on the other hand.</p>
<p>We will be seeing various examples of Ansible copy in this article. we have <a href="https://www.middlewareinventory.com/blog/ansible-copy-file-or-directory-local-to-remote/">one more article on Ansible copy</a> for you to read and explore.</p>
<h1></h1>
<h2>Quick Syntax of Ansible Copy</h2>
<p>&nbsp;</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false"># copy_file.yml

- name: copy files to destination
  hosts: localhost
  connection: local
  tasks:
    - name: copy src.txt as dest.txt in the same dir 
      copy:
        src: files/src.txt
        dest: files/dest.txt
      tags:
        - simple_copy</pre>
<p>&nbsp;</p>
<p>The preceding playbook consists of a single play. The assumptions to execute the above playbook are,</p>
<ol>
<li>There exists a <code>files</code> directory in the same location as the playbook</li>
<li>There exists a file <code>src.txt</code> inside the above <code>files</code> directory.</li>
</ol>
<p>The play consists of a task that uses the copy module to copy the “src” to its “dest”.</p>
<p>By default, the ansible copy module <strong>does a force copy</strong> to the destination and overwrites the existing file when present.</p>
<p>Just copy the above playbook and run it in <a href="http://localhost">localhost</a> by following the below commands in order</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % mkdir -p files
sseshadr@SSESHADR-M-24FK copy_module % echo "adding a new line to files/src.txt" &gt;&gt; files/src.txt 
sseshadr@SSESHADR-M-24FK copy_module % 
sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_file.yml &#8211; tags "simple_copy" -v    
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy files to destination] *****************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [force copy src.txt as dest.txt in the same dir] ********************************************************************************************
changed: [localhost] =&gt; {"changed": true, "checksum": "f292ebaaaa1651f4875e13ea6346b48b9f817421", "dest": "files/dest.txt", "gid": 20, "group": "staff", "md5sum": "85cfe9b0250baed542831184c0a4c4d5", "mode": "0644", "owner": "sseshadr", "size": 65, "src": "/Users/sseshadr/.ansible/tmp/ansible-tmp-1641913099.0320861-74874-262311856787358/source", "state": "file", "uid": 501}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % ls -l files/dest.txt 
-rw-r--r &#8211;  1 sseshadr  staff  65 Jan 11 20:28 files/dest.txt
</pre>
<p>The file src.txt was copied successfully as “files/dest.txt” as we can see from the output of the copy task, <code>changed: true</code></p>
<p>&nbsp;</p>
<h2>How to disable Force Copy of Ansible Copy</h2>
<p>If the force copy has to be disabled, i.e., ignore the copy task if the file is already present, then use the option <code>force: no</code> in the copy-module as shown below.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false"># copy_file.yml

- name: copy files to destination
  hosts: localhost
  connection: local
  tasks:
    - name: no force copy src.txt as dest.txt in the same dir 
      copy:
        src: files/src.txt
        dest: files/dest.txt
        force: no
      tags:
        - simple_copy_no_force<code class="language-yaml">
</code></pre>
<p>&nbsp;</p>
<p>The output of the preceding playbook is given below</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % ls -l files/dest.txt 
-rw-r--r &#8211;  1 sseshadr  staff  65 Jan 11 20:28 files/dest.txt
sseshadr@SSESHADR-M-24FK copy_module % 
sseshadr@SSESHADR-M-24FK copy_module % date
Tue Jan 11 20:35:31 IST 2022
sseshadr@SSESHADR-M-24FK copy_module % 
sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_file.yml &#8211; tags "simple_copy_no_force" -v
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy files to destination] *****************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [dont force copy src.txt as dest.txt in the same dir] ***************************************************************************************
ok: [localhost] =&gt; {"changed": false, "dest": "files/dest.txt", "src": "/Users/sseshadr/ansible-test/module_test/copy_module/files/src.txt"}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % 
sseshadr@SSESHADR-M-24FK copy_module % ls -l files/dest.txt                                           
-rw-r--r &#8211;  1 sseshadr  staff  65 Jan 11 20:28 files/dest.txt
</pre>
<p>We can see that the last modified time of the dest.txt is unchanged and the file was not overwritten by src.txt even though it had a new line since we had disabled force copy in our playbook.</p>
<h1></h1>
<h2>Overwrite and backup the original file</h2>
<p>What if the copied file contains a few mistakes but the copy module had overwritten the previous version? No worries, we have the option in the ansible copy module to take a backup of the previous version of the destination file. So it&#8217;s now easy to revert the copy.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false"># copy_file.yml

- name: copy files to destination
  hosts: localhost
  connection: local
  tasks:
    - name: copy src.txt to files/backup_test and create a backup of src.txt
      copy:
        src: files/src.txt
        dest: files/backup_test/
        backup: yes 
      tags:
        - backup</pre>
<p>&nbsp;</p>
<p>In this example, we would be copying <code>files/src.txt</code> to <code>files/backup_test</code> directory.</p>
<p>The destination filename would also be <code>src.txt</code>.</p>
<p>To demonstrate this example, the copy was already run once and we would be re-running the same play by adding an extra line to the source file. Only then we would be getting a backup of the original destination file.</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % echo "creating a new line in src.txt" &gt;&gt; files/src.txt
sseshadr@SSESHADR-M-24FK copy_module %                                                       
sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_file.yml &#8211; tags "backup" -v     
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy files to destination] *****************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [copy src.txt to files/backup_test and create a backup of src.txt] **************************************************************************
changed: [localhost] =&gt; {"backup_file": "files/backup_test/src.txt.77306.2022-01-11@20:45:03~", "changed": true, "checksum": "e2a8f9574b6e1b7e39a0c8abdff02b7edc076d28", "dest": "files/backup_test/src.txt", "gid": 20, "group": "staff", "md5sum": "5a4cf003863bec14f92c132143e6d217", "mode": "0644", "owner": "sseshadr", "size": 242, "src": "/Users/sseshadr/.ansible/tmp/ansible-tmp-1641914102.470293-77281-75182788946002/source", "state": "file", "uid": 501}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % ls -l files/backup_test                               
total 16
-rw-r--r &#8211;  1 sseshadr  staff  242 Jan 11 20:45 src.txt
-rw-r--r &#8211;  1 sseshadr  staff  211 Jan 11 20:44 src.txt.77306.2022-01-11@20:45:03~
</pre>
<p>As we can see the latest files/src.txt got copied as files/backup_test/src.txt and a backup of the previous version was also created as “src.txt.77306.2022-01-11@20:45:03~”. We can use this file to revert back to the previous version if something nasty happened due to the copy.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>Copying file to a non-existing directory</h2>
<p>If the destination directory does not exist, the <code>copy</code> module takes care of creating it and copying the file to the new directory with the same name as the source file name.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4"># copy_file.yml

- name: copy files to destination
  hosts: localhost
  connection: local
  tasks:
    - name: copy src.txt to a non existing directory
      copy:
        src: files/src.txt
        dest: files/not_dir/
      tags:
        - dir_not_exist</pre>
<p>Output of the preceding playbook is given below.</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % ls files/not_dir
ls: files/not_dir: No such file or directory
sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_file.yml &#8211; tags "dir_not_exist" -v 
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy files to destination] *****************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [copy src.txt to a non existing directory] **************************************************************************************************
changed: [localhost] =&gt; {"changed": true, "checksum": "e2a8f9574b6e1b7e39a0c8abdff02b7edc076d28", "dest": "files/not_dir/src.txt", "gid": 20, "group": "staff", "md5sum": "5a4cf003863bec14f92c132143e6d217", "mode": "0644", "owner": "sseshadr", "size": 242, "src": "/Users/sseshadr/.ansible/tmp/ansible-tmp-1641915480.656468-80209-40624732707130/source", "state": "file", "uid": 501}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % ls files/not_dir 
src.txt
</pre>
<h1></h1>
<h2>Copy entire directory</h2>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false"># copy_dir.yml

- name: copy module for directories
  hosts: localhost
  connection: local
  tasks:
    - name: copy dir1 to /tmp
      copy:
        src: dir1
        dest: /tmp/
        directory_mode:
      tags:
        - parentdir</pre>
<p>&nbsp;</p>
<p>The preceding play assumes that there is a directory <code>dir1</code> in the same location as the playbook. On running the above play, the entire directory <code>dir1</code> and its contents will be recursively copied to the destination <code>/tmp</code> as <code>/tmp/dir1</code></p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % mkdir dir1 &amp;&amp; mkdir -p dir1/inner_dir1 &amp;&amp; touch dir1/outer_file &amp;&amp; touch dir1/inner_dir1/inner_file

sseshadr@SSESHADR-M-24FK copy_module % ls -Rl dir1 
total 0
drwxr-xr-x  3 sseshadr  staff  96 Jan 11 21:14 inner_dir1
-rw-r--r &#8211;  1 sseshadr  staff   0 Jan 11 21:14 outer_file

dir1/inner_dir1:
total 0
-rw-r--r &#8211;  1 sseshadr  staff  0 Jan 11 21:14 inner_file

sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_dir.yml &#8211; tags "parentdir" -v
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy module for directories] ***************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [copy dir1 to /tmp] *************************************************************************************************************************
changed: [localhost] =&gt; {"changed": true, "dest": "/tmp/", "src": "/Users/sseshadr/ansible-test/module_test/copy_module/dir1"}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % ls -Rl /tmp/dir1 
total 0
drwxr-xr-x  3 sseshadr  wheel  96 Jan 11 21:14 inner_dir1
-rw-r--r &#8211;  1 sseshadr  staff   0 Jan 11 21:14 outer_file

/tmp/dir1/inner_dir1:
total 0
-rw-r--r &#8211;  1 sseshadr  staff  0 Jan 11 21:14 inner_file
</pre>
<p>As we can see from the above output, the entire directory was copied recursively to the destination.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>Ansible Copy only directory contents</h2>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">- name: copy module for directories
  hosts: localhost
  connection: local
  tasks:    
    - name: copy contents of dir1 to /tmp/dir1_contents
      copy:
        src: dir1/
        dest: /tmp/dir1_contents/
        directory_mode:
      tags:
        - dircontent</pre>
<p>&nbsp;</p>
<p>If only the contents of the directory need to be copied leaving out the outer directory, then src should end with a forward slash <code>/</code> which represents the contents of the src directory (in our case, contents of dir1)</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_dir.yml &#8211; tags "dircontent" -v 
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy module for directories] ***************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [copy contents of dir1 to /tmp/dir1_contents] ***********************************************************************************************
changed: [localhost] =&gt; {"changed": true, "dest": "/tmp/dir1_contents/", "src": "/Users/sseshadr/ansible-test/module_test/copy_module/dir1/"}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % ls -Rl /tmp/dir1_contents 
total 0
drwxr-xr-x  3 sseshadr  wheel  96 Jan 11 21:20 inner_dir1
-rw-r--r &#8211;  1 sseshadr  staff   0 Jan 11 21:20 outer_file

/tmp/dir1_contents/inner_dir1:
total 0
-rw-r--r &#8211;  1 sseshadr  staff  0 Jan 11 21:20 inner_file
</pre>
<p>We can see that the outer directory <code>dir1</code> was left and only its contents were copied to <code>/tmp/dir1_contents</code></p>
<h1></h1>
<h2>Ansible Copy raw content to file</h2>
<p>Not just files, ansible copy module can also write content to a destination file.</p>
<p>This feature of the ansible copy module is very useful if we want to dump some string content or “Ansible variables” into a file (say a dict).</p>
<p>Instead of the <code>src</code> option, we have to use the <code>content</code> argument and pass the necessary content to be written as the destination file.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4">#copy_file.yml

- name: copy files to destination
  hosts: localhost
  connection: local
  vars:
    somedict:
      key1: value1
      key2: value2
  tasks:
    - name: copy content to content_dest.txt
      copy:
        content: |
          Hello from ansible.
          This is a sample file.
          This is a sample dict,
          {{ somedict }}
        dest: files/content_dest.txt
      tags:
        - content</pre>
<p>&nbsp;</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_file.yml &#8211; tags "content" -v 
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy files to destination] *****************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [copy content to content_dest.txt] **********************************************************************************************************
changed: [localhost] =&gt; {"changed": true, "checksum": "783f59cb4d9068edf70494178913ff64426d2bea", "dest": "files/content_dest.txt", "gid": 20, "group": "staff", "md5sum": "fb94495fdebe48ba727186eddc14d5af", "mode": "0644", "owner": "sseshadr", "size": 103, "src": "/Users/sseshadr/.ansible/tmp/ansible-tmp-1641916547.4278688-82599-191762476043983/source", "state": "file", "uid": 501}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

sseshadr@SSESHADR-M-24FK copy_module % cat files/content_dest.txt 
Hello from ansible.
This is a sample file.
This is a sample dict,
{'key1': 'value1', 'key2': 'value2'}
</pre>
<h1></h1>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>How to Verify if the copy is successful</h2>
<p>So far we have trusted the copy-module to have successfully copied our source file to the destination.</p>
<p>What if we would like to know if the copy was TRULY successful indeed. Normally calculating the checksum of a file is a good technique to verify if two files are identical and there is no loss or corruption of data during the copy.</p>
<p>So we will look into the ways to verify the result of the copy-module by comparing the checksums of the source and destination file.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4">- name: copy files to destination
  hosts: localhost
  connection: local
  tasks:
    - block:
      - name: get properties of src.txt
        stat:
          path: files/src.txt
          checksum_algorithm: sha1
        register: src_info

      - name: copy src.txt to dest.txt
        copy:
          src: files/src.txt
          dest: files/dest.txt
          force: yes
          checksum:
        register: copy_out

      - name: Fail if copy was a failure
        fail:
          msg: "Copy failed!"
        when: src_info.stat.checksum != copy_out.checksum

      - name: Print Copy successful
        debug:
          msg: "Copy Successful!"

      tags:
        - checksum</pre>
<p>&nbsp;</p>
<p>The <code>stat</code> module can be used to find the initial checksum of the source file before copying. After copying, the copy-module itself returns a dict that contains the checksum of the destination file (SHA1 checksum).</p>
<p>Since the copy-module returns a “SHA1 checksum”, we can also calculate the “SHA1 checksum” of the source file by passing it as an argument to the stat module.</p>
<p>In the end, both the checksum values are compared to see if they are equal.</p>
<pre>sseshadr@SSESHADR-M-24FK copy_module % ansible-playbook copy_file.yml &#8211; tags "checksum" -v
No config file found; using defaults
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [copy files to destination] *****************************************************************************************************************

TASK [Gathering Facts] ***************************************************************************************************************************
ok: [localhost]

TASK [get properties of src.txt] *****************************************************************************************************************
ok: [localhost] =&gt; {"changed": false, "stat": {"atime": 1641914093.9985154, "attr_flags": "", "attributes": [], "birthtime": 1641913076.4996405, "block_size": 4096, "blocks": 8, "charset": "us-ascii", "checksum": "e2a8f9574b6e1b7e39a0c8abdff02b7edc076d28", "ctime": 1641914092.7721033, "dev": 16777220, "device_type": 0, "executable": false, "exists": true, "flags": 0, "generation": 0, "gid": 20, "gr_name": "staff", "inode": 13512847, "isblk": false, "ischr": false, "isdir": false, "isfifo": false, "isgid": false, "islnk": false, "isreg": true, "issock": false, "isuid": false, "mimetype": "text/plain", "mode": "0644", "mtime": 1641914092.7721033, "nlink": 1, "path": "files/src.txt", "pw_name": "sseshadr", "readable": true, "rgrp": true, "roth": true, "rusr": true, "size": 242, "uid": 501, "version": null, "wgrp": false, "woth": false, "writeable": true, "wusr": true, "xgrp": false, "xoth": false, "xusr": false}}

TASK [copy src.txt to dest.txt] ******************************************************************************************************************
ok: [localhost] =&gt; {"changed": false, "checksum": "e2a8f9574b6e1b7e39a0c8abdff02b7edc076d28", "dest": "files/dest.txt", "gid": 20, "group": "staff", "mode": "0644", "owner": "sseshadr", "path": "files/dest.txt", "size": 242, "state": "file", "uid": 501}

TASK [Fail if copy was a failure] ****************************************************************************************************************
skipping: [localhost] =&gt; {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Print Copy successful] *********************************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "Copy Successful!"
}

PLAY RECAP ***************************************************************************************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0
</pre>
<p>The copy was successful as the checksums values are the same before and after copy!</p>
<p>Cheers<br />
Sudarshan Seshadri</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-copy-examples/">Ansible Copy Examples &#8211; How to copy files and directories with Ansible</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-copy-examples/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ansible selectattr Example &#8211; Filter dictionary and select matching item</title>
		<link>https://www.middlewareinventory.com/blog/ansible-selectattr-example/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-selectattr-example/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Mon, 25 Oct 2021 18:14:35 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=7423</guid>

					<description><![CDATA[<p>Ansible selectattr filter is to select matching objects  from the dictionary by applying a test across all the objects in a dictionary/sequence. Ansible selectattr filter is basically an inherited version of Jinja selectattr filter.  As Ansible Quotes in their documentation besides the built-in Ansible filters, all JINJA2 filters can be[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-selectattr-example/">Ansible selectattr Example &#8211; Filter dictionary and select matching item</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Ansible selectattr filter is to select matching objects  from the dictionary by applying a test across all the objects in a dictionary/sequence.</p>
<p>Ansible selectattr filter is basically an inherited version of Jinja <code>selectattr</code> filter.  As Ansible Quotes in their documentation besides the built-in Ansible filters, all JINJA2 filters can be used in Ansible playbooks.</p>
<p>Be informed that, Only Ansible 2.7+ with Jinja2 supports the <code>selectattr</code> for those who are not there yet, you can use <a href="https://www.middlewareinventory.com/blog/ansible_json_query/">ansible json_query. Here is our article that can help</a></p>
<p>To see what version of ansible that you are using and what version of JINJA does it support you can use the <code>ansible &#8211; version</code> command</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">⇒ ansible &#8211; version | grep "jinja"
  jinja version = 3.0.2</pre>
<p>In the preceding output you can see that my ansible supports Jinja <code>3.0.2</code></p>
<p>Having said that. Let&#8217;s go ahead in to our today topic.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr.png"><img class="post-img alignnone wp-image-7431 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr.png" alt="ansible select_attr" width="1748" height="1240" srcset="https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr.png 1748w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr-300x213.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr-1024x726.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr-768x545.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr-1536x1090.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Ansible_select_attr-90x65.png 90w" sizes="(max-width: 1748px) 100vw, 1748px" /></a></p>
<h2>List of Objects / Dictionary we are going to use</h2>
<p>Consider the following dataset</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">[
    {
      "name": "Shanmugam",
      "gender": "male",
      "mobile": "9875643210",
      "dose1completed" : "yes",
      "dose2completed" : "yes",
      "age": "25",
      "city": "pudukottai",
      "state": "Tamilnadu"
    },
    {
      "name": "Lakshmi",
      "gender": "female",
      "mobile": "9875623410",
      "dose1completed" : "yes",
      "dose2completed" : "no",
      "age": "32",
      "city": "Chennai",
      "state": "Tamilnadu"
    },
    {
      "name": "Albert",
      "gender": "male",
      "mobile": "9875634510",
      "dose1completed" : "yes",
      "dose2completed" : "yes",
      "age": "65",
      "city": "Coimbatore",
      "state": "Tamilnadu"
    },
    {
      "name": "Abdul",
      "gender": "male",
      "mobile": "9875632341",
      "dose1completed" : "no",
      "dose2completed" : "no",
      "age": "45",
      "city": "Hosur",
      "state": "Tamilnadu"
    }
]</pre>
<p>&nbsp;</p>
<p>It is a list of objects/dictionary with few fields about the vaccination status and personal details of individuals.</p>
<p>On a side note, If you have not vaccinated yet. Please do it. Vaccination is our only hope now.</p>
<p>Back to the subject.</p>
<p>this is a sample dataset I have taken with 4 objects/persons but you can add more if you would like to.</p>
<p>From this dataset, Let us create some statistics of</p>
<ul>
<li>individuals with in age group of 18 to 45</li>
<li>individuals with age group 45 and above</li>
<li>who are yet to put their second dose of vaccination</li>
<li>people who are not vaccinated at all</li>
<li>who are living in red zone ( based on the active cases)</li>
<li>who are living in green zone</li>
<li>People who are living in cities</li>
</ul>
<p>you can create N number of stats based on this dataset. but how it is related to our ansible selectattr filter.</p>
<p>we are going to use ansible <code>selectattr</code> function to create these assertions/stats.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p>&nbsp;</p>
<h2>Ansible Playbook with selectattr filter</h2>
<p>Here is a playbook with ansible selectattr filter which creates these various stats for us.</p>
<p>we have used some nice formatting in the playbook using <code>debug</code> module and <code>msg</code></p>
<p>The complete playbook runs on <code>localhost</code> and has only one task with some variable declaration and printing on the same place.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
 - name: selectattr example - Vaccination Report
   hosts: localhost
   tasks:
    -  name: debug
       vars:
          - userdata: [
                        {
                          "name": "Shanmugam",
                          "gender": "male",
                          "mobile": "9875643210",
                          "dose1completed" : "yes",
                          "dose2completed" : "yes",
                          "age": "25",
                          "city": "pudukottai",
                          "state": "Tamilnadu"
                        },
                        {
                          "name": "Lakshmi",
                          "gender": "female",
                          "mobile": "9875623410",
                          "dose1completed" : "yes",
                          "dose2completed" : "no",
                          "age": "32",
                          "city": "Chennai",
                          "state": "Tamilnadu"
                        },
                        {
                          "name": "Albert",
                          "gender": "male",
                          "mobile": "9875634510",
                          "dose1completed" : "yes",
                          "dose2completed" : "yes",
                          "age": "65",
                          "city": "Coimbatore",
                          "state": "Tamilnadu"
                        },
                        {
                          "name": "Abdul",
                          "gender": "male",
                          "mobile": "9875632341",
                          "dose1completed" : "no",
                          "dose2completed" : "no",
                          "age": "45",
                          "city": "Hosur",
                          "state": "Tamilnadu"
                        },
                      ]
          - agegroup18to45: "{{ userdata | selectattr('age','&gt;=','18') | selectattr('age','&lt;=','45'  ) }}"
          - agegroup45above: "{{ userdata | selectattr('age','gt','45')  }}"
          - dose2pending: "{{ userdata | selectattr('dose2completed','==','no') | selectattr('dose1completed','eq','yes') }}"
          - nonvaccinated: "{{ userdata | selectattr('dose1completed','equalto','no')}}"
          - redzoneresidents: "{{ userdata | selectattr('city','in','Coimbatore,Chennai')}}"
          - greenzoneresidents: "{{ userdata | rejectattr('city','in','Coimbatore,Chennai')}}"
          - cityresidents: "{{ userdata | selectattr('city','in','Coimbatore,Chennai')}}"
       debug: 
          msg:
          - "-------------------" 
          - "Age Group 18 to 45"
          - "-------------------"
          - "{{agegroup18to45}}"
          - "-------------------"
          - "-------------------" 
          - "Age Group 45 Above"
          - "-------------------"
          - "{{agegroup45above}}"
          - "-------------------"
          - "-------------------" 
          - "Second dose pending"
          - "-------------------"
          - "{{dose2pending}}"
          - "-------------------" 
          - "Yet to Vaccinate"
          - "-------------------"
          - "{{nonvaccinated}}"
          - "-------------------" 
          - "Containment Zone"
          - "-------------------"
          - "{{redzoneresidents}}"
          - "-------------------" 
          - "Non Containment Zone"
          - "-------------------"
          - "{{greenzoneresidents}}"
          - "-------------------" 
          - "Urbanites"
          - "-------------------"
          - "{{greenzoneresidents}}"



              

</pre>
<p>Since the variables are created in the sequential order, we are able to do our all our data processing right in the <code>vars</code> section itself</p>
<p>except the <code>userdata</code> variable all other variables are used to create our stats reports.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">- agegroup18to45: "{{ userdata | selectattr('age','&gt;=','18') | selectattr('age','&lt;=','45'  ) }}"
- agegroup45above: "{{ userdata | selectattr('age','gt','45')  }}"
- dose2pending: "{{ userdata | selectattr('dose2completed','==','no') | selectattr('dose1completed','eq','yes') }}"
- nonvaccinated: "{{ userdata | selectattr('dose1completed','equalto','no')}}"
- redzoneresidents: "{{ userdata | selectattr('city','in','Coimbatore,Chennai')}}"
- greenzoneresidents: "{{ userdata | rejectattr('city','in','Coimbatore,Chennai')}}"
- cityresidents: "{{ userdata | selectattr('city','in','Coimbatore,Chennai')}}"</pre>
<p>In every single variable declaration we are using <code>selectattr</code> except the second last <code>greenzoneresidents</code> there we are using <code>rejectattr</code> just to give you a perspective</p>
<p>The Syntax of Ansible selectattr filter consists of three elements</p>
<ul>
<li>attribute in an object or operand</li>
<li>comparison operator or test</li>
<li>value to compare with</li>
</ul>
<pre>selectattr('variable/attribute in an object','comparison operator / tests','Value to compare with')</pre>
<p>Read more about <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#comparisons">comparison operators in Jinja2 here</a> like <code>==, !=, &gt;, &lt;</code>  etc</p>
<p>Read more about <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#list-of-builtin-tests">tests in Jinja2 here</a> like <code>eq, ne, ge, gt, in, not</code> etc</p>
<p>In most cases the test and comparison operator do the same operation i.e <code>eq</code> and <code>==</code></p>
<p>We are printing all the variables we have created dynamically just now within the <code>vars</code> section with <code>msg</code> block with nice formatting</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p>&nbsp;</p>
<h2>Execute and Validate the output</h2>
<p>Here is the execution output of the playbook for your reference.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">Ansible|⇒ ansible-playbook selectattr-ex1.yml
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [selectattr example] ***************************************************************************************************************************************************

TASK [Gathering Facts] ******************************************************************************************************************************************************
ok: [localhost]

TASK [debug] ****************************************************************************************************************************************************************
ok: [localhost] =&gt; {
    "msg": [
        "-------------------",
        "Age Group 18 to 45",
        "-------------------",
        [
            {
                "age": "25",
                "city": "pudukottai",
                "dose1completed": "yes",
                "dose2completed": "yes",
                "gender": "male",
                "mobile": "9875643210",
                "name": "Shanmugam",
                "state": "Tamilnadu"
            },
            {
                "age": "32",
                "city": "Chennai",
                "dose1completed": "yes",
                "dose2completed": "no",
                "gender": "female",
                "mobile": "9875623410",
                "name": "Lakshmi",
                "state": "Tamilnadu"
            },
            {
                "age": "45",
                "city": "Hosur",
                "dose1completed": "no",
                "dose2completed": "no",
                "gender": "male",
                "mobile": "9875632341",
                "name": "Abdul",
                "state": "Tamilnadu"
            }
        ],
        "-------------------",
        "-------------------",
        "Age Group 45 Above",
        "-------------------",
        [
            {
                "age": "65",
                "city": "Coimbatore",
                "dose1completed": "yes",
                "dose2completed": "yes",
                "gender": "male",
                "mobile": "9875634510",
                "name": "Albert",
                "state": "Tamilnadu"
            }
        ],
        "-------------------",
        "-------------------",
        "Second dose pending",
        "-------------------",
        [
            {
                "age": "32",
                "city": "Chennai",
                "dose1completed": "yes",
                "dose2completed": "no",
                "gender": "female",
                "mobile": "9875623410",
                "name": "Lakshmi",
                "state": "Tamilnadu"
            }
        ],
        "-------------------",
        "Yet to Vaccinate",
        "-------------------",
        [
            {
                "age": "45",
                "city": "Hosur",
                "dose1completed": "no",
                "dose2completed": "no",
                "gender": "male",
                "mobile": "9875632341",
                "name": "Abdul",
                "state": "Tamilnadu"
            }
        ],
        "-------------------",
        "Containment Zone",
        "-------------------",
        [
            {
                "age": "32",
                "city": "Chennai",
                "dose1completed": "yes",
                "dose2completed": "no",
                "gender": "female",
                "mobile": "9875623410",
                "name": "Lakshmi",
                "state": "Tamilnadu"
            },
            {
                "age": "65",
                "city": "Coimbatore",
                "dose1completed": "yes",
                "dose2completed": "yes",
                "gender": "male",
                "mobile": "9875634510",
                "name": "Albert",
                "state": "Tamilnadu"
            }
        ],
        "-------------------",
        "Non Containment Zone",
        "-------------------",
        [
            {
                "age": "25",
                "city": "pudukottai",
                "dose1completed": "yes",
                "dose2completed": "yes",
                "gender": "male",
                "mobile": "9875643210",
                "name": "Shanmugam",
                "state": "Tamilnadu"
            },
            {
                "age": "45",
                "city": "Hosur",
                "dose1completed": "no",
                "dose2completed": "no",
                "gender": "male",
                "mobile": "9875632341",
                "name": "Abdul",
                "state": "Tamilnadu"
            }
        ],
        "-------------------",
        "Urbanites",
        "-------------------",
        [
            {
                "age": "25",
                "city": "pudukottai",
                "dose1completed": "yes",
                "dose2completed": "yes",
                "gender": "male",
                "mobile": "9875643210",
                "name": "Shanmugam",
                "state": "Tamilnadu"
            },
            {
                "age": "45",
                "city": "Hosur",
                "dose1completed": "no",
                "dose2completed": "no",
                "gender": "male",
                "mobile": "9875632341",
                "name": "Abdul",
                "state": "Tamilnadu"
            }
        ]
    ]
}

PLAY RECAP ******************************************************************************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</pre>
<p>&nbsp;</p>
<h2>Realtime Example for Ansible selectattr &#8211; AWS EFS report</h2>
<p>The playbook we have designed earlier in this article, is designed to cover all the usage of <code>selectattr</code>  however we thought of giving one more realtime example.</p>
<p>This playbook we have written a while ago to create AWS EFS report can serve as a one best real time example of <code>selectattr</code> along with <code>map</code> filters. Do take a look.</p>
<blockquote class="wp-embedded-content" data-secret="WJGOlN3ciP"><p><a href="https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/">Find EC2 instances using EFS &#8211; EFS Usage Report</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;Find EC2 instances using EFS &#8211; EFS Usage Report&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/embed/#?secret=WJGOlN3ciP" data-secret="WJGOlN3ciP" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<p>&nbsp;</p>
<h2>Difference between Ansible Select and Selectattr (Additional)</h2>
<p>Though this is not in the objective of this article, I wanted to go little deeper to give some clarity on this topic</p>
<p>As I have mentioned in the beginning, All Jinja2 filters can be used in Ansible.</p>
<p>Having said that, there are two filters named <code>select</code> and <code>selectattr</code>  in jinja2 so does in ansible.</p>
<p>So how they are different and where to use them. ?</p>
<p>Both these filters helps to filter an object from a sequence or list</p>
<p>One difference is that</p>
<p><code>select</code> Filters a sequence of objects <strong><span style="color: #800000;">by applying a test to each object</span></strong>, and only selecting the objects with the test succeeding.</p>
<p><code>selectattr</code> Filters a sequence of objects<span style="color: #003366;"><strong> by applying a test to the specified attribute of each object</strong></span>, and only selecting the objects with the test succeeding.</p>
<p>the difference here is selectattr  runs a test on a specific attribute of the object while the select does it on the object itself.</p>
<p>The elements inside the list/sequence would have attributes only when they are <code>dictionary</code>  or proper object.</p>
<pre>numbers: ['10','20','30']</pre>
<p>&nbsp;</p>
<p>the preceding list <code>numbers</code>  does not ( cannot) have any attributes so here you can use <code>select</code> to run any test on the elements directly</p>
<p>the following JINJA2 snippet would print numbers <code>greater than or equal to 20</code> which is directly applied on the elements of list</p>
<div>
<pre>"{{ numbers | select('ge','20') }}"</pre>
</div>
<p>So the verdict here is that</p>
<ul>
<li><code>select</code> is to filter elements/objects of a simple list  <code>[x,y,z,1,2,3]</code></li>
<li><code>selectattr</code> is to filter elements/objects of list with nested objects <code>[{},{},{}]</code></li>
</ul>
<p>Here is the quick playbook for you to understand this practically</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: filter test
  hosts: localhost
  vars: 
    numbers: ['10','20','30']
    names: [ 
      {
        "first": "Sarav",
        "last": "AK",
        "mobile": "+919876543210",
        "ctc": "200000",
        "address": {
          "city": "Chennai",
          "country": "India"
        }

      }]
  tasks:
    - name: Ansible Select vs SelectAttr
      debug: 
        msg: 
          - "==========================="
          - "With SelectAttr - Filter using Attribute name of Object"
          - "==========================="
          - '{{ names | selectattr("first", "eq", "Sarav")}}'
          - ""
          - "==========================="
          - "With Select - We are filtering using regex as the elements of list are treated as a normal string not as object/dict"
          - "==========================="
          - '{{ names | select("match", ".+first.+:.+Sarav.+")}}'
          - ""
          - "==========================="
          - "With Select - Rule is directly applied on the Object"
          - "==========================="
          - "{{ numbers | select('ge','20') }}"
</pre>
<p>Output of this playbook is given below as an image</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM.png"><img class="post-img alignnone wp-image-7465 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM.png" alt="Ansible Select vs Selectattr" width="3082" height="2154" srcset="https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM.png 3082w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM-300x210.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM-1024x716.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM-768x537.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM-1536x1074.png 1536w, https://www.middlewareinventory.com/wp-content/uploads/2021/10/Screenshot-2021-11-21-at-12.19.53-AM-2048x1431.png 2048w" sizes="(max-width: 3082px) 100vw, 3082px" /></a></p>
<h2></h2>
<h2>Conclusion</h2>
<p>Hope this article helps you understand the Ansible selectattr filter and how to use it  along with few other subtopics like</p>
<ul>
<li>How to Pretty print or do formatting in Ansible Debug</li>
<li>How to do inversive action with <code>rejectattr</code></li>
<li>How to use Jinja2 Comparison operators and tests in Ansible filters</li>
<li>What is Ansible Select and Selectattr and difference between them</li>
<li>Realtime example of Ansible Selectattr with EFS</li>
</ul>
<p>If you have any more questions or feed back please free to update on the comments section</p>
<p>If you are looking for any Professional Support in Devops/SRE/Cloud Consider <a href="https://rumen.free.bg">Gritfy</a></p>
<a href="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg"><img class="post-img" src="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg" alt="gritfy" width="1047" height="415" class="alignnone size-full wp-image-6623" /></a>
<p>&nbsp;</p>
<p>Cheers<br />
Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="7423"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/ansible-selectattr-example/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-selectattr-example/">Ansible selectattr Example &#8211; Filter dictionary and select matching item</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-selectattr-example/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Find EC2 instances using EFS &#8211; EFS Usage Report</title>
		<link>https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/</link>
					<comments>https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Sat, 24 Jul 2021 20:09:51 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<category><![CDATA[AWS]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=7082</guid>

					<description><![CDATA[<p>Let&#8217;s suppose that you have an infrastructure of 1000 hosts and you want to know how many of them use EFS &#8211; Elastic File System or traditionally known as Network File System Or Let&#8217;s just say that you have 100 EFS File systems in your AWS account and you want[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/">Find EC2 instances using EFS &#8211; EFS Usage Report</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Let&#8217;s suppose that you have an infrastructure of 1000 hosts and you want to know how many of them use EFS &#8211; Elastic File System or traditionally known as Network File System</p>
<p>Or Let&#8217;s just say that you have 100 EFS File systems in your AWS account and you want to audit where those EFS file systems are mounted to.</p>
<p>Both are same requirement from different angle.</p>
<p>So I had a recent requirement of perfoming such EFS Audit and wanted to <strong>Find EC2 instances using EFS File System</strong> and this is how I did it with Ansible.</p>
<p>So here it goes. EFS Usage report as CSV</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM.jpg"><img class="post-img alignnone wp-image-7108 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM.jpg" alt="efs mounts ec2" width="2328" height="1310" srcset="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM.jpg 2328w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM-300x169.jpg 300w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM-1024x576.jpg 1024w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM-768x432.jpg 768w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM-1536x864.jpg 1536w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.18.18-AM-2048x1152.jpg 2048w" sizes="(max-width: 2328px) 100vw, 2328px" /></a></p>
<p>This article is going to talk about how I have ran a Single Ansible Playbook to collect the EFS mounts of my entire EC2 instances ( Let&#8217;s just say 1000+)</p>
<p>With no further ado let&#8217;s start with a playbook</p>
<p>&nbsp;</p>
<h2>Ansible Playbook to collect EFS mounts across all EC2 instances</h2>
<p>This playbook is rather little complicated than the simple ones.</p>
<p>Cause I had to use lot of Ansible&#8217;s  Built-in filters and variables  along with Jinja2 Filters too.</p>
<p>We can first take a look at the playbook and decode it bit by bit later.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml">---
 - name: EFS report
   hosts: prodall
   gather_facts: yes
   tasks: 
    - name: "Collect the NFS mounts"
      set_fact:
       testvar: "{{ testvar | default ({}) | combine ( { inventory_hostname : (ansible_facts.mounts | selectattr('fstype', 'in', ['nfs4','nfs']) | list | sort(attribute='mount'))[-1] } ) }}"
      register: testreg

    # to print all messages in single place
    - set_fact: 
        data: "{{ ansible_play_hosts | map ('extract', hostvars, 'testvar') }}"
      run_once: yes 

  
    # Parse Json and create a CSV using jq
    - name: create a CSV file locally on control machine
      local_action:
        module: shell
        args: |
           echo "Hostname,EFS Device,Mountpoint" &gt; efstest.csv
           echo {{ data | to_json | tojson  }} | jq '.[]|to_entries[] | [.key, .value.device, .value.mount] |@csv'|tr -d '\\"' &gt;&gt; efsdata.csv
      run_once: yes
</pre>
<p>&nbsp;</p>
<p>Yeah. It looks simple at first sight, but it took a while to figure out the filters ( at least for me)</p>
<p>So we have three tasks here in the playbook</p>
<p>Everything we need to do would be taken care by the <code>gathering_facts</code> stage. All the tasks are just for data processing.</p>
<p>Read more about  <a href="https://www.middlewareinventory.com/blog/ansible-facts-list-how-to-use-ansible-facts/">Ansible Facts and how to use them here</a></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p>&nbsp;</p>
<h3>Task 1:  Collecting the EFS mounts from ansible facts</h3>
<p><span style="color: #e00d62;"><strong>The First Task </strong></span>where we do the major data collection. we are using the ansible facts already collected and trying to create  dictionary.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml">- name: "Collect NFS Mounts"
  set_fact:
     testvar: "{{ testvar | default ({}) | combine ( { inventory_hostname : (ansible_facts.mounts | selectattr('fstype', 'in', ['nfs4','nfs']) | list | sort(attribute='mount'))[-1] } ) }}"
  register: testreg</pre>
<p>&nbsp;</p>
<p>The hostname would be the  <code>key</code> and the value would be the nfs mount related info.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="json">"appserver01": {
            "block_available": 8796052503629,
            "block_size": 1048576,
            "block_total": 8796093022207,
            "block_used": 40518578,
            "device": "fs-xxx9s01.efs.us-east-1.amazonaws.com:/",
            "fstype": "nfs4",
            "inode_available": 0,
            "inode_total": 0,
            "inode_used": 0,
            "mount": "/remotedrive",
            "options": "rw,relatime,vers=4.1,rsize=1048576,wsize=1048576,namlen=255,hard,noresvport,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=172.31.2.236,local_lock=none,addr=172.31.4.26",
            "size_available": 9223329550045282304,
            "size_total": 9223372036853727232,
            "uuid": "N/A"
        }</pre>
<p>&nbsp;</p>
<p>All this would be saved into a variable named <code>testvar</code> on the corresponding host. It would later be referred using <code>hostvars</code></p>
<p>&nbsp;</p>
<table style="height: 140px; width: 100%; border-collapse: collapse; border: 1px solid; border-style: solid;" border="1px" cellpadding="5px">
<tbody>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;"><span style="color: #003366;">testvar | default ({})</span></td>
<td style="width: 50%; height: 28px;"> Declaring a variable named testvar and declaring it as a dictionary. Read more about <a href="https://www.middlewareinventory.com/blog/ansible-dict/">ansible dict here</a></td>
</tr>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;"><span style="color: #003366;">combine ( {</span></td>
<td style="width: 50%; height: 28px;"> Using Combine, we are adding a { key: value } and the <code>inventory_hostname</code> is the key</td>
</tr>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;"><span style="color: #003366;">inventory_hostname :</span></td>
<td style="width: 50%; height: 28px;"> <a href="https://www.middlewareinventory.com/blog/ansible-inventory_hostname-ansible_hostname-variables/">inventory_hostname</a> would be replaced with the actual hostname defined on the inventory.</td>
</tr>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;"><span style="color: #003366;">(ansible_facts.mounts | selectattr(&#8216;fstype&#8217;, &#8216;in&#8217;, [&#8216;nfs4&#8242;,&#8217;nfs&#8217;]) | list</span></td>
<td style="width: 50%; height: 28px;"> <code>ansible_facts.mounts</code> would have the list of mounts and <code>selectattr('fstype','in',['nfs4',nfs])</code> would help on filtering only the nfs mounts.</td>
</tr>
<tr style="height: 28px;">
<td style="width: 50%; height: 28px;"><span style="color: #003366;">sort(attribute=&#8217;mount&#8217;))[-1]</span></td>
<td style="width: 50%; height: 28px;"> sort the output based on the attribute <code>mount</code>  and</p>
<div>
<div><code>[-1]</code> is the same as the <code>last</code> filter to select the last item ( there would be only one)</div>
</div>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>Task 2:  Combining all the individual host EFS data into a Single Dictionary</h3>
<p>In this task we are using ansible <code>map</code> filter and two  built-in variables named <code>ansible_play_hosts</code> and <code>hostvars</code> to extract the variable named <code>testvar</code> we have saved earlier for all the hosts.</p>
<ul>
<li><code>hostvars</code>  is a a dictionary whose keys are Ansible hostnames and values are dicts that map variable names to values</li>
<li><code>ansible_play_hosts</code> A list of all of the inventory hostnames that are active in the current play<code></code></li>
</ul>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml"># to print all messages in single place
- set_fact: 
    data: "{{ ansible_play_hosts | map ('extract', hostvars, 'testvar') }}"
  run_once: yes</pre>
<p>&nbsp;</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h3>Task 3:  Converting the Single Dictionary variable into JSON and create CSV</h3>
<p>While the second task will create a dictionary named <code>data</code> and store all the hostnames and their efs information as <code>key: value</code>  format</p>
<p>We need to convert this to JSON to process it further and to select only the required attributes</p>
<p>For our case, we are only taking the following attributes</p>
<ul>
<li>hostname (  based on the inventory_hostname stored as <code>key</code> )</li>
<li>EFS device name or Full URL</li>
<li>Mount point (  file system path )</li>
</ul>
<p>The outcome CSV would look something like this</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">webserver1,fs-bx239i1.efs.us-east-1.amazonaws.com:/,/var/www/html
webserver2,fs-bx239i1.efs.us-east-1.amazonaws.com:/,/var/www/html
appserver1,fs-ax39g9b9.efs.us-east-1.amazonaws.com:/,/app/workspace
appserver2,fs-ax39g9b9.efs.us-east-1.amazonaws.com:/,/app/workspace
appserver3,fs-ax39g9b9.efs.us-east-1.amazonaws.com:/,/app/workspace</pre>
<p>Once the JSON is created, we are going to use the JSON parser <a href="https://stedolan.github.io/jq/">jq</a> on the control machine for data processing and creating CSV.</p>
<blockquote><p> JQ must be installed on the control machine from where you are executing the playbook ( windows/mac/linux) machine</p></blockquote>
<p>What we are doing here is that we are <code>extracting</code> the variable named <code>testvar</code> we have saved during the task 1 dedicatedly for each host in our hostgroup.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml"># Parse Json and create a CSV using jq
- name: create a CSV file locally on control machine
  local_action:
    module: shell
    args: |
       echo "Hostname,EFS Device,Mountpoint" &gt; efstest.csv
       echo {{ data | to_json | tojson  }} | jq '.[]|to_entries[] | [.key, .value.device, .value.mount] |@csv'|tr -d '\\"' &gt;&gt; efstest.csv
  run_once: yes
</pre>
<p>&nbsp;</p>
<p>All the variables of All the hosts associated with the playbook, would be available in <code>hostvars</code> built in variable</p>
<p>We are using <code>map</code> and <code>extract</code> to get only the <code>testvar</code> variable for the list of hosts in current play.</p>
<p>While it was little confusing at first. I hope you can understand it when you look at it once or twice.</p>
<p>Ansible Maps are little hard to explain and am already writing a dedicated article for ansible map.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p>&nbsp;</p>
<h2>The Result CSV data</h2>
<p>Here is the snippet of what the resulting CSV would look like. you can add more parameters if you want by adding them into the <code>jq</code> filter</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-12.49.20-AM.png"><img class="post-img alignnone wp-image-7104 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-12.49.20-AM.png" alt="" width="1170" height="302" srcset="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-12.49.20-AM.png 1170w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-12.49.20-AM-300x77.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-12.49.20-AM-1024x264.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-12.49.20-AM-768x198.png 768w" sizes="(max-width: 1170px) 100vw, 1170px" /></a></p>
<p>With little <code>Pivot</code> chart you can also come to know the list EC2 instances using the EFS file systems like this</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.34.19-AM.png"><img class="post-img alignleft wp-image-7110 size-medium" src="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.34.19-AM-300x176.png" alt="EFS EC2" width="300" height="176" srcset="https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.34.19-AM-300x176.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.34.19-AM-1024x602.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.34.19-AM-768x451.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2021/07/Screenshot-2021-07-25-at-1.34.19-AM.png 1184w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>You might also like this article on listing the EFS using AWS CLI</p>
<blockquote class="wp-embedded-content" data-secret="olpoqa0T7S"><p><a href="https://www.middlewareinventory.com/blog/aws-cli-list-efs/">AWS CLI List EFS Filesystem sort by Size</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;AWS CLI List EFS Filesystem sort by Size&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/aws-cli-list-efs/embed/#?secret=olpoqa0T7S" data-secret="olpoqa0T7S" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>Hope this article helped you understand various filters like <code>map</code> , <code>to_json</code> etc along with data processing tricks using built in variables like <code>hostvars</code> .</p>
<p>If you have any better way to do this. please share it with us and the world. over the comments section.</p>
<a href="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg"><img class="post-img" src="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg" alt="gritfy" width="1047" height="415" class="alignnone size-full wp-image-6623" /></a>
<p>&nbsp;</p>
<p>Cheers<br />
Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="7082"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/">Find EC2 instances using EFS &#8211; EFS Usage Report</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/collect-efs-ec2-ansible/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Kubernetes Sidecar &#8211; Logging with FluentD to EFK</title>
		<link>https://www.middlewareinventory.com/blog/kubernetes-sidecar-logging-with-fluentd-to-efk/</link>
					<comments>https://www.middlewareinventory.com/blog/kubernetes-sidecar-logging-with-fluentd-to-efk/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Sun, 29 Nov 2020 22:25:08 +0000</pubDate>
				<category><![CDATA[FluentD]]></category>
		<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[fluent bit kubernetes example]]></category>
		<category><![CDATA[kubernetes fluentd]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=5805</guid>

					<description><![CDATA[<p>Introduction Log management in Infrastructure has changed tremendously in recent few years and we are a having wonderful products in the market to manage, parse, analyze log files These tools are being used extensively for incident management, alerting, security analysis and application performance monitoring etc. In the Opensource market, Elastic[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/kubernetes-sidecar-logging-with-fluentd-to-efk/">Kubernetes Sidecar &#8211; Logging with FluentD to EFK</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h2>Introduction</h2>
<p>Log management in Infrastructure has changed tremendously in recent few years and we are a having wonderful products in the market to manage, parse, analyze log files</p>
<p>These tools are being used extensively for incident management, alerting, security analysis and application performance monitoring etc.</p>
<p>In the Opensource market, Elastic Search or <a href="https://www.elastic.co/what-is/elk-stack">ELK Stack </a>is leading and makes it possible for small to medium companies to afford this wonderful log management solutions. while Splunk leads the enterprise market.</p>
<p>If you are not already aware, ELK stack is a combination of three open source projects, Elastic Search, Log Stash and Kibana and they come together to give you a combined log management experience and each one of them has a job to do.</p>
<ul>
<li><strong>Elastic Search</strong> &#8211; Search and Data analytics Engine just like <a href="https://lucene.apache.org/solr/">Apache Solr</a>, <a href="https://lucene.apache.org/">Lucene</a></li>
<li><strong>Log Stash</strong> &#8211; Data processing and ingesting tool sends/stash to Elastic search</li>
<li><strong>Kibana</strong> &#8211; A Visualizing tool for the data stored in Elastic create graphs, alerts etc.</li>
</ul>
<p>Hope this gives you a quick intro to ELK. but we are going to use <strong>EFK</strong>. what is EFK?</p>
<h2>ELK vs EFK</h2>
<p>You know what is ELK already and what is this EFK. It is an acronym of<strong> Elastic FluentD Kibana</strong></p>
<p><img class="n3VNCb alignnone" title="post-img" src="https://www.cncf.io/wp-content/uploads/2020/07/image3.png" alt="Logging in Kubernetes: EFK" width="784" height="176" data-noaft="1" /></p>
<p>If you have not heard/read about <a href="https://www.fluentd.org/">fluentD</a> yet. This is your lucky day.</p>
<p>FluentD is a wonderful Log Collector tool just like Log Stash ( far better than) and it serves as unified logging platform yet Simple</p>
<p>Based on my personal experience. I found Log stash really hard to implement with <strong>GROK</strong> patterns and FluentD saved me. ( I mean it )</p>
<p>There is a lightweight log shipping product from Elastic named <a href="https://www.elastic.co/beats/">Beats</a> as an alternate for LogStash. but it does not meet the efficiency and simplicity of <code>fluentd</code></p>
<p>With no further ado, let us talk about our objective of implementing the Kubernetes FluentD Sidecar container.</p>
<p>&nbsp;</p>
<h2>Our Objective</h2>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-10.38.49-PM.png"><img class="post-img alignnone wp-image-6518 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-10.38.49-PM.png" alt="Elastic Search Kubernetes FluentD Tomcat" width="979" height="585" srcset="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-10.38.49-PM.png 979w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-10.38.49-PM-300x179.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-10.38.49-PM-768x459.png 768w" sizes="(max-width: 979px) 100vw, 979px" /></a></p>
<p>We have a tomcat based web application container to be deployed into Kubernetes.</p>
<p>I would like to collect and ship my tomcat logs and application logs from kubernetes to a remote elastic search server.</p>
<p>we are going to use the <strong>Elastic FluentD Kibana (EFK)</strong> stack using Kubernetes sidecar container strategy.</p>
<blockquote><p><strong>Why Sidecar logging and not K8s Cluster level logging</strong></p>
<p>Not all the containers we deploy to K8s is writing logs to stdout, though it is recommended, It does not suit all requirements</p>
<p>Let&#8217;s say I containerize my Java web app deployed on tomcat writes its own log files like Audit log, Application log etc.</p>
<p>I cannot obviously redirect all of them to the same stream.</p>
<p>Additionally, what if I want these log files to go to different Indexes in my Elastic Search for Monitoring and auditing.</p>
<p>Well, that&#8217;s where Sidecar comes to help.</p></blockquote>
<p>FluentD should have access to the log files written by tomcat and it is being achieved through Kubernetes <strong>Volume</strong> and <strong>volume mounts</strong></p>
<p>FluentD would ship the logs to the remote Elastic search server using the IP and port along with credentials.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2>Steps to deploy fluentD as a Sidecar Container</h2>
<p>To deploy fluentD as a sidecar container on Kubernetes POD. we need to create a few configuration elements like ConfigMap, Volumes, Deployment etc.</p>
<p>We will see all of them in detail one by one.</p>
<h3></h3>
<h3>ConfigMap &#8211; to store fluentd config file</h3>
<p>Our first task is to create a Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/configmap/">ConfigMap</a> object to store the fluentd configuration file. You can store any non-confidential key-value data in ConfigMap object including files.</p>
<p>Here we are creating a ConfigMap named <code>fluentdconf</code> with the key name equivalent to the  resulting filename <code>fluent.conf</code></p>
<p>This ConfigMap with <code>key:value</code> data set would later be mounted into the POD. where the key would be the file name and the value would be stored into the file.</p>
<p>We have defined three major tags (or) root elements in the fluent.conf file</p>
<ul>
<li>Source &#8211; to define the file details to monitor/lookup and to set format to look out for</li>
<li>filter &#8211;  customizing the event collected and overwriting fields (or) adding fields</li>
<li>Match &#8211; to define what to do with the matching data/log events and where to stash.</li>
</ul>
<p>you can write your own format using RUBY Regular Expression (or) use built-in formats like <code>apache2</code> to event filtering.</p>
<p>Under the <code>match</code> root element, we have to define our Elastic Search server details and credentials along with the index name to which we are sending the logs.</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #000000;"><span class="hljs-attr" style="color: #5c2699;">apiVersion:</span> v1
<span class="hljs-attr" style="color: #5c2699;">kind:</span> ConfigMap
<span class="hljs-attr" style="color: #5c2699;">metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">  name:</span> fluentdconf
<span class="hljs-attr" style="color: #5c2699;">  namespace:</span> development
<span class="hljs-attr" style="color: #5c2699;">data:</span>
  fluent.conf: <span class="hljs-string" style="color: #c41a16;">|
      &lt;source&gt;
        @type tail
        time_key time
        format multiline
        format_firstline /^\[[[A-Z]|\s]+\]/
        format1 /^\[(?&lt;LogLevel&gt;[[A-Z]|\s]+)\]\[(?&lt;time&gt;[0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{2}\:[0-9]{2}\:[0-9]{2}\,[0-9]{3})\]\s-\s(?&lt;message&gt;.*+)$/
        path /opt/tomcat/webapps/ROOT/WEB-INF/log/myapp.log
        pos_file /tmp/myapp.log.pos
        tag dev.myapp.applogs
      &lt;/source&gt;

      &lt;filter dev.myapp.applogs&gt;
        @type record_transformer
        &lt;record&gt;
        hostname ${hostname}
        &lt;/record&gt;
      &lt;/filter&gt;

      &lt;match dev.myapp.applogs&gt;
        @type elasticsearch
        host 172.99.1.218
        port 59200
        user elasticusr
        password Pa$$w0rd
        index_name fluentd.${tag}
        logstash_format true
        logstash_prefix dev.myapp.applogs
        flush_interval 1s
      &lt;/match&gt;

      &lt;source&gt;
        @type tail
        path /opt/tomcat/logs/localhost_access_log.%Y-%m-%d.txt
        pos_file /tmp/tomcataccesslog.pos
        tag dev.myapp.tomcatlogs
        format apache2
      &lt;/source&gt;

      &lt;filter dev.myapp.tomcatlogs&gt;
        @type record_transformer
        &lt;record&gt;
        hostname ${hostname}
        &lt;/record&gt;
      &lt;/filter&gt;

      &lt;match dev.myapp.tomcatlogs&gt;
        @type elasticsearch
        host 172.99.1.218
        port 59200
        user elasticusr
        password Pa$$w0rd
        logstash_format true
        logstash_prefix dev.myapp.tomcatlogs
      &lt;/match&gt;
</span></pre>
<p>&nbsp;</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p>&nbsp;</p>
<h3>Creating our Docker Container Images</h3>
<p>As discussed earlier, we are going to have two containers in our POD. <code>Tomcat</code> as a primary container with our application pre-deployed and a sidecar container <code>fluentd</code></p>
<h4><strong>Tomcat Docker file</strong></h4>
<p>this is the Dockerfile content for our tomcat image and it has been discussed in detail in <a href="https://www.middlewareinventory.com/blog/docker-tomcat-example-dockerfile-sample">our previous article here</a></p>
<pre class="EnlighterJSRAW" data-enlighter-language="dockerfile" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">FROM centos

RUN mkdir /opt/tomcat/

WORKDIR /opt/tomcat
RUN curl -O https://downloads.apache.org/tomcat/tomcat-8/v8.5.76/bin/apache-tomcat-8.5.76.tar.gz
RUN tar xvfz apache*.tar.gz
RUN mv apache-tomcat-8.5.76/* /opt/tomcat/.
RUN sed -i -e "s|mirrorlist=|#mirrorlist=|g" /etc/yum.repos.d/CentOS-*; sed -i -e "s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g" /etc/yum.repos.d/CentOS-*
RUN yum -y install java
RUN java -version

WORKDIR /opt/tomcat/webapps
RUN curl -O -L https://github.com/AKSarav/SampleWebApp/raw/master/dist/SampleWebApp.war

EXPOSE 8080

CMD ["/opt/tomcat/bin/catalina.sh", "run"]</pre>
<p>&nbsp;</p>
<p>You can make changes to the image and build it with your desired name like this</p>
<pre>docker build -t tomcat8 .</pre>
<p>If you do not want to make customizations you can pull it locally (or) just use my image name globally <a href="https://hub.docker.com/u/saravak">available from docker hub</a></p>
<pre>docker pull saravak/tomcat8</pre>
<p>&nbsp;</p>
<blockquote><p> <strong>Note*:</strong>  The URL we have used in the Dockerfile to download tomcat often be updated by tomcat or there could be different download url available for different regions across the world.</p>
<p>If you are getting any issues with the link.</p>
<p>Please visit <a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a> to get the latest download URL and update it, in your dockerfile.</p></blockquote>
<p>&nbsp;</p>
<h4><strong>FluentD Docker file</strong></h4>
<p>Content for fluentD container&#8217;s Dockerfile is given below.</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #000000;"><span class="hljs-keyword" style="color: #aa0d91;">FROM</span> ubuntu:<span class="hljs-number" style="color: #1c00cf;">16.04</span> 
<span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash">apt-get update 
</span><span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash"><span class="hljs-built_in" style="color: #5c2699;">ulimit</span> -n 65536 
</span><span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash">apt-get install -y curl 
</span><span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash">curl https://packages.treasuredata.com/GPG-KEY-td-agent | apt-key add -
</span><span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash"><span class="hljs-built_in" style="color: #5c2699;">echo</span> <span class="hljs-string" style="color: #c41a16;">"deb http://packages.treasuredata.com/3/ubuntu/xenial/ xenial contrib"</span> &gt; /etc/apt/sources.list.d/treasure-data. list
</span>
<span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash">apt-get update &amp;&amp; apt-get install -y -q curl make g++ &amp;&amp; apt-get clean &amp;&amp; apt-get install -y td-agent &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 
</span>
<span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash">sed -i <span class="hljs-_">-e</span> <span class="hljs-string" style="color: #c41a16;">"s/USER=td-agent/USER=root/"</span> <span class="hljs-_">-e</span> <span class="hljs-string" style="color: #c41a16;">"s/GROUP=td-agent/GROUP=root/"</span> /etc/init.d/td-agent 
</span>
<span class="hljs-keyword" style="color: #aa0d91;">RUN</span> <span class="bash">/usr/sbin/td-agent-gem install fluent-plugin-aws-elasticsearch-service -v 1.0.0 CMD /usr/sbin/td-agent <span class="hljs-variable" style="color: #666600;">$FLUENTD_ARGS</span></span></pre>
<p>&nbsp;</p>
<p>As said earlier you can build your own docker image out of this file (or) simply use my globally available image <code>saravak/fluentd</code></p>
<p>So before proceeding further, you need to have the docker images ready.</p>
<p>Either your custom-built docker image available in your local (or) you can choose to use my globally available docker images from docker hub</p>
<p>I am going with the global image for this article.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h3>Creating a Kubernetes Deployment Manifest Yaml file</h3>
<p>Our Container images are ready and we can use the images in our Kubernetes Deployment manifest.</p>
<p>Rather than using the POD manifest, Deployment kind has various advantages including the creation of replication controller,  application roll-out, pod replacement etc</p>
<p><code>Deployment</code> is the ideal way to deploy Microservices to Production Kubernetes</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #000000;"><span class="hljs-attr" style="color: #5c2699;">apiVersion:</span> apps/v1
<span class="hljs-attr" style="color: #5c2699;">kind:</span> Deployment
<span class="hljs-attr" style="color: #5c2699;">metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">  name:</span> myapp-dpl
<span class="hljs-attr" style="color: #5c2699;">  namespace:</span> development
<span class="hljs-attr" style="color: #5c2699;">  labels:</span>
<span class="hljs-attr" style="color: #5c2699;">    app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">spec:</span>
<span class="hljs-attr" style="color: #5c2699;">  replicas:</span> <span class="hljs-number" style="color: #1c00cf;">1</span>
<span class="hljs-attr" style="color: #5c2699;">  selector:</span>
<span class="hljs-attr" style="color: #5c2699;">    matchLabels:</span>
<span class="hljs-attr" style="color: #5c2699;">      app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">  template:</span>
<span class="hljs-attr" style="color: #5c2699;">    metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">      labels:</span>
<span class="hljs-attr" style="color: #5c2699;">        environment:</span> DEV
<span class="hljs-attr" style="color: #5c2699;">        managedby:</span> K8s
<span class="hljs-attr" style="color: #5c2699;">        app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">    spec:</span>
<span class="hljs-attr" style="color: #5c2699;">      containers:</span>

      <span class="hljs-comment" style="color: #006a00;"># Primary Container</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> tomcat
<span class="hljs-attr" style="color: #5c2699;">        image:</span>  saravak/tomcat8
<span class="hljs-attr" style="color: #5c2699;">        volumeMounts:</span>
<span class="hljs-attr" style="color: #5c2699;">          - name:</span> applog
<span class="hljs-attr" style="color: #5c2699;">            mountPath:</span> /opt/tomcat/webapps/ROOT/WEB-INF/log/
<span class="hljs-attr" style="color: #5c2699;">          - name:</span> tomcatlog
<span class="hljs-attr" style="color: #5c2699;">            mountPath:</span> /opt/tomcat/logs
<span class="hljs-attr" style="color: #5c2699;">        ports:</span>
<span class="hljs-attr" style="color: #5c2699;">        - containerPort:</span> <span class="hljs-number" style="color: #1c00cf;">8080</span>
<span class="hljs-attr" style="color: #5c2699;">        resources:</span>
<span class="hljs-attr" style="color: #5c2699;">          limits:</span>
<span class="hljs-attr" style="color: #5c2699;">            memory:</span> <span class="hljs-number" style="color: #1c00cf;">1028</span>Mi

      <span class="hljs-comment" style="color: #006a00;"># This is for FluentD Logging Container</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> fluentd
<span class="hljs-attr" style="color: #5c2699;">        env:</span>
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> FLUENT_UID
<span class="hljs-attr" style="color: #5c2699;">          value:</span> root
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> FLUENT_CONF
<span class="hljs-attr" style="color: #5c2699;">          value:</span> fluent.conf
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> FLUENTD_ARGS
<span class="hljs-attr" style="color: #5c2699;">          value:</span> -c /fluentd/etc/fluent.conf
<span class="hljs-attr" style="color: #5c2699;">        image:</span> saravak/fluentd:elastic
<span class="hljs-attr" style="color: #5c2699;">        volumeMounts:</span>
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> applog
<span class="hljs-attr" style="color: #5c2699;">          mountPath:</span> /opt/tomcat/webapps/ROOT/WEB-INF/log/
<span class="hljs-attr" style="color: #5c2699;">        - name:</span>  fdconf
<span class="hljs-attr" style="color: #5c2699;">          mountPath:</span>  /fluentd/etc/

<span class="hljs-attr" style="color: #5c2699;">      volumes:</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> applog
<span class="hljs-attr" style="color: #5c2699;">        emptyDir:</span> {}
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> tomcatlog
<span class="hljs-attr" style="color: #5c2699;">        emptyDir:</span> {}
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> fdconf
<span class="hljs-attr" style="color: #5c2699;">        configMap:</span>
<span class="hljs-attr" style="color: #5c2699;">          name:</span> fluentdconf</pre>
<p>&nbsp;</p>
<p>In the preceding manifest file, we are creating an application named <code>myapp</code> with two containers under the <code>development</code> namespace</p>
<p>The container names are <code>tomcat</code> and <code>fluentd</code> and the latter one is our primary objective here</p>
<p>For fluentd to function properly we need to pass a few values during the container startup such as</p>
<ul>
<li><code>FLUENT_UID</code> &#8211; to define what user the fluent should start</li>
<li><code>FLUENT_CONF</code> &#8211; represents the configuration file name</li>
<li><code>FLUENTD_ARGS</code> &#8211; to define the fully qualified path of the <code>fluent.conf</code> file while starting the fluent with <code>-c</code> flag</li>
</ul>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h3>Volumes and Volume Mounts</h3>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM.png"><img class="post-img alignnone wp-image-6517 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM.png" alt="Kubernetes FluentD Tomcat" width="640" height="427" srcset="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM.png 640w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM-300x200.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM-120x80.png 120w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM-360x240.png 360w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM-600x400.png 600w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-29-at-9.58.46-PM-480x320.png 480w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
<p>Another important item in our deployment manifest YAML file is <code>volumes</code>  and<code>Volume_mounts</code></p>
<p>you can notice that we are creating three volumes named <code>applog</code>, <code>tomcatlog</code> and <code>fdconf</code></p>
<ul>
<li><code>applog</code> &#8211; an empty Directory volume to share the application logs directory between Tomcat and FluentD</li>
<li><code>tomcatlog</code> &#8211; an empty Directory volume to share the tomcat logs directory between Tomcat and fluentD</li>
<li><code>configMap</code> &#8211; ConfigMap type of volume to inject config data into the POD. in our case it is a file content stored in configMap</li>
</ul>
<p>These volumes would be mounted with the help of <code>volumeMounts</code> within the containers Tomcat and FluentD.</p>
<p>When the volume is being mounted. It can be mounted to any physical location/path. This is similar to the Unix mounts.</p>
<p>Just to keep things clean I am using the same path on both containers. but it is not necessary.</p>
<p>the <code>applog</code> and <code>tomcatlogs</code> volumes should be mounted to the location specified in the <code>fluent.conf</code> file and it should match.</p>
<h3></h3>
<h3>Deploying our YAML for Kubernetes FluentD Sidecar setup</h3>
<p>So far we have seen how Kubernetes FluentD sidecar container is setup and the necessary elements like ConfigMap, Volume etc</p>
<p>Here I have collected all these codes and compiled as a single file with one addition.</p>
<p>Just to make my application available externally and to expose it, I have added a <code>service</code> to my final YAML file and I can deploy it right now to Kubernetes cluster</p>
<p>This is the complete file with <strong>ConfigMap + Service + Deployment</strong></p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #000000;"><span class="hljs-attr" style="color: #5c2699;">---
apiVersion:</span> v1
<span class="hljs-attr" style="color: #5c2699;">kind:</span> ConfigMap
<span class="hljs-attr" style="color: #5c2699;">metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">  name:</span> fluentdconf
<span class="hljs-attr" style="color: #5c2699;">  namespace:</span> development
<span class="hljs-attr" style="color: #5c2699;">data:</span>
  fluent.conf: <span class="hljs-string" style="color: #c41a16;">|
      &lt;source&gt;
        @type tail
        time_key time
        format multiline
        format_firstline /^\[[[A-Z]|\s]+\]/
        format1 /^\[(?&lt;LogLevel&gt;[[A-Z]|\s]+)\]\[(?&lt;time&gt;[0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{2}\:[0-9]{2}\:[0-9]{2}\,[0-9]{3})\]\s-\s(?&lt;message&gt;.*+)$/
        path /opt/tomcat/webapps/ROOT/WEB-INF/log/myapp.log
        pos_file /tmp/myapp.log.pos
        tag dev.myapp.applogs
      &lt;/source&gt;

      &lt;filter dev.myapp.applogs&gt;
        @type record_transformer
        &lt;record&gt;
        hostname ${hostname}
        &lt;/record&gt;
      &lt;/filter&gt;

      &lt;match dev.myapp.applogs&gt;
        @type elasticsearch
        host 172.99.1.218
        port 59200
        user elasticusr
        password Pa$$w0rd
        index_name fluentd.${tag}
        logstash_format true
        logstash_prefix dev.myapp.applogs
        flush_interval 1s
      &lt;/match&gt;

      &lt;source&gt;
        @type tail
        path /opt/tomcat/logs/localhost_access_log.%Y-%m-%d.txt
        pos_file /tmp/tomcataccesslog.pos
        tag dev.myapp.tomcatlogs
        format apache2
      &lt;/source&gt;

      &lt;filter dev.myapp.tomcatlogs&gt;
        @type record_transformer
        &lt;record&gt;
        hostname ${hostname}
        &lt;/record&gt;
      &lt;/filter&gt;

      &lt;match dev.myapp.tomcatlogs&gt;
        @type elasticsearch
        host 172.99.1.218
        port 59200
        user elasticusr
        password Pa$$w0rd
        logstash_format true
        logstash_prefix dev.myapp.tomcatlogs
      &lt;/match&gt;

---
</span><span class="hljs-attr" style="color: #5c2699;">kind:</span> Service
<span class="hljs-attr" style="color: #5c2699;">apiVersion:</span> v1
<span class="hljs-attr" style="color: #5c2699;">metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">  name:</span>  myapp-svc
<span class="hljs-attr" style="color: #5c2699;">  namespace:</span> development
<span class="hljs-attr" style="color: #5c2699;">  labels:</span>
<span class="hljs-attr" style="color: #5c2699;">    app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">spec:</span>
<span class="hljs-attr" style="color: #5c2699;">  selector:</span>
<span class="hljs-attr" style="color: #5c2699;">    app:</span>  myapp
<span class="hljs-attr" style="color: #5c2699;">  type:</span> NodePort
<span class="hljs-attr" style="color: #5c2699;">  ports:</span>
<span class="hljs-attr" style="color: #5c2699;">  - port:</span>  <span class="hljs-number" style="color: #1c00cf;">80</span>
<span class="hljs-attr" style="color: #5c2699;">    targetPort:</span>  <span class="hljs-number" style="color: #1c00cf;">8080</span>
<span class="hljs-meta" style="color: #1c00cf;">
---</span>
<span class="hljs-attr" style="color: #5c2699;">apiVersion:</span> apps/v1
<span class="hljs-attr" style="color: #5c2699;">kind:</span> Deployment
<span class="hljs-attr" style="color: #5c2699;">metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">  name:</span> myapp-dpl
<span class="hljs-attr" style="color: #5c2699;">  namespace:</span> development
<span class="hljs-attr" style="color: #5c2699;">  labels:</span>
<span class="hljs-attr" style="color: #5c2699;">    app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">spec:</span>
<span class="hljs-attr" style="color: #5c2699;">  replicas:</span> <span class="hljs-number" style="color: #1c00cf;">1</span>
<span class="hljs-attr" style="color: #5c2699;">  selector:</span>
<span class="hljs-attr" style="color: #5c2699;">    matchLabels:</span>
<span class="hljs-attr" style="color: #5c2699;">      app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">  template:</span>
<span class="hljs-attr" style="color: #5c2699;">    metadata:</span>
<span class="hljs-attr" style="color: #5c2699;">      labels:</span>
<span class="hljs-attr" style="color: #5c2699;">        environment:</span> DEV
<span class="hljs-attr" style="color: #5c2699;">        managedby:</span> K8s
<span class="hljs-attr" style="color: #5c2699;">        app:</span> myapp
<span class="hljs-attr" style="color: #5c2699;">    spec:</span>
<span class="hljs-attr" style="color: #5c2699;">      containers:</span>

      <span class="hljs-comment" style="color: #006a00;"># Primary Container</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> tomcat
<span class="hljs-attr" style="color: #5c2699;">        image:</span>  saravak/tomcat8
<span class="hljs-attr" style="color: #5c2699;">        volumeMounts:</span>
<span class="hljs-attr" style="color: #5c2699;">          - name:</span> applog
<span class="hljs-attr" style="color: #5c2699;">            mountPath:</span> /opt/tomcat/webapps/ROOT/WEB-INF/log/
<span class="hljs-attr" style="color: #5c2699;">          - name:</span> tomcatlog
<span class="hljs-attr" style="color: #5c2699;">            mountPath:</span> /opt/tomcat/logs
<span class="hljs-attr" style="color: #5c2699;">        ports:</span>
<span class="hljs-attr" style="color: #5c2699;">        - containerPort:</span> <span class="hljs-number" style="color: #1c00cf;">8080</span>
<span class="hljs-attr" style="color: #5c2699;">        resources:</span>
<span class="hljs-attr" style="color: #5c2699;">          limits:</span>
<span class="hljs-attr" style="color: #5c2699;">            memory:</span> <span class="hljs-number" style="color: #1c00cf;">1028</span>Mi

      <span class="hljs-comment" style="color: #006a00;"># This is for FluentD Logging Container</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> fluentd
<span class="hljs-attr" style="color: #5c2699;">        env:</span>
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> FLUENT_UID
<span class="hljs-attr" style="color: #5c2699;">          value:</span> root
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> FLUENT_CONF
<span class="hljs-attr" style="color: #5c2699;">          value:</span> fluent.conf
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> FLUENTD_ARGS
<span class="hljs-attr" style="color: #5c2699;">          value:</span> -c /fluentd/etc/fluent.conf
<span class="hljs-attr" style="color: #5c2699;">        image:</span> saravak/fluentd:elastic
<span class="hljs-attr" style="color: #5c2699;">        volumeMounts:</span>
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> applog
<span class="hljs-attr" style="color: #5c2699;">          mountPath:</span> /opt/tomcat/webapps/ROOT/WEB-INF/log/
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> tomcatlog
<span class="hljs-attr" style="color: #5c2699;">          mountPath:</span> /opt/tomcat/logs
<span class="hljs-attr" style="color: #5c2699;">        - name:</span>  fdconf
<span class="hljs-attr" style="color: #5c2699;">          mountPath:</span>  /fluentd/etc/

      <span class="hljs-comment" style="color: #006a00;"># Logrotating containers:</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> LogRotate
<span class="hljs-attr" style="color: #5c2699;">        image:</span> saravak/logrotatek8s
<span class="hljs-attr" style="color: #5c2699;">        volumeMounts:</span>
<span class="hljs-attr" style="color: #5c2699;">        - name:</span> tomcatlog
<span class="hljs-attr" style="color: #5c2699;">          mountPath:</span> /logs/

<span class="hljs-attr" style="color: #5c2699;">      volumes:</span>
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> applog
<span class="hljs-attr" style="color: #5c2699;">        emptyDir:</span> {}
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> tomcatlog
<span class="hljs-attr" style="color: #5c2699;">        emptyDir:</span> {}
<span class="hljs-attr" style="color: #5c2699;">      - name:</span> fdconf
<span class="hljs-attr" style="color: #5c2699;">        configMap:</span>
<span class="hljs-attr" style="color: #5c2699;">          name:</span> fluentdconf</pre>
<p>I save this entire configuration file as <code>myapp-deployment.yml</code> and creating a deployment using kubectl</p>
<pre>kubectl create -f myapp-deployment.yml</pre>
<p>You can also use</p>
<pre>kubectl apply -f myapp-deployment.yml</pre>
<p>&nbsp;</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h3>Validating Kubernetes FluentD and Tomcat Containers in POD</h3>
<p>After creating the deployment. Once you get the message &#8220;deployment created&#8221; in your terminal.</p>
<p>You can give it a few seconds for the POD to get created and check if the pod is ready</p>
<p><span style="color: #000080;"><strong>Check if the pod is created and running with 2 containers</strong></span></p>
<pre># kubectl get podsNAME                       READY STATUS  RESTARTS AGE
myapp-dpl-5f5bf998c7-m4p79 2/2   Running 0        128d</pre>
<p>you can see the status is <code>Running</code> and both fluentd and tomcat containers are ready</p>
<p>If you see anything other than <code>2/2</code> it means an issue with container startup. One of the containers might have failed.</p>
<p>&nbsp;</p>
<p><span style="color: #000080;"><strong>Container wise status<br />
</strong></span></p>
<p>If you have <code>jq</code> installed in your terminal. you can parse the kubectl output and display a container-wise status like this along with their name.</p>
<pre><code id="&quot;precode">✗ kubectl get pods myapp-dpl-5f5bf998c7-m4p79 -o json|jq '.status.containerStatuses[] |{Name: .name, Status: .state} '
{
  "Name": "fluentd",
  "Status": {
    "running": {
      "startedAt": "2020-11-16T18:44:40Z"
    }
  }
}
{
  "Name": "tomcat",
  "Status": {
    "running": {
      "startedAt": "2020-11-16T18:44:40Z"
    }
  }
}</code></pre>
<p>&nbsp;</p>
<p><span style="color: #003366;"><strong>Describe pod to know more information</strong></span></p>
<p>If you need to more information about your POD like the volume names and the volume mount names etc</p>
<p>you can use the following command</p>
<pre><code>kubectl describe <code id="&quot;precode">myapp-dpl-5f5bf998c7-m4p79</code></code></pre>
<p>&nbsp;</p>
<p><strong><span style="color: #003366;">Check the logs of Kubernetes fluentD container for any Error</span><br />
</strong></p>
<p>Just to make sure there are no connectivity issues and FluentD is able to connect to the Elastic Search server at the remote.</p>
<p>We need to check the logs of fluentd container running inside the pod</p>
<pre><code>kubectl logs <code id="&quot;precode">myapp-dpl-5f5bf998c7-m4p79 fluentd</code></code></pre>
<p>Since there are two containers in the POD, you have to explicitely mention the pod name after the POD name.</p>
<p>&nbsp;</p>
<h3>Validating the arrival of the logs at Elastic</h3>
<p>Now you can log in to Kibana dashboard and validate if you are able to see the logs coming in</p>
<p>The hostname on each event would match your POD name</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM.png"><img class="post-img alignnone wp-image-6521 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM.png" alt="Kubernetes FluentD Sidecar" width="1920" height="659" srcset="https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM.png 1920w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM-300x103.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM-1024x351.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM-768x264.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2020/11/Screenshot-2020-11-30-at-2.11.09-AM-1536x527.png 1536w" sizes="(max-width: 1920px) 100vw, 1920px" /></a></p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>Hope this article helps you to understand a few concepts like Sidecar container and our primary objective of collecting and shipping the logs to Elastic Search has also been achieved.</p>
<p>Kubernetes FluentD &#8211; EFK logging is really efficient and microservices ready and this would be helpful in various other microservice setups as well.</p>
<p>If you have any questions or tips to make this article better. Please feel free to let me know in comments</p>
<a href="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg"><img class="post-img" src="https://www.middlewareinventory.com/wp-content/uploads/2021/09/DaaS.svg" alt="gritfy" width="1047" height="415" class="alignnone size-full wp-image-6623" /></a>
<p>&nbsp;</p>
<p>Cheers<br />
Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="5805"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/kubernetes-sidecar-logging-with-fluentd-to-efk/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/kubernetes-sidecar-logging-with-fluentd-to-efk/">Kubernetes Sidecar &#8211; Logging with FluentD to EFK</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/kubernetes-sidecar-logging-with-fluentd-to-efk/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ansible Dictionary &#8211; How to create and add items to dict</title>
		<link>https://www.middlewareinventory.com/blog/ansible-dict/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-dict/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Sun, 13 Sep 2020 23:46:56 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=5703</guid>

					<description><![CDATA[<p>Introduction In this post, we are going to see how to create a dictionary in ansible during the playbook execution dynamically and how to add items or elements to a dictionary. Before going further, let us refresh our memory of knowledge on the dictionaries. Especially python dictionaries because Ansible is[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-dict/">Ansible Dictionary &#8211; How to create and add items to dict</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h2>Introduction</h2>
<p>In this post, we are going to see how to create a dictionary in ansible during the playbook execution dynamically and how to add items or elements to a dictionary.</p>
<p>Before going further, let us refresh our memory of knowledge on the dictionaries. Especially python dictionaries because Ansible is pythonic and the word dictionary was introduced in python. in Perl, it used to be called as hash</p>
<p>Dictionaries are a collection of  <code>key: value</code> data sets. changeable, indexed and unordered.</p>
<p>the difference between a list(array) and a dictionary is in the dictionary every value has a name(key) and not indexed by their positional values like 0,1,2 etc</p>
<p>Hope the following picture would give a quick idea about the dictionaries.</p>
<figure id="attachment_5715" aria-describedby="caption-attachment-5715" style="width: 371px" class="wp-caption alignnone"><a href="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Dictionary-Key-Value-Pairs-Illustration.png"><img class="wp-image-5715 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Dictionary-Key-Value-Pairs-Illustration.png" alt="" width="371" height="293" srcset="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Dictionary-Key-Value-Pairs-Illustration.png 371w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Dictionary-Key-Value-Pairs-Illustration-300x237.png 300w" sizes="(max-width: 371px) 100vw, 371px" /></a><figcaption id="caption-attachment-5715" class="wp-caption-text">Image credits to learn by example</figcaption></figure>
<p>I am sure, if you are here then you must have an idea about dictionaries anyway. So let&#8217;s proceed.</p>
<p>&nbsp;</p>
<h2>How to Create Dictionaries in Ansible</h2>
<p>There are multiple ways to create a dictionary in ansible and we would be seeing all of them with examples.</p>
<h3>Creating a Dictionary under <code>vars</code> section in Ansible</h3>
<p>You can declare and create a dictionary using the normal variable declaration methodology of Ansible. you can place your dictionary variable under the <code>vars</code> segment of your playbook like this</p>
<p>In the following playbook, you can see that we have created a dictionary named <code>mydict</code> and stored some key-value data and displaying it using the debug statement</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;"><span class="hljs-meta" style="color: #4c81c9;">---</span>
<span class="hljs-attr">- name:</span> Dictionary playbook example
<span class="hljs-attr">  hosts:</span> localhost
<span class="hljs-attr">  vars:</span> 
<span class="hljs-attr">    - <span style="color: #993366;">mydict:</span></span> {
<span class="hljs-attr">               'Name':</span> <span class="hljs-string" style="color: #0048ab;">'Sarav'</span>, 
<span class="hljs-attr">               'Email':</span> <span class="hljs-string" style="color: #0048ab;">'aksarav.middlewareinventory.com'</span>, 
<span class="hljs-attr">               'location':</span> <span class="hljs-string" style="color: #0048ab;">'chennai'</span>
               }
<span class="hljs-attr">  tasks:</span>
<span class="hljs-attr">    - name:</span> Display the Dictionary 
<span class="hljs-attr">      debug:</span> var=mydict</pre>
<p>execution result of this playbook would be  as follows</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;">➜  ansible-playbook Dict.yml

PLAY [Dictionary playbook example] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
ok: [localhost]

TASK [Display the Dictionary] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
ok: [localhost] =&gt; {
<span class="hljs-code">    "mydict": {</span>
<span class="hljs-code">        "Email": "aksarav.middlewareinventory.com",</span>
<span class="hljs-code">        "Name": "Sarav",</span>
<span class="hljs-code">        "location": "chennai"</span>
<span class="hljs-code">    }</span>
}

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</pre>
<p>&nbsp;</p>
<p>you can create an <strong>empty dictionary</strong> as well by not adding any values inside the parenthesis during the declaration like this.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
  - name: Dictionary playbook example
    hosts: localhost
    vars: 
    # Dictionary with some values
      - mydict: {
                'Name': 'Sarav', 
                'Email': 'aksarav.middlewareinventory.com', 
                'location': 'chennai'
                }
    #Empty Dictionary
      - mydict2: {} 
    tasks:
      - name: Display the Dictionary 
        debug: var=mydict2</pre>
<p>&nbsp;</p>
<h3>Creating a Dictionary in Ansible using the <code>default</code> function</h3>
<p>You can also create a dictionary within the task itself and define some variable as a dictionary by default, the default value kicks in when there was no previous declaration for the same variable.</p>
<p>For example. If the variable has not been declared earlier using the <code>vars</code> method, you can directly set them as a dictionary by default. you can define some value to it by default using the <code>default</code></p>
<p>This is much more helpful while creating variables in a dynamic manner. To declare the variable within the task we use <code>set_fact</code> module.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Dictionary playbook example
  hosts: localhost
  tasks:
    - name: Creating a Dictionary in a Task 
      set_fact: 
        # Dictionary with some value
        mydict2: "{{ mydict2 | default({ 'Name': 'Sarav'})}}"
        # Empty Dictionary
        mydict: "{{ mydict | default({})}}"
    - name: Display the Dictionaries
      debug: var="{{item}}"
      loop:
        - 'mydict2'
        - 'mydict'</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>this playbook would return the following result upon execution</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;">➜  ansible-playbook Dict.yml

PLAY [Dictionary playbook example] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [localhost]

TASK [Creating a Dictionary in a Task] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>*
ok: [localhost]

TASK [Display the Dictionaries] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
ok: [localhost] =&gt; (item=mydict2) =&gt; {
<span class="hljs-code">    "ansible_loop_var": "item",</span>
<span class="hljs-code">    "item": "mydict2",</span>
<span style="color: #800000;"><span class="hljs-code">    "mydict2": {</span>
<span class="hljs-code">        "Name": "Sarav"</span>
<span class="hljs-code">    }</span></span>
}
ok: [localhost] =&gt; (item=mydict) =&gt; {
<span class="hljs-code">    "ansible_loop_var": "item",</span>
<span class="hljs-code">    "item": "mydict",</span>
<span class="hljs-code" style="color: #800000;">    "mydict": {}</span>
}

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</pre>
<p>&nbsp;</p>
<h2>How to Append or Add items into Ansible Dictionary</h2>
<p>In this segment, we are going to see how to append or add items into Ansible dictionary and how to create a list of dictionaries (or) List with nested dictionaries.</p>
<p>We have seen how to declare dictionaries in python so far and now we are going to see how to add new items (or) a key, value dataset into an existing ansible dictionary.</p>
<p>One way to add/append elements is during the declaration time which we have seen in the last two examples. in this section, we are going to see how to add or append new elements into dictionaries dynamically at runtime</p>
<p>In the following playbook example, we are going to create a dictionary named userdata using the default filter and adding elements to it using the <code>combine</code> filter</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;"><span class="hljs-meta" style="color: #4c81c9;">---</span>
<span class="hljs-attr">- name:</span> Dictionary playbook example
<span class="hljs-attr">  hosts:</span> localhost
<span class="hljs-attr">  tasks:</span>

<span class="hljs-attr">    - name:</span> Create and Add items to dictionary
<span class="hljs-attr">      set_fact:</span> 
<span class="hljs-attr">          userdata:</span> <span class="hljs-string" style="color: #0048ab;">"<span class="hljs-template-variable" style="color: #4c81c9;">{{ userdata | default({}) | <span style="color: #800000;">combine ({ item.key : item.value })</span> }}</span>"</span>
<span class="hljs-attr">      with_items:</span>
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'key'</span>: <span class="hljs-string" style="color: #0048ab;">'Name'</span> , <span class="hljs-string" style="color: #0048ab;">'value'</span>: <span class="hljs-string" style="color: #0048ab;">'SaravAK'</span>}
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'key'</span>: <span class="hljs-string" style="color: #0048ab;">'Email'</span> , <span class="hljs-string" style="color: #0048ab;">'value'</span>: <span class="hljs-string" style="color: #0048ab;">'sarav@gritfy.com'</span>}
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'key'</span>: <span class="hljs-string" style="color: #0048ab;">'Location'</span> , <span class="hljs-string" style="color: #0048ab;">'value'</span>: <span class="hljs-string" style="color: #0048ab;">'Coimbatore'</span>}
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'key'</span>: <span class="hljs-string" style="color: #0048ab;">'Nationality'</span> , <span class="hljs-string" style="color: #0048ab;">'value'</span>: <span class="hljs-string" style="color: #0048ab;">'Indian'</span>}

<span class="hljs-attr">    -  name:</span> Display the Dictionary
<span class="hljs-attr">       debug:</span> var=userdata</pre>
<p>So we have a list of items (datasets) with key and value stored in our playbook and we are iterating one by one and referring them as <code>item.key</code> and <code>item.value</code> and adding one by one using the <code>combine</code> filter</p>
<p>at runtime, the items would be appended into the <code>userdata</code> dictionary and we are displaying it using the debug module. Here is the execution result of this playbook</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-7.50.12-AM.png"><img class="alignnone size-full wp-image-5716" src="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-7.50.12-AM.png" alt="Ansible Dictionary" width="2136" height="1924" srcset="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-7.50.12-AM.png 2136w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-7.50.12-AM-300x270.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-7.50.12-AM-768x692.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-7.50.12-AM-1024x922.png 1024w" sizes="(max-width: 2136px) 100vw, 2136px" /></a><br />
One more best example of this dynamic dictionary creation is in our other article, where JSON data gets processed and created as a phonebook using ansible dictionary. <a href="https://www.middlewareinventory.com/blog/ansible_json_query/#Example4_Parse_json_query_result_in_a_loop_and_access_it_as_variable">Refer the article</a></p>
<p>Here is the playbook for your quick reference</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;"><span class="hljs-meta" style="color: #4c81c9;">---</span>
<span class="hljs-attr"> - name:</span> JsonQuery Playbook
<span class="hljs-attr">   hosts:</span> localhost
<span class="hljs-attr">   tasks:</span>
<span class="hljs-attr">     - name:</span> Download JSON content play
<span class="hljs-attr">       uri:</span>
<span class="hljs-attr">         url:</span> https://jsonplaceholder.typicode.com/users
<span class="hljs-attr">         return_content:</span> <span class="hljs-literal" style="color: #0048ab;">yes</span>
<span class="hljs-attr">       register:</span> jsoncontent

<span class="hljs-attr">     - name:</span> Collecting UserName and Mobile Number info
<span class="hljs-attr">       no_log:</span> <span class="hljs-literal" style="color: #0048ab;">True</span>
<span class="hljs-attr">       set_fact:</span>
<span class="hljs-attr">         phonebook:</span> <span class="hljs-string" style="color: #0048ab;">"<span class="hljs-template-variable" style="color: #4c81c9;">{{phonebook|default({}) | <span style="color: #800000;">combine ( {item.name : item.phone})</span> }}</span>"</span>
<span class="hljs-attr">       with_items:</span> <span class="hljs-string" style="color: #0048ab;">"<span class="hljs-template-variable" style="color: #4c81c9;">{{ jsoncontent.json | json_query('[*]')}}</span>"</span>

<span class="hljs-attr">     - name:</span> The Phonebook
<span class="hljs-attr">       debug:</span> var=phonebook</pre>
<p>&nbsp;</p>
<h2>How to create List of Dictionaries in Ansible</h2>
<p>In this segment, we are going to see how to create a List of dictionaries. To put it in other words, a list with dictionaries in it.</p>
<p>The following diagram depicts the structure of an idle List of dictionaries.  We have a list of three dictionaries stored inside an array or list.</p>
<p>&nbsp;</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-3.36.31-PM.png"><img class="alignnone size-full wp-image-5718" src="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-3.36.31-PM.png" alt="Ansible List of Dictionaries" width="1672" height="742" srcset="https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-3.36.31-PM.png 1672w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-3.36.31-PM-300x133.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-3.36.31-PM-768x341.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2020/09/Screenshot-2020-09-11-at-3.36.31-PM-1024x454.png 1024w" sizes="(max-width: 1672px) 100vw, 1672px" /></a></p>
<p>Let us see how to create this data structure, List of dictionary with Ansible</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;"><span class="hljs-meta" style="color: #4c81c9;">---</span>
<span class="hljs-attr">- name:</span> Dictionary playbook example
<span class="hljs-attr">  hosts:</span> localhost
<span class="hljs-attr">  tasks:</span>
<span class="hljs-attr">    - name:</span> Create and Add items to dictionary
<span class="hljs-attr">      set_fact:</span> 
<span class="hljs-attr">          userdata:</span> <span class="hljs-string" style="color: #0048ab;">"<span class="hljs-template-variable" style="color: #4c81c9;">{{ userdata | default(<span style="color: #000000;">[]</span>) + <span style="color: #000000;">[</span><span style="color: #800000;">{ 'Name' : item.Name, 'Email' : item.Email, 'Location' : item.Location }</span><span style="color: #000000;"><strong>]</strong></span> }}</span>"</span>
<span class="hljs-attr">      with_items:</span>
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'Name'</span>: <span class="hljs-string" style="color: #0048ab;">'Sarav'</span> , <span class="hljs-string" style="color: #0048ab;">'Email'</span>: <span class="hljs-string" style="color: #0048ab;">'sarav@gritfy.com'</span>, <span class="hljs-string" style="color: #0048ab;">'Location'</span>: <span class="hljs-string" style="color: #0048ab;">'Chennai'</span>}
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'Name'</span>: <span class="hljs-string" style="color: #0048ab;">'Richa'</span> , <span class="hljs-string" style="color: #0048ab;">'Email'</span>: <span class="hljs-string" style="color: #0048ab;">'richa@gritfy.com'</span>, <span class="hljs-string" style="color: #0048ab;">'Location'</span>: <span class="hljs-string" style="color: #0048ab;">'Chennai'</span>}
<span class="hljs-bullet" style="color: #4c81c9;">        -</span> { <span class="hljs-string" style="color: #0048ab;">'Name'</span>: <span class="hljs-string" style="color: #0048ab;">'Hanu'</span> , <span class="hljs-string" style="color: #0048ab;">'Email'</span>: <span class="hljs-string" style="color: #0048ab;">'hanu@gritfy.com'</span>, <span class="hljs-string" style="color: #0048ab;">'Location'</span>: <span class="hljs-string" style="color: #0048ab;">'Hyderabad'</span>}

<span class="hljs-attr">    -  name:</span> Display the Dictionary
<span class="hljs-attr">       debug:</span> var=userdata</pre>
<p>in this playbook, we are creating a variable named <code>userdata</code> and declaring it as a list (array) and adding each dictionary (key-value datasets) we have stored inside <code>with_items</code></p>
<p>Like the previous example, we do not need any functions like <code>combine</code> to add a new element to list (or) array, this can be simply done with the <code>+</code> plus sign</p>
<p>&nbsp;</p>
<h2>Working with Ansible Dictionaries &#8211; Examples</h2>
<p>I have written various articles on how to process and iterate and filter ansible dictionaries.  We have given the hyperlinks here for you to read further.</p>
<ol>
<li>
<h3><a href="https://www.middlewareinventory.com/blog/ansible-facts-list-how-to-use-ansible-facts/#How_to_Parse_through_the_Dictionary_variable_in_a_loop"><span style="font-size: 14pt;">How to process (or) iterate through the ansible dictionary</span></a></h3>
</li>
<li>
<h3><span style="font-size: 14pt;"><a href="https://www.middlewareinventory.com/blog/terraform-import-securitygroup-aws/">A real-time example of a complex Nested List and Dictionaries of Ansible</a></span></h3>
</li>
<li>
<h3><span style="font-size: 14pt;"><a href="https://www.middlewareinventory.com/blog/ansible_json_query/">A JSON data processing with Dictionary techniques and Json_query ansible</a></span></h3>
</li>
<li>
<h3><span style="font-size: 14pt;"><a href="https://www.middlewareinventory.com/blog/ansible-dict-object-has-no-attribute-stdout-or-stderr-how-to-resolve/">How to handle Data processing Errors with Ansible, Dict Object</a></span></h3>
</li>
<li>
<h3><span style="font-size: 14pt;"><a href="https://www.middlewareinventory.com/blog/ansible-selectattr-example/">How to Filter and Select elements from Dictionary using Ansible select_attr</a></span></h3>
</li>
<li>
<h3><span style="font-size: 14pt;"><a href="https://www.middlewareinventory.com/blog/ansible-map/">Ansible Map Examples &#8211; Filter List and Dictionaries</a></span></h3>
</li>
</ol>
<p>&nbsp;</p>
<h2>How to work with Ansible List &#8211; Create List, Append items</h2>
<p>So far we have talked about Ansible Dictionary.  The other famous datatype is Ansible List and you might use both of them together often.</p>
<p>I have written an article on Ansible List too. Check it out.</p>
<blockquote class="wp-embedded-content" data-secret="J4Vhi0kDfi"><p><a href="https://www.middlewareinventory.com/blog/ansible-list-examples-how-to-create-and-append-items-to-list/">Ansible List Examples &#8211; How to create and append items to List</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;Ansible List Examples &#8211; How to create and append items to List&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/ansible-list-examples-how-to-create-and-append-items-to-list/embed/#?secret=J4Vhi0kDfi" data-secret="J4Vhi0kDfi" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Cheers<br />
Rumen Lishkov சரவணன் அ.க</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="5703"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/ansible-dict/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-dict/">Ansible Dictionary &#8211; How to create and add items to dict</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-dict/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ansible Git Example &#8211; Checkout code from Git Repo Securely</title>
		<link>https://www.middlewareinventory.com/blog/ansible-git-example/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-git-example/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Sat, 05 Oct 2019 11:33:11 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<category><![CDATA[Ansible Git Example]]></category>
		<category><![CDATA[Ansible Git example playbook]]></category>
		<category><![CDATA[Ansible Git private repo]]></category>
		<category><![CDATA[Ansible login to Github]]></category>
		<category><![CDATA[ansible playbook with Git]]></category>
		<category><![CDATA[Ansible Vault example]]></category>
		<category><![CDATA[Ansible Vault with Github Example]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=4226</guid>

					<description><![CDATA[<p>Introduction Ansible works seamlessly with Git and you might have had a requirement to download your source code or software directly from the Github, Bitbucket, Gitlab etc. In this post, we are going to explore various tits and bits of Ansible Git module and how to use it in real-time[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-git-example/">Ansible Git Example &#8211; Checkout code from Git Repo Securely</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h2>Introduction</h2>
<p>Ansible works seamlessly with Git and you might have had a requirement to download your source code or software directly from the Github, Bitbucket, Gitlab etc.</p>
<p>In this post, we are going to explore various tits and bits of Ansible Git module and how to use it in real-time with an example.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.04.13-PM.png"><img class="alignnone size-full wp-image-4241" src="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.04.13-PM.png" alt="Ansible Git Example" width="775" height="605" srcset="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.04.13-PM.png 775w, https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.04.13-PM-300x234.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.04.13-PM-768x600.png 768w" sizes="(max-width: 775px) 100vw, 775px" /></a></p>
<h2>Ansible Git Module</h2>
<p>Ansible Git module can be used only to check out a Source code from the Git repository and deploy it on the server.</p>
<p>Consider that you have your Node JS web application hosted on the Git hub Repository and you would like to get it deployed during the server provisioning.</p>
<p>Ansible can do everything here, right from installing the necessary tools and software and installing the package dependencies and starting the NodeJS server etc.</p>
<p>As a summary, the Ansible GIT module can be used for the following purposes</p>
<ol>
<li>To Checkout or to download the code from the Git repository</li>
<li>Create a Git archive from Git repo</li>
<li>Fetch all pull requests</li>
<li>Clone a Git repository</li>
</ol>
<p>Once you have downloaded or checked out the code with the ansible git command, you can use the regular git commands for all other requirements like <code>Push</code> and <code>pull</code></p>
<p>&nbsp;</p>
<h2>Our Requirement and Prerequisites</h2>
<p>Our requirement is to download a NodeJS code from the <strong>Github</strong> <strong>private</strong> repository and install the necessary packages using <code>npm install</code> and start the NodeJS Development  server using the <code>node</code> command</p>
<p>Since we are going to download the code from the private repository. we need to find a way to login to the Github repository from the Git CLI.</p>
<blockquote><p>Note*: Though, we are taking only GITHUB here.  you can use this article as a reference for other SCM&#8217;s like Gitlab, Bitbucket, BeanStalkApp etc. As all these repositories are having the similar authentication features.</p></blockquote>
<h3>Step1: Configuring Git login</h3>
<p>To login to GITHUB or to any SCM tools [ bit bucket, gitlab] they usually provide different methods and some popular methods are given below.</p>
<ol>
<li><a href="https://help.github.com/en/enterprise/2.15/user/articles/adding-a-new-ssh-key-to-your-github-account">Using the SSH key </a></li>
<li>Using the username and password on the URL
<ul>
<li><code><code>https://</code></code><strong>user:pass</strong><code>@github.com/path</code></li>
</ul>
</li>
<li><a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">Using the username and security token on the URL</a>
<ul>
<li><code><code>https://</code></code><strong>user:token</strong><code>@github.com/path</code></li>
</ul>
</li>
</ol>
<p>While the SSH Key-based authentication is the most secure and recommended one. Just to explore. I am going to use the third method here which is simple and easy.</p>
<p>I chose this method as I also want to use the <strong>Ansible vault </strong>feature to securely store and retrieve the username and security token.</p>
<p>Here I presume that you are ready with your Username and Security token (or) username. ( if you want to follow along and use the Ansible vault)</p>
<p>Let&#8217;s walk further.</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h3>Step2:  Creating Ansible vault to Store the Git username and token</h3>
<p>Look at the following Screen recording to know how to create and encrypt the secrets with Ansible vault</p>
<p><script id="asciicast-6XjsxINtCTyJFqmsJ4XBvSDsp" src="https://asciinema.org/a/6XjsxINtCTyJFqmsJ4XBvSDsp.js" async></script><br />
I presume that you have taken a look at the screen recording and noticed that we have created a new ansible-vault named <code>secrets.yaml</code> and saved the GitHub <code>username</code> and <code>token</code> in a key value format.</p>
<p>this can be used inside the ansible-playbook as a <code>variables</code> file and the username and token can be used as a variable using <strong>Jinja2</strong> templates syntax <code>{{ gituser}}:{{gitpass}}</code></p>
<blockquote><p>The username and password used in this video would be deleted for security purposes but you can use this same methodology to store your username and password before proceeding further</p></blockquote>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h3>Step3:  The Ansible Git Example Playbook</h3>
<p>Here is the playbook I have written to download the NODE JS code available in my private repository to install the necessary tools start the Node server finally and launch the application.</p>
<p>Make sure you replace the repository URL in the following playbook to your own private repository before trying it out.</p>
<pre class="hljs" style="display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;"><span class="hljs-meta" style="color: #ffc58f;">---</span>
<span class="hljs-attr">  - name:</span> Install and Launch the Simple NodeJS Application
<span class="hljs-attr">    hosts:</span> nodeserver
<span class="hljs-attr">    vars_files:</span>
<span style="color: #ffff00;"><span class="hljs-bullet">       -</span> secrets.yml</span>
<span class="hljs-attr">    vars:</span>
<span class="hljs-attr">       - destdir:</span> /apps/SampleNodeApp
<span class="hljs-attr">    tasks:</span>

<span class="hljs-bullet" style="color: #d1f1a9;">       -</span> name : install Node and NPM
<span class="hljs-attr">         become:</span> <span class="hljs-literal" style="color: #ffc58f;">yes</span>
<span class="hljs-attr">         register:</span> ymrepo
<span class="hljs-attr">         yum:</span>
<span class="hljs-attr">           name:</span> nodejs
<span class="hljs-attr">           state:</span> latest

<span class="hljs-bullet" style="color: #d1f1a9;">       -</span> name : validate the nodejs installation
<span class="hljs-attr">         debug:</span> msg=<span class="hljs-string" style="color: #d1f1a9;">"Installation of node is Successfull"</span>
<span class="hljs-attr">         when:</span> ymrepo is changed

<span class="hljs-attr">       - name:</span> Version of Node and NPM
<span class="hljs-attr">         shell:</span>
            <span class="hljs-string" style="color: #d1f1a9;">"npm -v &amp;&amp; node -v"</span>
<span class="hljs-attr">         register:</span> versioninfo

<span class="hljs-attr">       - name:</span> Version Info
<span class="hljs-attr">         debug:</span>
<span class="hljs-attr">           msg:</span> <span class="hljs-string" style="color: #d1f1a9;">"Version info <span class="hljs-template-variable" style="color: #ff9da4;">{{ versioninfo.stdout_lines }}</span>"</span>
<span class="hljs-attr">         when:</span> versioninfo is changed

<span class="hljs-attr">       - name:</span> Download the NodeJS code from the GitRepo
<span class="hljs-attr">         become:</span> <span class="hljs-literal" style="color: #ffc58f;">yes</span>
<span class="hljs-attr">         git:</span>
<span class="hljs-attr">            repo:</span> <span class="hljs-string" style="color: #d1f1a9;">'https://<span class="hljs-template-variable" style="color: #ff9da4;">{{gituser}}</span>:<span class="hljs-template-variable" style="color: #ff9da4;">{{gitpass}}</span>@github.com/AKSarav/SampleNodeApp.git'</span>
<span class="hljs-attr">            dest:</span> <span class="hljs-string" style="color: #d1f1a9;">"<span class="hljs-template-variable" style="color: #ff9da4;">{{ destdir }}</span>"</span>

<span class="hljs-attr">       - name:</span> Change the ownership of the directory
<span class="hljs-attr">         become:</span> <span class="hljs-literal" style="color: #ffc58f;">yes</span>
<span class="hljs-attr">         file:</span>
<span class="hljs-attr">           path:</span> <span class="hljs-string" style="color: #d1f1a9;">"<span class="hljs-template-variable" style="color: #ff9da4;">{{destdir}}</span>"</span>
<span class="hljs-attr">           owner:</span> <span class="hljs-string" style="color: #d1f1a9;">"vagrant"</span>
<span class="hljs-attr">         register:</span> chgrpout

<span class="hljs-attr">       - name:</span> Install Dependencies with NPM install command
<span class="hljs-attr">         shell:</span>
            <span class="hljs-string" style="color: #d1f1a9;">"npm install"</span>
<span class="hljs-attr">         args:</span>
<span class="hljs-attr">            chdir:</span> <span class="hljs-string" style="color: #d1f1a9;">"<span class="hljs-template-variable" style="color: #ff9da4;">{{ destdir }}</span>"</span>
<span class="hljs-attr">         register:</span> npminstlout

<span class="hljs-attr">       - name:</span> Debug npm install command
<span class="hljs-attr">         debug:</span> msg=<span class="hljs-string" style="color: #d1f1a9;">'<span class="hljs-template-variable" style="color: #ff9da4;">{{npminstlout.stdout_lines}}</span>'</span>


<span class="hljs-attr">       - name:</span> Start the App
<span class="hljs-attr">         async:</span> <span class="hljs-number" style="color: #ffc58f;">10</span>
<span class="hljs-attr">         poll:</span> <span class="hljs-number" style="color: #ffc58f;">0</span>
<span class="hljs-attr">         shell:</span>
            <span class="hljs-string" style="color: #d1f1a9;">"(node index.js &gt; nodesrv.log 2&gt;&amp;1 &amp;)"</span>
<span class="hljs-attr">         args:</span>
<span class="hljs-attr">           chdir:</span> <span class="hljs-string" style="color: #d1f1a9;">"<span class="hljs-template-variable" style="color: #ff9da4;">{{ destdir }}</span>"</span>
<span class="hljs-attr">         register:</span> appstart

<span class="hljs-attr">       - name:</span> Validating the port is open
<span class="hljs-attr">         tags:</span> nodevalidate
<span class="hljs-attr">         wait_for:</span>
<span class="hljs-attr">           host:</span> <span class="hljs-string" style="color: #d1f1a9;">"localhost"</span>
<span class="hljs-attr">           port:</span> <span class="hljs-number" style="color: #ffc58f;">5000</span>
<span class="hljs-attr">           delay:</span> <span class="hljs-number" style="color: #ffc58f;">10</span>
<span class="hljs-attr">           timeout:</span> <span class="hljs-number" style="color: #ffc58f;">30</span>
<span class="hljs-attr">           state:</span> started
<span class="hljs-attr">           msg:</span> <span class="hljs-string" style="color: #d1f1a9;">"NodeJS server is not running"</span></pre>
<p>In the preceding playbook, you need to re-look a few things to understand it better.</p>
<p>First is the URL, You can see we have used the Jinja2 templates {{gituser}} and {{gitpass}} in the URL. During the runtime, these would be replaced with actual values.</p>
<pre><span class="hljs-string" style="color: #c41a16;">'https://<span class="hljs-template-variable" style="color: #666600;">{{gituser}}</span>:<span class="hljs-template-variable" style="color: #666600;">{{gitpass}}</span>@github.com/AKSarav/SampleNodeApp.git'</span></pre>
<p>and the second one you need to check is the variable file we have mentioned at the top with <code>vars_files</code> directive.</p>
<pre><span class="hljs-attr" style="color: #5c2699;">vars_files:</span>  <span class="hljs-bullet" style="color: #1c00cf;">-</span> secrets.yml</pre>
<p>You can see that we used <code>secrets.yml</code> file as our variable file.  Rest all are usual syntaxes only</p>
<p>At the last, we have also use <code>wait_for</code> module to make sure that the NODEJS server is started and running by monitoring the port <code>5000</code></p>
<p>Now, you might think. the <code>secrets.yml</code> file is encrypted by ansible vault and how can we use it as a variable file in the playbook. We will discuss this next</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p>&nbsp;</p>
<h3>Step4:  Launch the Playbook with Ansible Git</h3>
<p>Now you can launch the playbook with <code>ansible-playbook</code> command but there is a little chance that you have to add one more argument/flag while starting the playbook.</p>
<pre>ansible-playbook gitexample.yml <span style="color: #e00d6c;">--ask-vault-pass</span></pre>
<p>As you have guessed,  the additional parameter we have added is to make <code>ansible-playbook</code> get the password of the <code>ansible-vault</code> from the user as it needs the password to decrypt the <code>secrets.yml</code> file used inside the playbook.</p>
<p>Refer to the following screen recording clip to see how the playbook is running on real-time and to see the output</p>
<p><script id="asciicast-vRVodUxZYswFA6x9PN8f3y8qd" src="https://asciinema.org/a/vRVodUxZYswFA6x9PN8f3y8qd.js" async></script></p>
<p>If you want more info on the Git hash information. you can use <code>-vv</code>  while you are invoking the playbook</p>
<pre>ansible-playbook gitexample.yml <span style="color: #e00d6c;">--ask-vault-pass &#8211; vv</span></pre>
<p>It would show the Git commit hash details along with <strong>before</strong> and <strong>after</strong> GIT information</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-4.29.43-PM.png"><img class="alignnone size-full wp-image-4230" src="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-4.29.43-PM.png" alt="" width="1439" height="724" srcset="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-4.29.43-PM.png 1439w, https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-4.29.43-PM-300x151.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-4.29.43-PM-768x386.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-4.29.43-PM-1024x515.png 1024w" sizes="(max-width: 1439px) 100vw, 1439px" /></a></p>
<p>&nbsp;</p>
<h3>Step5: Validate the Deployment</h3>
<p>Hope your Ansible Playbook has run successfully and now it is the time for validation.  You might have figured out that my remote server name is <code>mwiapp01</code> as it is displayed on the preceding snapshot.</p>
<p>Now let us access the URL <code>http://mwiapp01:5000</code> and test it</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.31.56-PM.png"><img class="alignnone size-full wp-image-4244" src="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.31.56-PM.png" alt="Ansible Git Example" width="672" height="559" srcset="https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.31.56-PM.png 672w, https://www.middlewareinventory.com/wp-content/uploads/2019/10/Screenshot-2019-10-05-at-5.31.56-PM-300x250.png 300w" sizes="(max-width: 672px) 100vw, 672px" /></a></p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<h2></h2>
<h2>Using Git token instead of username and Password</h2>
<p>In the previous playbook, you can see that we have used the username and the password which is not a secure solution.</p>
<p>Github now supports user access tokens in place of username and password for authentication</p>
<p><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Refer to this article to know how to create personal access token in GitHub</a></p>
<p>Once you have the token with you can simply replace the GIT URL from</p>
<pre><span class="hljs-string" style="color: #c41a16;">'https://<span class="hljs-template-variable" style="color: #666600;">{{gituser}}</span>:<span class="hljs-template-variable" style="color: #666600;">{{gitpass}}</span>@github.com/AKSarav/SampleNodeApp.git'</span></pre>
<p>to this</p>
<pre><span class="hljs-string" style="color: #c41a16;">'https://<span class="hljs-template-variable" style="color: #666600;">{{gittoken}}</span>@github.com/AKSarav/SampleNodeApp.git'</span></pre>
<p>&nbsp;</p>
<p>Here is the complete example playbook you can refer to, in this upgraded playbook  we have used additional modules and features like</p>
<ul>
<li>Ansible Assert</li>
<li>pre_task</li>
<li>post_task</li>
<li>slack notification etc</li>
</ul>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
  - name: Install and Launch the Simple NodeJS Application
    hosts: testserver
    vars_files:
       - gitsecrets.yml
    vars:
       - destdir: /apps/sampleapp
    pre_tasks:
      - name : install dependencies before starting
        become: yes
        register: aptinstall
        apt:
           name: 
            - nodejs
            - npm
            - git
           state: latest
           update_cache: yes
      
      - name : validate the nodejs installation
        debug: msg="Installation of node is Successfull"
        when: aptinstall is changed
    
    tasks:
       - name: Version of Node and NPM
         shell:
            "npm -v &amp;&amp; nodejs -v"
         register: versioninfo
       - name: Validate if the installation is intact
         assert:
          that: "versioninfo is changed"
      
       - name: Create Dest Directory if not exists
         become: yes
         file: 
          path: "{{ destdir }}"
          state: directory
          owner: vagrant
          group: vagrant
          mode: 0755
       - name: Download the NodeJS code from the GitRepo
         become: yes
         git:
            repo: 'https://{{gittoken}}@github.com/AKSarav/SampleNodeApp.git'
            dest: "{{ destdir }}"
       - name: Change the ownership of the directory
         become: yes
         file:
           path: "{{destdir}}"
           owner: "vagrant"
         register: chgrpout
       - name: Install Dependencies with NPM install command
         shell:
            "npm install"
         args:
            chdir: "{{ destdir }}"
         register: npminstlout
       - name: Debug npm install command
         debug: msg='{{npminstlout.stdout_lines}}'
       - name: Start the App
         async: 10
         poll: 0
         shell:
            "(node index.js &gt; nodesrv.log 2&gt;&amp;1 &amp;)"
         args:
           chdir: "{{ destdir }}"
         register: appstart
       - name: Validating the port is open
         tags: nodevalidate
         wait_for:
           host: "localhost"
           port: 5000
           delay: 10
           timeout: 30
           state: started
           msg: "NodeJS server is not running"
    post_tasks:
        - name: notify Slack that the servers have been updated 
          tags: slack
          community.general.slack:
            token: T026******PF/B02U*****N/WOa7r**********Ao0jnWn
            msg: |
                ### StatusUpdate ###
                &#8211; ------------------------------------
                ``
                `Server`: {{ansible_host}}
                `Status`: NodeJS Sample Application installed successfully
                &#8211; ------------------------------------
            channel: '#ansible'
            color: good
            username: 'Ansible on {{ inventory_hostname }}'
            link_names: 0
            parse: 'none'
          delegate_to: localhost</pre>
<p>If you are using this playbook, make sure you are updating your <code>secrets</code> file too, with new variable <code>gittoken</code> with your token value.</p>
<p>This playbook is covered in detail in the following article.</p>
<blockquote class="wp-embedded-content" data-secret="8mNkwUi7TG"><p><a href="https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/">Ansible Pre Tasks and Post Tasks Example | Devops Junction</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;Ansible Pre Tasks and Post Tasks Example | Devops Junction&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/ansible-pre-tasks-and-post-tasks-example/embed/#?secret=8mNkwUi7TG" data-secret="8mNkwUi7TG" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<h2></h2>
<h2>Conclusion</h2>
<p>Hope you find this article helping. this article was primarily designed to give an overview of how the Ansible Git module can be used to deploy the code from the remote.</p>
<p>There are other few things you can do with the Ansible git module which I find it not interesting. Though I like the Ansible Git module,<strong> It would have been great if they would have given the other necessary features of Git such as Pull, Push, Fetch, Merge etc.</strong></p>
<p>I hope it would be added in the future, I will update this article as and when I am finding more options available with this module.</p>
<p>I will also write an article for Ansible and Git CLI in near future with all Git core comands. Till then Cheers.</p>
<p>Rate this article [ratings]</p>
<p>&nbsp;</p>
<p>Thanks<br />
Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="4226"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/ansible-git-example/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-git-example/">Ansible Git Example &#8211; Checkout code from Git Repo Securely</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-git-example/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Ansible SSH Key transfer from one host to another &#8211; local and remote</title>
		<link>https://www.middlewareinventory.com/blog/ansible-ssh-key-exchange/</link>
					<comments>https://www.middlewareinventory.com/blog/ansible-ssh-key-exchange/#respond</comments>
		
		<dc:creator><![CDATA[Rumen Lishkov]]></dc:creator>
		<pubDate>Wed, 12 Sep 2018 22:56:35 +0000</pubDate>
				<category><![CDATA[Ansible]]></category>
		<category><![CDATA[Ansible authorized_key module example]]></category>
		<category><![CDATA[ansible examples]]></category>
		<category><![CDATA[ansible SSH key based authentication between servers]]></category>
		<category><![CDATA[SSH Key based authentication]]></category>
		<guid isPermaLink="false">https://www.middlewareinventory.com/?p=1735</guid>

					<description><![CDATA[<p>SSH Key-based authentication setup in LINUX (or) UNIX based OS is one of the major platform services related task and most frequently executed task by Unix admins. Ansible, An IT Automation tool could automate this tedious task as well. SSH Key based authentication is indispensable when it comes to automation. Even[...]</p>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-ssh-key-exchange/">Ansible SSH Key transfer from one host to another &#8211; local and remote</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>SSH Key-based authentication setup in LINUX (or) UNIX based OS is one of the major platform services related task and most frequently executed task by Unix admins. Ansible, An IT Automation tool could automate this tedious task as well.</p>
<p>SSH Key based authentication is indispensable when it comes to automation. Even some of the Ansible related tasks like SCP and RSYNC(synchronize) requires SSH Key based authentication to be enabled before running the ansible playbook.</p>
<p>In this post, we are going to see</p>
<p>How to enable the SSH Key-based authentication setup between multiple servers (or) hosts using Ansible <code>ad-hoc</code> commands and <code>playbook</code></p>
<p>Or How to transfer SSH Keys using ansible playbook and ad-hoc commands.</p>
<h2></h2>
<h2><span style="font-size: 18pt;">The Objective</span></h2>
<p>I have two Red Hat Enterprise Linux servers named <code>mwiapp01</code> and <code>mwiapp02</code> and I have to enable SSH key based (passwordless) authentication between them, in both directions.</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2019-02-01-at-12.25.15-PM.png"><img class="post-img alignnone wp-image-2843 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2019-02-01-at-12.25.15-PM.png" alt="" width="1191" height="508" srcset="https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2019-02-01-at-12.25.15-PM.png 1191w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2019-02-01-at-12.25.15-PM-300x128.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2019-02-01-at-12.25.15-PM-768x328.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2019-02-01-at-12.25.15-PM-1024x437.png 1024w" sizes="(max-width: 1191px) 100vw, 1191px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Index</h2>
<ol>
<li> The Plan ( What we are trying to achieve in this article)</li>
<li> SSH Key creation and Exchange using Ansible <strong>AD HOC</strong> commands</li>
<li> SSH Key Creation and Exchange using Ansible<strong> Playbook</strong>
<ol style="list-style-type: lower-alpha;">
<li> Using <strong>Shell</strong> Module</li>
<li> Using the <strong>authorized_key</strong> module</li>
</ol>
</li>
<li>SSH Key Creation and Exchange between <strong>multiple hosts </strong></li>
</ol>
<p>&nbsp;</p>
<h2><span style="font-size: 18pt;">The Plan</span></h2>
<p>We are going to see how to achieve our objective (or) requirement using Ansible <strong>ad-hoc</strong> command and ansible <strong>playbook</strong> with and without SSH <strong>authorized_key</strong> module.</p>
<p>Now we will see how to do this with both Ansible ad-hoc commands and playbook.</p>
<p>Let us consider that I have already grouped these servers into a host group  named &#8220;<strong>app</strong>&#8221; in <code>ansible_hosts</code> inventory file</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2018/09/TheObjective.png"><img class="post-img alignnone wp-image-1756 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2018/09/TheObjective.png" alt=" Enable SSH Key based authentication using Ansible" width="741" height="404" srcset="https://www.middlewareinventory.com/wp-content/uploads/2018/09/TheObjective.png 741w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/TheObjective-300x164.png 300w" sizes="(max-width: 741px) 100vw, 741px" /></a></p>
<p>&nbsp;</p>
<h2></h2>
<h2><span style="font-size: 18pt;">Ansible AD-HOC Commands &#8211; Ansible SSH Key</span></h2>
<p>In this method, we are going to use the Ansible ad hoc commands to perform the ssh key exchange and to copy the ssh keys between hosts. to know more about ansible ad hoc command <a href="https://www.middlewareinventory.com/blog/ansible-ad-hoc-commands/">refer to this article</a></p>
<p><span style="font-size: 14pt;"><strong>Step 1: </strong></span> Create SSH Private key using SSH-KEYGEN for the user <code>weblogic</code></p>
<pre>aksarav@middlewareinventory:~$ ansible app -m shell -a "ssh-keygen -q -b 2048 -t rsa -N '' -C 'creating SSH' -f ~/.ssh/id_rsa creates='~/.ssh/id_rsa'" -i ansible_hosts -b &#8211; become-user=weblogic

mwiapp02 | SUCCESS | rc=0 &gt;&gt;
mwiapp01 | SUCCESS | rc=0 &gt;&gt;</pre>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt;">Step 2:</span> </strong> Make sure the Private key file is created</p>
<pre>aksarav@middlewareinventory:~$ ansible app -m shell -a "ls -lrt  ~/.ssh/id_rsa" -i ansible_hosts -b &#8211; become-user=weblogic

mwiapp02 | SUCCESS | rc=0 &gt;&gt;
-rw----- &#8211; 1 weblogic weblogic 1679 Sep 10 17:25 /home/weblogic/.ssh/id_rsa
mwiapp01 | SUCCESS | rc=0 &gt;&gt;
-rw----- &#8211; 1 weblogic weblogic 1675 Sep 10 17:25 /home/weblogic/.ssh/id_rsa</pre>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;"><strong>Step 3:  </strong></span>Fetch the Key  Public Key from the servers to the ansible master</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-linenumbers="false" data-enlighter-theme="bootstrap4">aksarav@middlewareinventory:~$ ansible app -m fetch -a "src='~/.ssh/id_rsa.pub' dest='buffer/{{inventory_hostname}}-id_rsa.pub' flat='yes'" -i ansible_hosts -b &#8211; become-user=weblogic

mwiapp02 | SUCCESS =&gt; {

    "changed": true,
    "checksum": "e128efa0cf4008d6f0a8652da44249d016a1c4fb",
    "dest": "/Users/aksarav/VirtualBox VMs/vagrantVM/buffer/mwiapp02-id_rsa.pub",
    "md5sum": "92332ffb86a310f2f7fa55e9e18e1f65",
    "remote_checksum": "e128efa0cf4008d6f0a8652da44249d016a1c4fb",
    "remote_md5sum": null
}

mwiapp01 | SUCCESS =&gt; {
    "changed": true,
    "checksum": "8ccbec5b91fd027e0e3ba8ca6fe2fa5e6faec0e8",
    "dest": "/Users/aksarav/VirtualBox VMs/vagrantVM/buffer/mwiapp01-id_rsa.pub",
    "md5sum": "f46044276aba3e4e6d4e918192676b76",
    "remote_checksum": "8ccbec5b91fd027e0e3ba8ca6fe2fa5e6faec0e8",
    "remote_md5sum": null

}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<p><strong><span style="font-size: 14pt;">Step 4: </span>  </strong>Copy the public key files to their respective destination servers to update <code>authorized_keys</code>.  <em>mwiapp01</em> server&#8217;s public key <code>mwiapp01-id_rsa.pub</code> would go to <em>mwiapp02</em> server and vice versa</p>
<p><span style="font-size: 14pt;"><strong>4a)</strong> </span>Copy the <code>mwiapp01</code> public key to <code>mwiapp02</code> and update authorized key using <span style="color: #096c87;">ansible authorized_key module</span></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">aksarav@middlewareinventory:~$ ansible app -m authorized_key -a "user='weblogic' state='present' key='{{ lookup('file','buffer/mwiapp01-id_rsa.pub')}}'" &#8211; limit=mwiapp02 -i ansible_hosts -b &#8211; become-user=weblogic

mwiapp02 | SUCCESS =&gt; {
    "changed": true,
    "comment": null,
    "exclusive": false,
    "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIRJwtqDW614wf9vKm51oTi3mNt4CkYXB7aLxhT1sEsZILUBYBLFqc78QB2eqelmbvgWN471CcR4XAYPxImB+ibZLhBuLqz49lPWpaVl+D55THVJFiCJ5MrXZBeSD73hRX0y1cR4kuPflaYLodz/sNOeScufomlhs+cQzwGpShSXqNtTJMl9KqqWnczBut6mdK5X/+ETruCTVigLrKfoAGDbpFHm2MNuVNud34HUffKcnqXz8ihbH1tmlW5jy+j6mMDsMNfIA7coP/bKoa2vVMX1sFpAQQCPhejLV26IYM5fYABVYrzxLtaiioylRyvSWl7NFTpgua+dtkbdV7aEWr creating SSH",
    "key_options": null,
    "keyfile": "/home/weblogic/.ssh/authorized_keys",
    "manage_dir": true,
    "path": null,
    "state": "present",
    "unique": false,
    "user": "weblogic",
    "validate_certs": true
}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt;">4b) </span> </strong>Copy the <code>mwiapp02</code>&#8216;s public key to <code>mwiapp01</code>and update authorized key using <span style="color: #096c87;">ansible authorized_key module</span></p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">aksarav@middlewareinventory:~$ ansible app -m authorized_key -a "user='weblogic' state='present' key='{{ lookup('file','buffer/mwiapp02-id_rsa.pub')}}'" &#8211; limit=mwiapp01 -i ansible_hosts -b &#8211; become-user=weblogic

mwiapp01 | SUCCESS =&gt; {

    "changed": true,
    "comment": null,
    "exclusive": false,
    "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDh50TVgulXoAEcRz0rn8SEXgVVoLpaebqk+PvhpRO27JbGC6WMlwpDNxEOdXjEn9Qlotm7zF/JUAjXaxEiPS7P5QSQjSTRxBu6YrTEV8sPnJyiocp+ll+1U74r18R88jE03+JOdxDroKROz3qpfT/vqzTHi6hnMdWs0n8vE09+oWPorW9lqrdWQ0C+AZShIWoSc/9nrLVDXci4rxhbwgrzyJbPd77sbV5yDoDfFLTKf3z3NQ48Gku/7zTdTNxrHOz8wop5Iqy7fqfH7jWAxlT0mWdJ6Ac+++ARj+x/v59hNfwMswc3rI2fE4tPNXIKC9tcnwVG3teaV1h4XxpHyWEt creating SSH",
    "key_options": null,
    "keyfile": "/home/weblogic/.ssh/authorized_keys",
    "manage_dir": true,
    "path": null,
    "state": "present",
    "unique": false,
    "user": "weblogic",
    "validate_certs": true
}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt;">Step 5:</span> </strong>Validate the SSH Key-based authentication between each server as <code>weblogic</code> user ( If everything we did is correct, we should be able to execute commands over SSH from one another.</p>
<p><span style="font-size: 14pt;"><strong>5a) </strong></span> Invoke SSH login from <code>mwiapp01</code> to <code>mwiapp02</code>  and execute <span style="color: #096c87;">uname -n</span> command</p>
<pre>aksarav@middlewareinventory:~$ ansible app -m shell -a "ssh mwiapp02 'uname -a'" -i ansible_hosts -b &#8211; become-user=weblogic &#8211; limit=mwiapp01

mwiapp01 | SUCCESS | rc=0 &gt;&gt;
Linux mwiapp02 3.10.0-514.2.2.el7.x86_64 #1 SMP Wed Nov 16 13:15:13 EST 2016 x86_64 x86_64 x86_64 GNU/Linux</pre>
<p><strong><span style="font-size: 14pt;">5b)</span> </strong>Invoke SSH login from <code>mwiapp02</code> to <code>mwiapp01</code>  and execute <span style="color: #096c87;">uname -n</span> command</p>
<pre>aksarav@middlewareinventory:~/VirtualBox VMs/vagrantVM$ ansible app -m shell -a "ssh mwiapp01 'uname -a'" -i ansible_hosts -b &#8211; become-user=weblogic &#8211; limit=mwiapp02

mwiapp02 | SUCCESS | rc=0 &gt;&gt;
Linux mwiapp01 3.10.0-514.2.2.el7.x86_64 #1 SMP Wed Nov 16 13:15:13 EST 2016 x86_64 x86_64 x86_64 GNU/Linux</pre>
<p>&nbsp;</p>
<h2><span style="font-size: 18pt;">Ansible Playbook  to Exchange keys between hosts</span></h2>
<h3>Type1: With Ansible <span style="color: #db4861;">Shell </span>module and <span style="color: #db4861;">Typical Commands</span></h3>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod1.png"><img class="alignright wp-image-1751 size-medium" src="https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod1-300x268.png" alt=" How to enable SSH Key based authentication using Ansible" width="300" height="268" srcset="https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod1-300x268.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod1-768x686.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod1-1024x915.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod1.png 1581w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>In this method, We are not going to use any ansible in-built module and every step is done manually by executing the shell command. The Playbook contains the following tasks</p>
<ol>
<li><strong>Create</strong> an SSH Private and Public Key using  <code>ssh-keygen</code> command</li>
<li><strong>Fetch</strong> generated key files from remote servers [mwiapp01,mwiapp02]  to ansible master</li>
<li><strong>Copy</strong> the file from the master to remote destination servers</li>
<li><strong>Add</strong> the public to the mentioned user&#8217;s <code>authorized_keys</code> file</li>
</ol>
<p>&nbsp;</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Exchange Keys between servers
  become: yes
  become_user: weblogic
  hosts: app
  tasks:
    - name: SSH KeyGen command
      shell: &gt; 
        ssh-keygen -q -b 2048 -t rsa -N "" -C "creating SSH" -f ~/.ssh/id_rsa
        creates="~/.ssh/id_rsa"

    - name: Fetch the keyfile from one server to another
      fetch: 
        src: "~/.ssh/id_rsa.pub"
        dest: "buffer/{{ansible_hostname}}-id_rsa.pub"
        flat: yes

    - name: Copy the file from master to the destination
      copy:
        src: "buffer/{{item.dest}}-id_rsa.pub"
        dest: "/tmp/remote-id_rsa.pub"  
      when: "{{ item.dest != ansible_hostname }}"
      with_items: 
        - { dest: "{{groups['app'][1]}}"}
        - { dest: "{{groups['app'][0]}}"}

    - name: add the public key into Authorized_keys file to enable Key Auth
      shell: "cat /tmp/remote-id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys"
      register: addtoauth</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Type2: With Ansible <span style="color: #db4861;">authorized_key</span> module</h3>
<p class="alignnone"><a href="https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod2.png"><img class="alignleft wp-image-1752 size-medium" src="https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod2-300x268.png" alt="" width="300" height="268" srcset="https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod2-300x268.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod2-768x685.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod2-1024x913.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/AnsibleMethod2.png 1582w" sizes="(max-width: 300px) 100vw, 300px" /></a>In this method, we are going to use the ansible built-in module named <code>"authorized_key"</code>.  The following playbook has three steps</p>
<ol>
<li><strong>Create</strong> an SSH Private and Public Key using  <code>ssh-keygen</code> command</li>
<li><strong>Fetch</strong> generated key files from remote servers [mwiapp01,mwiapp02]  to ansible master</li>
<li>Use the <strong>authorized_key</strong> module to <strong>copy</strong> the file remote machine and <strong>add</strong> it to the mentioned user&#8217;s <code>authorized_keys</code> file ( <em>If you could notice, the authorized_key module is actually performing the step3 and step4 from the manual method</em> )</li>
</ol>
<p>&nbsp;</p>
<pre class="EnlighterJSRAW" data-enlighter-language="yaml" data-enlighter-theme="bootstrap4" data-enlighter-linenumbers="false">---
- name: Exchange Keys between servers
  become: yes
  become_user: weblogic
  hosts: app
  tasks:
    - name: SSH KeyGen command
      tags: run
      shell: &gt; 
        ssh-keygen -q -b 2048 -t rsa -N "" -C "creating SSH" -f ~/.ssh/id_rsa
        creates="~/.ssh/id_rsa"

    - name: Fetch the keyfile from one server to another
      tags: run
      fetch: 
        src: "~/.ssh/id_rsa.pub"
        dest: "buffer/{{ansible_hostname}}-id_rsa.pub"
        flat: yes

    - name: Copy the key add to authorized_keys using Ansible module
      tags: run
      authorized_key:
        user: weblogic
        state: present
        key: "{{ lookup('file','buffer/{{item.dest}}-id_rsa.pub')}}"
      when: "{{ item.dest != ansible_hostname }}"
      with_items: 
        - { dest: "{{groups['app'][1]}}"}
        - { dest: "{{groups['app'][0]}}"}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Ansible SSH Key Exchange between multiple hosts</h2>
<p>Though the previously given examples have talked about Creating and Exchanging the Keys between only two servers. With a Simple modification in the same playbook. you would be able to achieve Exchanging the SSH Keys across multiple servers (or) all the servers in the host group.</p>
<p>Here is the Playbook to exchange SSH key between multiple hosts.</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;"><span class="hljs-meta" style="color: #9b859d;">---</span>
<span class="hljs-attr" style="color: #6d9cbe;">- name:</span> Exchange Keys between servers
<span class="hljs-attr" style="color: #6d9cbe;">  hosts:</span> multi
<span class="hljs-attr" style="color: #6d9cbe;">  tasks:</span>
<span class="hljs-attr" style="color: #6d9cbe;">    - name:</span> SSH KeyGen command
<span class="hljs-attr" style="color: #6d9cbe;">      tags:</span> run
<span class="hljs-attr" style="color: #6d9cbe;">      shell:</span> <span class="hljs-string" style="color: #a5c261;">&gt; 
        ssh-keygen -q -b 2048 -t rsa -N "" -C "creating SSH" -f ~/.ssh/id_rsa
        creates="~/.ssh/id_rsa"

</span><span class="hljs-attr" style="color: #6d9cbe;">    - name:</span> Fetch the keyfile from the node to master
<span class="hljs-attr" style="color: #6d9cbe;">      tags:</span> run
<span class="hljs-attr" style="color: #6d9cbe;">      fetch:</span> 
<span class="hljs-attr" style="color: #6d9cbe;">        src:</span> <span class="hljs-string" style="color: #a5c261;">"~/.ssh/id_rsa.pub"</span>
<span class="hljs-attr" style="color: #6d9cbe;">        dest:</span> <span class="hljs-string" style="color: #a5c261;">"buffer/<span class="hljs-template-variable" style="color: #a5c261;">{{ansible_hostname}}</span>-id_rsa.pub"</span>
<span class="hljs-attr" style="color: #6d9cbe;">        flat:</span> <span class="hljs-literal">yes</span>

<span class="hljs-attr" style="color: #6d9cbe;">    - name:</span> Copy the key add to authorized_keys using Ansible module
<span class="hljs-attr" style="color: #6d9cbe;">      tags:</span> runcd
<span class="hljs-attr" style="color: #6d9cbe;">      authorized_key:</span>
<span class="hljs-attr" style="color: #6d9cbe;">        user:</span> vagrant
<span class="hljs-attr" style="color: #6d9cbe;">        state:</span> present
<span class="hljs-attr" style="color: #6d9cbe;">        key:</span> <span class="hljs-string" style="color: #a5c261;">"<span class="hljs-template-variable" style="color: #a5c261;">{{ lookup('file','buffer/{{item}}</span>-id_rsa.pub')}}"</span>
<span class="hljs-attr" style="color: #6d9cbe;">      when:</span> <span class="hljs-string" style="color: #a5c261;">"<span class="hljs-template-variable" style="color: #a5c261;">{{ item != ansible_hostname }}</span>"</span>
<span class="hljs-attr" style="color: #6d9cbe;">      with_items:</span> 
<span class="hljs-bullet" style="color: #6d9cbe;">        -</span> <span class="hljs-string" style="color: #a5c261;">"<span class="hljs-template-variable" style="color: #a5c261;">{{ groups['multi'] }}</span>"</span>       

</pre>
<p><strong>What is the difference</strong></p>
<p>we have changed the loop with_items to parse all the servers in the host group instead of two specific servers. These are the two modified lines from the previous example.</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;"><span class="hljs-attr" style="color: #6d9cbe;"> when:</span> <span class="hljs-string" style="color: #a5c261;">"<span class="hljs-template-variable" style="color: #a5c261;">{{ item != ansible_hostname }}</span>"</span>
<span class="hljs-attr" style="color: #6d9cbe;"> with_items:</span> 
<span class="hljs-bullet" style="color: #6d9cbe;">        -</span> <span class="hljs-string" style="color: #a5c261;">"<span class="hljs-template-variable" style="color: #a5c261;">{{ groups['multi'] }}</span>"</span></pre>
<h3><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3398911159151128"
     data-ad-slot="1946393371"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></h3>
<h3>Playbook execution Output</h3>
<p>We have saved the Type1 playbook in the name <code>sshkey-exchange-t1.yaml</code> and executed it. and here is the output.</p>
<p>In the last task. you could see that we successfully initiated an SSH connection  from one another and ran the <code>uname -a</code> command</p>
<p><a href="https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM.png"><img class="post-img alignnone wp-image-1762 size-full" src="https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM.png" alt=" Enable SSH Key based authentication using Ansible" width="1165" height="835" srcset="https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM.png 1165w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM-300x215.png 300w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM-768x550.png 768w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM-1024x734.png 1024w, https://www.middlewareinventory.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-13-at-3.57.14-AM-90x65.png 90w" sizes="(max-width: 1165px) 100vw, 1165px" /></a></p>
<p>Hope it helps.</p>
<p>We recommend the following article in case if you are looking to exchange IP between multiple hosts in Ansible. adding an IP in /etc/hosts file of multiple hosts in Ansible.</p>
<blockquote class="wp-embedded-content" data-secret="Xz7hIxGOpP"><p><a href="https://www.middlewareinventory.com/blog/ansible-update-etc-hosts-file-across-all-hosts/">ansible update /etc/hosts file with IP of all hosts across all hosts</a></p></blockquote>
<p><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8220;ansible update /etc/hosts file with IP of all hosts across all hosts&#8221; &#8212; Middleware Inventory" src="https://www.middlewareinventory.com/blog/ansible-update-etc-hosts-file-across-all-hosts/embed/#?secret=Xz7hIxGOpP" data-secret="Xz7hIxGOpP" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<p>For any questions (or) support. Please feel free to comment</p>
<p>Rate this article [ratings]</p>
<p>Cheers,</p>
<p>Rumen Lishkov</p>
<div id="postfollow">
<a href='https://ko-fi.com/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https://az743702.vo.msecnd.net/cdn/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>
<p>Follow us on<a href="http://www.facebook.com/middlewareinventory">Facebook</a> or<a href="http://www.twitter.com/mwinventory">Twitter</a>
</br>
For more practical videos and tutorials. <a href="https://www.youtube.com/kiss2mark">Subscribe to our channel</a>
</br>
Follow me on Linkedin <a href="https://www.linkedin.com/comm/mynetwork/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory">My Profile</a>
</br>
</i>For any Consultation or to hire us <a href="mailto:rumenlishkoff@gmail.com"> rumenlishkoff@gmail.com</a>
</br>
If you like this article. Show your Support! <a href="https://ko-fi.com/middlewareinventory">Buy me a Coffee.</a>
</br>
</p>
<p style="color: palevioletred !important;">Signup for Exclusive "Subscriber-only" Content</p>

		<div class="emaillist">
			<form action="#" method="post" class="es_subscription_form es_shortcode_form" id="es_subscription_form_1670576714" data-source="ig-es">
								<div class="es-field-wrap"><label>Name*<br /><input type="text" name="name" class="ig_es_form_field_name" placeholder="" value="" required="required" /></label></div><div class="es-field-wrap"><label>Email*<br /><input class="es_required_field es_txt_email ig_es_form_field_email" type="email" name="email" value="" placeholder="" required="required" /></label></div><input type="hidden" name="lists[]" value="1" /><input type="hidden" name="form_id" value="3" />
				<input type="hidden" name="es_email_page" value="1735"/>
				<input type="hidden" name="es_email_page_url" value="https://www.middlewareinventory.com/blog/ansible-ssh-key-exchange/"/>
				<input type="hidden" name="status" value="Unconfirmed"/>
				<input type="hidden" name="es-subscribe" id="es-subscribe" value="7aebfb1a9b"/>
				<label style="position:absolute;top:-99999px;left:-99999px;z-index:-99;"><input type="email" name="es_hp_email" class="es_required_field" tabindex="-1" autocomplete="-1" value=""/></label>
								<input type="submit" name="submit" class="es_subscription_form_submit es_submit_button es_textbox_button" id="es_subscription_form_submit_1670576714" value="Subscribe"/>

				
				<span class="es_spinner_image" id="spinner-image"><img src="https://www.middlewareinventory.com/wp-content/plugins/email-subscribers/lite/public/images/spinner.gif" alt="Loading"/></span>

			</form>

			<span class="es_subscription_message" id="es_subscription_message_1670576714"></span>
		</div>

		
</div>
<hr>
<p>The post <a rel="nofollow" href="https://www.middlewareinventory.com/blog/ansible-ssh-key-exchange/">Ansible SSH Key transfer from one host to another &#8211; local and remote</a> appeared first on <a rel="nofollow" href="https://www.middlewareinventory.com">Middleware Inventory</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.middlewareinventory.com/blog/ansible-ssh-key-exchange/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>

<!--
Performance optimized by W3 Total Cache. Learn more: https://www.boldgrid.com/w3-total-cache/

Page Caching using disk: enhanced (Page is feed) 
Minified using disk

Served from: www.middlewareinventory.com @ 2022-12-09 14:35:14 by W3 Total Cache
-->