{"id":7278,"date":"2021-09-12T00:55:07","date_gmt":"2021-09-11T19:25:07","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=7278"},"modified":"2022-11-11T00:48:12","modified_gmt":"2022-11-10T19:18:12","slug":"terraform-aws-ec2-user_data-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/","title":{"rendered":"Terraform AWS EC2 user_data example &#8211; aws_instance| Devops Junction"},"content":{"rendered":"<p>In this article we are going to see how to create AWS EC2 instance with user_data.<\/p>\n<p>While launching AWS Ec2 instances we might want to add some customizations to it like adding a key and executing few shell commands or scripts to make sure they are ready to launch your application.<\/p>\n<p>We can do this level of customization during the image build time with packer as well.<\/p>\n<p>But with terraform we can do it on the go and have different set of user_data for different set of machines you are launching with help of <code>Loop<\/code> or <code>conditional<\/code> statements<\/p>\n<p>If you are new to Terraform and trying to work with AWS EC2 for the first time.<\/p>\n<p>please start with our <a href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\">Terraform AWS Basic Introduction<\/a> article and come back here<\/p>\n<p>To the objective now.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf.png\"><img class=\"post-img alignnone wp-image-7283 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf.png\" alt=\"Terraform EC2 user_data example\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf.png 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf-300x213.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf-1024x726.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf-768x545.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf-1536x1090.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf-90x65.png 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<h2><\/h2>\n<h2>Terraform script to create EC2 with user_data<\/h2>\n<p>Here is the terraform configuration file with <code>user_data<\/code> field<\/p>\n<p>Before using the script. please make sure you update the following elements on the script.<\/p>\n<ul>\n<li>aws region<\/li>\n<li>aws profile ( if removed default would be taken)<\/li>\n<li>changing the prefix default value to what you desire<\/li>\n<li>change the ami ID<\/li>\n<li>instance_type<\/li>\n<li>count ( no of instances to launch)<\/li>\n<li>security group id<\/li>\n<li>user_data ( replace it with whatever commands or script you want to execute)<\/li>\n<li>subnet_id<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\">provider \"aws\" {\r\n  region = \"us-east-1\"\r\n  profile = \"dev\"\r\n}\r\n\r\nvariable \"prefix\" {\r\n  description = \"servername prefix\"\r\n  default = \"gritfyapp\"\r\n}\r\n\r\nresource \"aws_instance\" \"web\" {\r\n  ami           = \"ami-007a18d38016a0f4e\"\r\n  instance_type = \"t3.medium\"\r\n  count = 1\r\n  vpc_security_group_ids = [\r\n    \"sg-0d8bdc71aee9f\"\r\n  ]\r\n  user_data = &lt;&lt;EOF\r\n#!\/bin\/bash\r\necho \"Copying the SSH Key Of Jenkins to the server\"\r\necho -e \"#Jenkins\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB*******************F\/SNZPMT4Qm\/RVgBbIhG8VsoDhGM0tgIzWyTaNxDPSDx\/yzJ8FQwCKOH6YR3RugLvTU+jDKvI8BWOnMM5cgrbfKbBssUyJSdWI86py4bi05A3X6O5+6xS6IvQbZwlbJiu\/DbgAcvGLiq1mDi77O+DvU22RNgCB9hGddryWc3nTDOMyVaex5EdfvgxEli1DAM2YYr\/DdxVvdzkrP\/1fol6t+XT4FeQyW\/KcQuRA53qG0aSYlSN\/6NUO3OGuLn jenkins@gritfy.com\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAPlhbcDQ06FO8euMxVvsglV4gqhD0v1l8h+bk\/X+eJWqQMHZ0CXzsywTe+32zdu9JydbwiQiMIlDwFy0nsyX+quzLupYejrAtFFOKoFSzNB3ng69KSV+M6kUZdXHfP9PjYt5wZfOW0h\/W9+2Oz406UjpeaW5t9XPftx784nLsocR3d7mosIgLMXkFLijOfJknhEKWxMmvkwV15fcuPfpRhvJkFDCmpFMBTaOwE2rDuj22r0Z4bI78CdtZgTSB5eK1YebOtEUllB+pwoMA40cNgnivd ubuntu@gritfy.com\" &gt;&gt; \/home\/ubuntu\/.ssh\/authorized_keys\r\n\r\necho \"Mount NFS\"\r\nsudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-******.efs.us-east-1.amazonaws.com:\/ \/sharedrive\r\n\r\necho \"Installing NodeExporter\"\r\nmkdir \/home\/ubuntu\/node_exporter\r\ncd \/home\/ubuntu\/node_exporter\r\nwget https:\/\/github.com\/prometheus\/node_exporter\/releases\/download\/v1.2.2\/node_exporter-1.2.2.linux-amd64.tar.gz\r\ntar node_exporter-1.2.2.linux-amd64.tar.gz\r\ncd node_exporter-1.2.2.linux-amd64\r\n.\/node_exporter &amp;\r\n\r\necho \"Changing Hostname\"\r\nhostname \"${var.prefix}${count.index+1}\"\r\necho \"${var.prefix}${count.index+1}\" &gt; \/etc\/hostname\r\n\r\n\r\n\r\nEOF\r\n  subnet_id = \"subnet-00514b9f4cd6d4\"\r\n  tags = {\r\n    Name = \"${var.prefix}${count.index}\"\r\n  }\r\n}\r\n\r\noutput \"instances\" {\r\n  value       = \"${aws_instance.web.*.private_ip}\"\r\n  description = \"PrivateIP address details\"\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>As part of <code>user_data<\/code> we are doing the following tasks<\/p>\n<ul>\n<li>Copying few SSH public keys. prefarably Jenkins for Deployment automation<\/li>\n<li>Mounting an NFS ( this can be done with \/etc\/fstab but still )<\/li>\n<li>Installing Node Exporter for monitoring<\/li>\n<li>Changing the hostname based on the count index ( gritfyapp1, gritfyapp2 etc)<\/li>\n<\/ul>\n<p>Since the count is set to <code>1<\/code> here we would be creating only one instance with the hostname <code>gritfyapp1<\/code><\/p>\n<p>&nbsp;<\/p>\n<h2>Terraform Planning Phase<\/h2>\n<p>Now do Terraform Plan with the <code>-out<\/code> file and I always recommend to write the plan as a out file and use it to make sure what you see is what you get.<\/p>\n<p>here my out file name is <code>tfplandev.out<\/code><\/p>\n<blockquote><p>Be aware, If you are choosing the wrong out file by mistake during <code>terraform apply<\/code>.<\/p>\n<p>you might probably change the existing infrastrucuture associated with that out file ( accidently).<\/p>\n<p>so always make sure you are using the right out file.<\/p>\n<p>With Great Automation comes Great Risk. Be mindful.<\/p><\/blockquote>\n<p>With Terraform. You can create an Entire Infra in seconds and destroy it too.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\">\u21d2 terraform plan -out tfplandev.out\r\n\r\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # aws_instance.web[0] will be created\r\n  + resource \"aws_instance\" \"web\" {\r\n      + ami                                  = \"ami-007a18d38016a0f4e\"\r\n      + arn                                  = (known after apply)\r\n      + associate_public_ip_address          = (known after apply)\r\n      + availability_zone                    = (known after apply)\r\n      + cpu_core_count                       = (known after apply)\r\n      + cpu_threads_per_core                 = (known after apply)\r\n      + disable_api_termination              = (known after apply)\r\n      + ebs_optimized                        = (known after apply)\r\n      + get_password_data                    = false\r\n      + host_id                              = (known after apply)\r\n      + id                                   = (known after apply)\r\n      + instance_initiated_shutdown_behavior = (known after apply)\r\n      + instance_state                       = (known after apply)\r\n      + instance_type                        = \"t3.medium\"\r\n      + ipv6_address_count                   = (known after apply)\r\n      + ipv6_addresses                       = (known after apply)\r\n      + key_name                             = (known after apply)\r\n      + monitoring                           = (known after apply)\r\n      + outpost_arn                          = (known after apply)\r\n      + password_data                        = (known after apply)\r\n      + placement_group                      = (known after apply)\r\n      + primary_network_interface_id         = (known after apply)\r\n      + private_dns                          = (known after apply)\r\n      + private_ip                           = (known after apply)\r\n      + public_dns                           = (known after apply)\r\n      + public_ip                            = (known after apply)\r\n      + secondary_private_ips                = (known after apply)\r\n      + security_groups                      = (known after apply)\r\n      + source_dest_check                    = true\r\n      + subnet_id                            = \"subnet-00514f1f4cd6d4\"\r\n      + tags                                 = {\r\n          + \"Name\" = \"gritfyapp0\"\r\n        }\r\n      + tags_all                             = {\r\n          + \"Name\" = \"gritfyapp0\"\r\n        }\r\n      + tenancy                              = (known after apply)\r\n      + user_data                            = \"18c4585c1e3bc1876dcc291a16e0d6933761dbc2\"\r\n      + user_data_base64                     = (known after apply)\r\n      + vpc_security_group_ids               = [\r\n          + \"sg-0d8bd6e7baee9f\",\r\n        ]\r\n\r\n      + capacity_reservation_specification {\r\n          + capacity_reservation_preference = (known after apply)\r\n\r\n          + capacity_reservation_target {\r\n              + capacity_reservation_id = (known after apply)\r\n            }\r\n        }\r\n\r\n      + ebs_block_device {\r\n          + delete_on_termination = (known after apply)\r\n          + device_name           = (known after apply)\r\n          + encrypted             = (known after apply)\r\n          + iops                  = (known after apply)\r\n          + kms_key_id            = (known after apply)\r\n          + snapshot_id           = (known after apply)\r\n          + tags                  = (known after apply)\r\n          + throughput            = (known after apply)\r\n          + volume_id             = (known after apply)\r\n          + volume_size           = (known after apply)\r\n          + volume_type           = (known after apply)\r\n        }\r\n\r\n      + enclave_options {\r\n          + enabled = (known after apply)\r\n        }\r\n\r\n      + ephemeral_block_device {\r\n          + device_name  = (known after apply)\r\n          + no_device    = (known after apply)\r\n          + virtual_name = (known after apply)\r\n        }\r\n\r\n      + metadata_options {\r\n          + http_endpoint               = (known after apply)\r\n          + http_put_response_hop_limit = (known after apply)\r\n          + http_tokens                 = (known after apply)\r\n        }\r\n\r\n      + network_interface {\r\n          + delete_on_termination = (known after apply)\r\n          + device_index          = (known after apply)\r\n          + network_interface_id  = (known after apply)\r\n        }\r\n\r\n      + root_block_device {\r\n          + delete_on_termination = (known after apply)\r\n          + device_name           = (known after apply)\r\n          + encrypted             = (known after apply)\r\n          + iops                  = (known after apply)\r\n          + kms_key_id            = (known after apply)\r\n          + tags                  = (known after apply)\r\n          + throughput            = (known after apply)\r\n          + volume_id             = (known after apply)\r\n          + volume_size           = (known after apply)\r\n          + volume_type           = (known after apply)\r\n        }\r\n    }\r\n\r\nPlan: 1 to add, 0 to change, 0 to destroy.\r\n\r\nChanges to Outputs:\r\n  + instances = [\r\n      + (known after apply),\r\n    ]\r\n\r\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n\r\nSaved the plan to: tfplandev.out\r\n\r\nTo perform exactly these actions, run the following command to apply:\r\n    terraform apply \"tfplandev.out\"<\/pre>\n<p>&nbsp;<\/p>\n<h2>Terraform Applying Phase<\/h2>\n<p>Now do <code>Terraform apply \"outfilename\"<\/code> with the right out file you have created in the previoius step<\/p>\n<p>As mentioned earlier, please make sure you are using the right out file. One single manual error with Terraform can cost you a production downtime<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">\u21d2 terraform apply \"tfplandev.out\"\r\naws_instance.web[0]: Creating...\r\naws_instance.web[0]: Still creating... [10s elapsed]\r\naws_instance.web[0]: Still creating... [20s elapsed]\r\naws_instance.web[0]: Creation complete after 23s [id=i-07af45d2a5eafa]\r\n\r\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\r\n\r\nOutputs:\r\n\r\ninstances = [\r\n  \"10.0.4.142\",\r\n]<\/pre>\n<p>Now if you login to the server you can see the hostname set to <code>gritfyapp1<\/code> with\u00a0 all other three tasks completed.<\/p>\n<p>installation of node exporter, addition of key into authorized_keys and EFS mount.<\/p>\n<p>&nbsp;<\/p>\n<h2>Validate the changes specified on user_data<\/h2>\n<p>Refer the following screen shot where I have logged in to the server to validate if all my user_data tasks are executed.<\/p>\n<p>If I see the hostname changed as I login, that itself is a clear sign the user_data has worked fine.<\/p>\n<p>Just in case if any one of the commands are failed and you want to debug.<\/p>\n<p>All the <code>echo<\/code> statements we have given in <code>user_data<\/code>\u00a0 along with any error while applying the user_data would be captured on the System boot log.<\/p>\n<p>In case of ubuntu it is <code>\/var\/log\/syslog<\/code><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-scaled.jpg\"><img class=\"post-img alignnone wp-image-7280 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-scaled.jpg\" alt=\"terraform ec2 user_data example\" width=\"2560\" height=\"1011\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-scaled.jpg 2560w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-300x118.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-1024x404.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-768x303.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-1536x607.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-12-at-12.18.50-AM-2048x809.jpg 2048w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Using Shell script in Terraform user_data<\/h2>\n<p>In the previous example we have seen how to use inline shell commands with aws_instance user_data but to keep things cleaner It is advised to use shell script instead of commands and EOF.<\/p>\n<p>So we present you an example on how to pass Shell script as a user_data while creating EC2 instance<\/p>\n<p>The same Terraform script we have written earlier can be written like this and all the Shell commands we had between EOF be saved into a file, in our case <code>init.sh<\/code><\/p>\n<p>All those lines are now being replaced with a single line.<\/p>\n<pre>user_data = \"${file(\"init.sh\")}\"<\/pre>\n<p>Here is the cleaner version of the same Terraform script we used before.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\">provider \"aws\" {\r\n  region = \"us-east-1\"\r\n  profile = \"dev\"\r\n}\r\nvariable \"prefix\" {\r\n  description = \"servername prefix\"\r\n  default = \"gritfyapp\"\r\n}\r\nresource \"aws_instance\" \"web\" {\r\n  ami           = \"ami-007a18d38016a0f4e\"\r\n  instance_type = \"t3.medium\"\r\n  count = 1\r\n  vpc_security_group_ids = [\r\n    \"sg-0d8bdc71aee9f\"\r\n  ]\r\n  user_data = \"${file(\"init.sh\")}\"\r\n  subnet_id = \"subnet-00514b9f4cd6d4\"\r\n  tags = {\r\n    Name = \"${var.prefix}${count.index}\"\r\n  }\r\n}\r\noutput \"instances\" {\r\n  value       = \"${aws_instance.web.*.private_ip}\"\r\n  description = \"PrivateIP address details\"\r\n}<\/pre>\n<p>Here is the content of the <code>init.sh<\/code> file<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">#!\/bin\/bash\r\necho \"Copying the SSH Key Of Jenkins to the server\"\r\necho -e \"#Jenkins\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB*******************F\/SNZPMT4Qm\/RVgBbIhG8VsoDhGM0tgIzWyTaNxDPSDx\/yzJ8FQwCKOH6YR3RugLvTU+jDKvI8BWOnMM5cgrbfKbBssUyJSdWI86py4bi05A3X6O5+6xS6IvQbZwlbJiu\/DbgAcvGLiq1mDi77O+DvU22RNgCB9hGddryWc3nTDOMyVaex5EdfvgxEli1DAM2YYr\/DdxVvdzkrP\/1fol6t+XT4FeQyW\/KcQuRA53qG0aSYlSN\/6NUO3OGuLn jenkins@gritfy.com\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAPlhbcDQ06FO8euMxVvsglV4gqhD0v1l8h+bk\/X+eJWqQMHZ0CXzsywTe+32zdu9JydbwiQiMIlDwFy0nsyX+quzLupYejrAtFFOKoFSzNB3ng69KSV+M6kUZdXHfP9PjYt5wZfOW0h\/W9+2Oz406UjpeaW5t9XPftx784nLsocR3d7mosIgLMXkFLijOfJknhEKWxMmvkwV15fcuPfpRhvJkFDCmpFMBTaOwE2rDuj22r0Z4bI78CdtZgTSB5eK1YebOtEUllB+pwoMA40cNgnivd ubuntu@gritfy.com\" &gt;&gt; \/home\/ubuntu\/.ssh\/authorized_keys\r\n\r\necho \"Mount NFS\"\r\nsudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-******.efs.us-east-1.amazonaws.com:\/ \/sharedrive\r\n\r\necho \"Installing NodeExporter\"\r\nmkdir \/home\/ubuntu\/node_exporter\r\n\r\ncd \/home\/ubuntu\/node_exporter\r\n\r\nwget https:\/\/github.com\/prometheus\/node_exporter\/releases\/download\/v1.2.2\/node_exporter-1.2.2.linux-amd64.tar.gz\r\n\r\ntar node_exporter-1.2.2.linux-amd64.tar.gz\r\n\r\ncd node_exporter-1.2.2.linux-amd64\r\n\r\n.\/node_exporter &amp;\r\n\r\necho \"Changing Hostname\"\r\nhostname \"${var.prefix}${count.index+1}\"\r\necho \"${var.prefix}${count.index+1}\" &gt; \/etc\/hostname<\/pre>\n<p>While referring the shell script with in <code>file<\/code>\u00a0 the path is relative.\u00a0 Simple <code>init.sh<\/code> means that the tf and the sh files are present on the same directory level.<\/p>\n<p>&nbsp;<\/p>\n<h2>Troubleshooting user_data related issues in AWS &#8211; Log files<\/h2>\n<p>Since we are talking about AWS user_data here. we need to know some basics on how AWS EC2 interpret the user_data scripts<\/p>\n<p>Here are some pointers to remember<\/p>\n<ul>\n<li>User data shell scripts must start with the Shebang <code class=\"code\">#!<\/code>\u00a0characters and the path to the interpreter you want to read the script (commonly\u00a0<b>\/bin\/bash)<\/b>.<\/li>\n<li>Scripts entered as user data are run as the\u00a0<code class=\"code\">root<\/code> user, so no need to use the <b>sudo<\/b> command in the init script.<\/li>\n<li>When a user data script is processed, it is copied to and run from\u00a0<code>\/var\/lib\/cloud\/instances\/<code class=\"replaceable\">instance-id<\/code>\/<\/code>. The script is not deleted after it is run and can be found in this directory with the name <code>user-data.txt<\/code> So to check if your shell script made to the server refer this directory and the file.<\/li>\n<li>The cloud-init output log file (<code>\/var\/log\/cloud-init-output.log<\/code>) captures console output of your user_data shell script. to know how your user_data shell script was executed and its output check this file.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p>Hope this helps. If you have any questions or need help. please let us know in comment section<\/p>\n<p>&nbsp;<\/p>\n<h2>Safeguard your State files with Terraform Cloud ( Additional )<\/h2>\n<p>We have an article that talks about how to store your TF state files in Terraform cloud securely. Take a look<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"Qem7q1KF2W\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/store-terraform-state-terraform-cloud\/\">Store terraform state file on Terraform cloud Remote | Devops Junction<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Store terraform state file on Terraform cloud Remote | Devops Junction&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/store-terraform-state-terraform-cloud\/embed\/#?secret=Qem7q1KF2W\" data-secret=\"Qem7q1KF2W\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>Cheers<br \/>\nSarav<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577314\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"7278\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577314\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577314\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>In this article we are going to see how to create AWS EC2 instance with user_data. While launching AWS Ec2 instances we might want to add some customizations to it like adding a key and executing few shell commands or scripts to make sure they are ready to launch your[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":7283,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[454,233],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Terraform AWS EC2 user_data example - aws_instance| Devops Junction<\/title>\n<meta name=\"description\" content=\"Terraform EC2 user_data example. How to run custom shell scripts and commands during the launch of EC2 instance with Terraform user data example.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Terraform AWS EC2 user_data example - aws_instance| Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Terraform EC2 user_data example. How to run custom shell scripts and commands during the launch of EC2 instance with Terraform user data example.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2021-09-11T19:25:07+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:18:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/user_data_tf.png\",\"width\":1748,\"height\":1240,\"caption\":\"Terraform EC2 user_data example\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\",\"name\":\"Terraform AWS EC2 user_data example - aws_instance| Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#primaryimage\"},\"datePublished\":\"2021-09-11T19:25:07+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"description\":\"Terraform EC2 user_data example. How to run custom shell scripts and commands during the launch of EC2 instance with Terraform user data example.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Terraform AWS EC2 user_data example &#8211; aws_instance| Devops Junction\",\"datePublished\":\"2021-09-11T19:25:07+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#primaryimage\"},\"articleSection\":\"DevOps_Beginner,Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7278"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=7278"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7278\/revisions"}],"predecessor-version":[{"id":7696,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7278\/revisions\/7696"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/7283"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=7278"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=7278"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=7278"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}