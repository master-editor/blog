{"id":6743,"date":"2021-02-13T03:50:57","date_gmt":"2021-02-12T22:20:57","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=6743"},"modified":"2022-05-20T21:43:11","modified_gmt":"2022-05-20T16:13:11","slug":"create-linux-vm-in-gcp-with-terraform-remote-exec","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/","title":{"rendered":"Terraform google_compute_instance Example &#8211; with Remote Exec"},"content":{"rendered":"<p>In this article, <strong>we are going to see how to create a Linux Virtual machine and provision it using the Terraform remote execution<\/strong> strategy.<\/p>\n<p>We are going to be using SSH method to connect to the Virtual machine and provision it on the go by executing some startup Shell script.<\/p>\n<p>We would also be discussing how to copy a file to the Linux machine during the creation and use it for provisioning.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image.png\"><img class=\"alignnone size-full wp-image-6782\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image.png\" alt=\"gcp vm terraform\" width=\"1000\" height=\"416\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image.png 1000w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image-300x125.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image-768x319.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" \/><\/a><\/p>\n<p>This would give you an idea of how to install software packages or products during the server creation and get it ready.<\/p>\n<p>In this article, we will be using some Shell commands and Shell scripts as our provisioner. Our next article is on the making with Ansible playbook.<\/p>\n<p>Stay connected and Let&#8217;s jump right into the objective.<\/p>\n<p>If you have used GCP, you know that google cloud (gcp) <code>gcloud<\/code> CLI\u00a0 is indispensable for administration and management.<\/p>\n<p>So I presume that you have <code>gcloud<\/code> already installed and your profile is set up. If not, please <a href=\"https:\/\/cloud.google.com\/sdk\/docs\/install\">read the article<\/a> on how to set up <code>gcloud<\/code> before proceeding further.<\/p>\n<p>For those of you wondering what to do by having a <code>google-key.json<\/code> file.<\/p>\n<p>You can read this article on <a href=\"https:\/\/cloud.google.com\/sdk\/docs\/authorizing\">how to init gcloud with JSON<\/a><\/p>\n<p>&nbsp;<\/p>\n<h2><\/h2>\n<h2>Connecting to GCP with Gcloud<\/h2>\n<p>Let&#8217;s create a fresh google cloud project<\/p>\n<pre>$ gcloud projects create devopsjunction\r\nCreate in progress for [https:\/\/cloudresourcemanager.googleapis.com\/v1\/projects\/devopsjunction].\r\nWaiting for [operations\/cp.8362603842155049958] to finish...done.\r\nEnabling service [cloudapis.googleapis.com] on project [devopsjunction]...\r\nOperation \"operations\/acf.p2-187067084280-818341eb-70b2-47c1-8ad2-253a172c23e1\" finished successfully.<\/pre>\n<p>Set the project<\/p>\n<pre>$ gcloud config set project devopsjunction<\/pre>\n<p>Create a service account<\/p>\n<pre>$ gcloud iam service-accounts create dj-serviceaccount &#8211; description=\"service account for terraform\" &#8211; display-name=\"terraform_service_account\"\r\n<\/pre>\n<p>To verify if the service account has been created successfully. use the following command to list the service-accounts in the current project.<\/p>\n<pre>$ gcloud iam service-accounts list<\/pre>\n<p>Next step is to create google key JSON file for this service account and this would help in connecting the terraform with Google Cloud.<\/p>\n<pre>$ gcloud iam service-accounts keys create ~\/google-key.json &#8211; iam-account dj-serviceaccount@devopsjunction.iam.gserviceaccount.com\r\n\r\ncreated key [a3ac3ab7eaf76d0355bcd12b1060100a47753043] of type [json] as [\/Users\/sarav\/google-key.json] for [dj-serviceaccount@devopsjunction.iam.gserviceaccount.com]<\/pre>\n<p>As you can see in the preceding snippet, it would create a new key file named <code>google-key.json<\/code><\/p>\n<blockquote><p>\u00a0this JSON file is going to help us authenticate with Google cloud and enable us to integrate any automation tools like Terraform, Ansible to the GCP.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<h2>Enabling Compute Engine API<\/h2>\n<p>Before we proceed to create a Virtual machine. we must do some prerequisite<\/p>\n<p>We need to enable <code>Compute Engine API<\/code>\u00a0 by visiting the APIs in Google Cloud console<\/p>\n<p>Google Cloud has lot of APIs and they help us in managing and automating the GCP infrastructure.<\/p>\n<p>For compute Engine.<\/p>\n<p>you can use this URL and replace the project ID field with your valid project ID. it would directly take you there<\/p>\n<pre>https:\/\/console.developers.google.com\/apis\/library\/compute.googleapis.com?project=&lt;your project id&gt;<\/pre>\n<p>It may ask you to set the billing account. (or) choose the billing account<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Creating Terraform configuration files<\/h2>\n<p>Once all done with Gcloud. Our next task is to create the terraform configuration files.<\/p>\n<p>Our terraform manifest is going to create few resources for us, I have listed them here.<\/p>\n<ul>\n<li><strong>google_compute_firewall | firewall<\/strong> &#8211; this is to allow port 22 for SSH to the public ( set it to single IP for security purposes)<\/li>\n<li><strong>google_compute_firewall | webserverrule<\/strong> &#8211; this is to create a firewall rule to allow port 80 and 443 required by NGINX<\/li>\n<li><strong>google_compute_address | static<\/strong> &#8211; this is to reserve Static External IP for the VM we are about to create<\/li>\n<li><strong>google_compute_instance | dev<\/strong> &#8211; this is where we are creating a virtual machine<\/li>\n<\/ul>\n<p>These are all <code>terraform<\/code> resources, to know more about each of them you can use the <a href=\"https:\/\/registry.terraform.io\/\">terraform registry.<\/a><\/p>\n<p>Here is the main terraform configuration file with the aforementioned resources.<\/p>\n<p>Copy the following content and save in the name of <code>main.tf<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">provider \"google\" {\r\n  project = var.project\r\n  region  = var.region\r\n}\r\n\r\nresource \"google_compute_firewall\" \"firewall\" {\r\n  name    = \"gritfy-firewall-externalssh\"\r\n  network = \"default\"\r\n\r\n  allow {\r\n    protocol = \"tcp\"\r\n    ports    = [\"22\"]\r\n  }\r\n\r\n  source_ranges = [\"0.0.0.0\/0\"] # Not So Secure. Limit the Source Range\r\n  target_tags   = [\"externalssh\"]\r\n}\r\n\r\nresource \"google_compute_firewall\" \"webserverrule\" {\r\n  name    = \"gritfy-webserver\"\r\n  network = \"default\"\r\n\r\n  allow {\r\n    protocol = \"tcp\"\r\n    ports    = [\"80\",\"443\"]\r\n  }\r\n\r\n  source_ranges = [\"0.0.0.0\/0\"] # Not So Secure. Limit the Source Range\r\n  target_tags   = [\"webserver\"]\r\n}\r\n\r\n# We create a public IP address for our google compute instance to utilize\r\nresource \"google_compute_address\" \"static\" {\r\n  name = \"vm-public-address\"\r\n  project = var.project\r\n  region = var.region\r\n  depends_on = [ google_compute_firewall.firewall ]\r\n}\r\n\r\n\r\nresource \"google_compute_instance\" \"dev\" {\r\n  name         = \"devserver\"\r\n  machine_type = \"f1-micro\"\r\n  zone         = \"${var.region}-a\"\r\n  tags         = [\"externalssh\",\"webserver\"]\r\n\r\n  boot_disk {\r\n    initialize_params {\r\n      image = \"centos-cloud\/centos-7\"\r\n    }\r\n  }\r\n\r\n  network_interface {\r\n    network = \"default\"\r\n\r\n    access_config {\r\n      nat_ip = google_compute_address.static.address\r\n    }\r\n  }\r\n\r\n  provisioner \"remote-exec\" {\r\n    connection {\r\n      host        = google_compute_address.static.address\r\n      type        = \"ssh\"\r\n      user        = var.user\r\n      timeout     = \"500s\"\r\n      private_key = file(var.privatekeypath)\r\n    }\r\n\r\n    inline = [\r\n      \"sudo yum -y install epel-release\",\r\n      \"sudo yum -y install nginx\",\r\n      \"sudo nginx -v\",\r\n    ]\r\n  }\r\n\r\n  # Ensure firewall rule is provisioned before server, so that SSH doesn't fail.\r\n  depends_on = [ google_compute_firewall.firewall, google_compute_firewall.webserverrule ]\r\n\r\n  service_account {\r\n    email  = var.email\r\n    scopes = [\"compute-ro\"]\r\n  }\r\n\r\n  metadata = {\r\n    ssh-keys = \"${var.user}:${file(var.publickeypath)}\"\r\n  }\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>In terraform variable declaration is necessary and all the variables must be declared.<\/p>\n<p>Copy the following content and save in the name of <code>variables.tf<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">variable \"region\" {\r\n    type = string\r\n    default = \"us-central\"\r\n}\r\nvariable \"project\" {\r\n    type = string\r\n}\r\n\r\nvariable \"user\" {\r\n    type = string\r\n}\r\n\r\nvariable \"email\" {\r\n    type = string\r\n}\r\nvariable \"privatekeypath\" {\r\n    type = string\r\n    default = \"~\/.ssh\/id_rsa\"\r\n}\r\n\r\nvariable \"publickeypath\" {\r\n    type = string\r\n    default = \"~\/.ssh\/id_rsa.pub\"\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>while this variable declaration can be done in the main.tf file itself.\u00a0 It is always a good practice to maintain a dedicated file, matching their purpose.<\/p>\n<ul>\n<li>\u00a0Variable declaration &#8211; <strong>variables.tf<\/strong><\/li>\n<li>\u00a0Output specification &#8211; <strong>outputs.tf<\/strong><\/li>\n<li>\u00a0Provider related configuration &#8211; <strong>providers.tf<\/strong><\/li>\n<li>\u00a0Providers and their version dependencies &#8211; <strong>versions.tf<\/strong><\/li>\n<\/ul>\n<p>There is a one more file we need to create. that is <code>terraform.tfvars<\/code> file<\/p>\n<p>This is to give values to the variables we have declared in the variables.tf file<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">project = \"devopsjunction\"\r\nregion = \"us-central1\"\r\nuser = \"middlewareinvetory_gmail_com\" # this should match the username set by the OS Login\r\nemail = \"dj-serviceaccount@devopsjunction.iam.gserviceaccount.com\"\r\n<\/pre>\n<p>You might notice that we are not defining values for all the variables ,we have declared in the <code>variables.tf<\/code> file.<\/p>\n<p>It is because some of these variables have their default values configured in the <code>variables.tf<\/code> file itself using the <code>default<\/code> block.<\/p>\n<p>In fact, there are more ways to assign values to variable. as shown in the following picture<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-10.48.59-PM.png\"><img class=\"alignnone size-full wp-image-6769\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-10.48.59-PM.png\" alt=\"\" width=\"800\" height=\"380\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-10.48.59-PM.png 800w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-10.48.59-PM-300x143.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-10.48.59-PM-768x365.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>back to the topic,\u00a0 Now we have created all the Terraform configuration files required for us to create our Google compute engine &#8211; Virtual machine.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Decoding the Terraform manifest file main.tf<\/h2>\n<p>Before we proceed to create the Infrastrcuture, I must explain what is configured and what should be the expected result.<\/p>\n<p>Let us review each block in the <code>main.tf<\/code> file<\/p>\n<h3>provider block &#8211; Start the gcp environment<\/h3>\n<p>this is to initialize the provider <code>google<\/code> by mentioning our project name and the region. we already did that in <code>tfvars<\/code> file<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">provider \"google\" {\r\n  project = var.project\r\n  region  = var.region\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<h3>compute firewall block &#8211; Allow SSH and HTTP[S] connections<\/h3>\n<p>we are creating two firewall rules here.<\/p>\n<ul>\n<li>The Former is to allow SSH incoming connections from anyone\/public.<\/li>\n<li>The Latter is to allow HTTP\/HTTPS requests from anyone\/public<\/li>\n<\/ul>\n<p>This is done by setting\u00a0 the <code>source_ranges<\/code> to any CIDR range <code>0.0.0.0\/0<\/code><\/p>\n<p>you should consider using very specific IP range for security reasons.<\/p>\n<p>If you want to allow only your computer not others. you can set your public IP as a value for the <code>source_ranges<\/code>\u00a0 like this <code>142.78.29.12\/32<\/code><\/p>\n<p>You can find your public IP using this URL <a href=\"https:\/\/checkip.amazonaws.com\"><code>https:\/\/checkip.amazonaws.com<\/code><\/a><\/p>\n<p>the <code>\/32<\/code> is to specify a single IP in a CIDR range. so only your public IP would be considered<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">resource \"google_compute_firewall\" \"firewall\" {\r\n  name    = \"gritfy-firewall-externalssh\"\r\n  network = \"default\"\r\n\r\n  allow {\r\n    protocol = \"tcp\"\r\n    ports    = [\"22\"]\r\n  }\r\n\r\n  source_ranges = [\"0.0.0.0\/0\"] # Not So Secure. Limit the Source Range\r\n  target_tags   = [\"externalssh\"]\r\n}\r\n\r\nresource \"google_compute_firewall\" \"webserverrule\" {\r\n  name    = \"gritfy-webserver\"\r\n  network = \"default\"\r\n\r\n  allow {\r\n    protocol = \"tcp\"\r\n    ports    = [\"80\",\"443\"]\r\n  }\r\n\r\n  source_ranges = [\"0.0.0.0\/0\"] # Not So Secure. Limit the Source Range\r\n  target_tags   = [\"webserver\"]\r\n}<\/pre>\n<p>You might create multiple Virtual machines but how do you set this rule only for this instance or set of instances.<\/p>\n<p><span style=\"color: #003366;\"><strong>target_tags<\/strong><\/span><\/p>\n<p>Google provide a feature known as <code>target_tags<\/code>\u00a0 which helps us to map the VM to the firewall rule.<\/p>\n<p>this rule would apply for the virtual machines which has the same tag as mentioned in the <code>target_tags<\/code><\/p>\n<p>Hope the following image illustrate this right.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-11.33.33-PM.png\"><img class=\"alignnone size-full wp-image-6770\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-11.33.33-PM.png\" alt=\"\" width=\"759\" height=\"395\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-11.33.33-PM.png 759w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/Screenshot-2021-02-07-at-11.33.33-PM-300x156.png 300w\" sizes=\"(max-width: 759px) 100vw, 759px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>compute address block &#8211; Reserving public IP<\/h3>\n<p>In this block, we are reserving a public IP for our instance.<\/p>\n<p>Though, this is not necessary and GCP would auto assign some public IP automatically. we need this address for our provisioning.<\/p>\n<p>this IP address would be used for establishing a SSH connection and to run the provisioning scripts like <code>Ansible playbooks<\/code> , <code>Shell scripts<\/code> etc.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">resource \"google_compute_address\" \"static\" {\r\n  name = \"vm-public-address\"\r\n  project = var.project\r\n  region = var.region\r\n  depends_on = [ google_compute_firewall.firewall ]\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<h3>compute instance block &#8211; Creating VM and provision with Shell commands<\/h3>\n<p>So far we were creating supporting resources like firewall and public IP for our instance\/vm.<\/p>\n<p>This is a showstopper where we create the actual instance and configure it.<\/p>\n<p>Since there are lot of components in this block. I will paste the block and add comments inline.<\/p>\n<p>Please follow along and ask if you have any questions over the comments section<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">resource \"google_compute_instance\" \"dev\" {\r\n  name         = \"devserver\" # name of the server\r\n  machine_type = \"f1-micro\" # machine type refer google machine types\r\n  zone         = \"${var.region}-a\" # `a` zone of the selected region in our case us-central-1a\r\n  tags         = [\"externalssh\",\"webserver\"] # selecting the vm instances with tags\r\n\r\n  # to create a startup disk with an Image\/ISO. \r\n  # here we are choosing the CentOS7 image\r\n  boot_disk { \r\n    initialize_params {\r\n      image = \"centos-cloud\/centos-7\"\r\n    }\r\n  }\r\n\r\n  # We can create our own network or use the default one like we did here\r\n  network_interface {\r\n    network = \"default\"\r\n\r\n    # assigning the reserved public IP to this instance\r\n    access_config {\r\n      nat_ip = google_compute_address.static.address\r\n    }\r\n  }\r\n\r\n  # This is copy the the SSH public Key to enable the SSH Key based authentication\r\n  metadata = {\r\n    ssh-keys = \"${var.user}:${file(var.publickeypath)}\"\r\n  }\r\n\r\n  # to connect to the instance after the creation and execute few commands for provisioning\r\n  # here you can execute a custom Shell script or Ansible playbook\r\n  provisioner \"remote-exec\" {\r\n    connection {\r\n      host        = google_compute_address.static.address\r\n      type        = \"ssh\"\r\n      # username of the instance would vary for each account refer the OS Login in GCP documentation\r\n      user        = var.user \r\n      timeout     = \"500s\"\r\n      # private_key being used to connect to the VM. ( the public key was copied earlier using metadata )\r\n      private_key = file(var.privatekeypath)\r\n    }\r\n\r\n    # Commands to be executed as the instance gets ready.\r\n    # installing nginx\r\n    inline = [\r\n      \"sudo yum -y install epel-release\",\r\n      \"sudo yum -y install nginx\",\r\n      \"sudo nginx -v\",\r\n    ]\r\n  }\r\n\r\n  # Ensure firewall rule is provisioned before server, so that SSH doesn't fail.\r\n  depends_on = [ google_compute_firewall.firewall, google_compute_firewall.webserverrule ]\r\n\r\n  # Defining what service account should be used for creating the VM\r\n  service_account {\r\n    email  = var.email\r\n    scopes = [\"compute-ro\"]\r\n  }\r\n\r\n  \r\n}<\/pre>\n<p>So, Now we have all files ready and in place for us to be able to create our infrastructure.<\/p>\n<p>here is the tree structure of my directory. with all three necessary files.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">.\r\n\u251c\u2500\u2500 main.tf\r\n\u251c\u2500\u2500 terraform.tfvars\r\n\u2514\u2500\u2500 variables.tf\r\n<\/pre>\n<p>Before we go ahead and <code>terraform plan<\/code> and <code>terraform apply<\/code> it.<\/p>\n<p>Let us check one more version of this same setup.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Creating VM and provision with Shell script &#8211; Remote Exec<\/h2>\n<p>So far we have seen how to create virtual machine in Google Cloud with terraform and run some inline Shell commands during startup.<\/p>\n<p>What if you want to execute a shell script instead of some inline commands<\/p>\n<p>These are the steps we should do to make it happen.<\/p>\n<ol>\n<li>\u00a0Copy the shell script to the instance<\/li>\n<li>\u00a0Execute the script<\/li>\n<\/ol>\n<p>So we are going to use <code>file<\/code> and <code>remote-exec<\/code> provisioners of Terraform to achieve this.<\/p>\n<p>the <code>file<\/code> provisioner&#8217;s job is to copy the shell script file to the newly created VM.<\/p>\n<p><code>remote-exec<\/code> set the script as executable and start it up using <code>inline<\/code> shell commands.<\/p>\n<p>Here is the modified terraform configuration file with these provisioners<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">provisioner \"file\" {\r\n   \r\n   # source file name on the local machine where you execute terraform plan and apply\r\n   source      = \"startupscript.sh\"\r\n\r\n   # destination is the file location on the newly created instance\r\n   destination = \"\/tmp\/startupscript.sh\"\r\n\r\n   connection {\r\n     host        = google_compute_address.static.address\r\n     type        = \"ssh\"\r\n     # username of the instance would vary for each account refer the OS Login in GCP documentation\r\n     user        = var.user \r\n     timeout     = \"500s\"\r\n     # private_key being used to connect to the VM. ( the public key was copied earlier using metadata )\r\n     private_key = file(var.privatekeypath)\r\n   }\r\n\r\n   # Commands to be executed as the instance gets ready.\r\n   # installing nginx\r\n   inline = [\r\n     \"chmod a+x \/tmp\/startupscript.sh\",\r\n     \"sed -i -e 's\/\\r$\/\/' \/tmp\/startupscript.sh\",\r\n     \"sudo \/tmp\/startupscript.sh\"\r\n   ]\r\n }\r\n\r\n\r\n\r\n # to connect to the instance after the creation and execute few commands for provisioning\r\n # here you can execute a custom Shell script or Ansible playbook\r\n provisioner \"remote-exec\" {\r\n   connection {\r\n     host        = google_compute_address.static.address\r\n     type        = \"ssh\"\r\n     # username of the instance would vary for each account refer the OS Login in GCP documentation\r\n     user        = var.user \r\n     timeout     = \"500s\"\r\n     # private_key being used to connect to the VM. ( the public key was copied earlier using metadata )\r\n     private_key = file(var.privatekeypath)\r\n   }\r\n\r\n   # Commands to be executed as the instance gets ready.\r\n   # set execution permission and start the script\r\n   inline = [\r\n     \"chmod a+x \/tmp\/startupscript.sh\",\r\n     \"sed -i -e 's\/\\r$\/\/' \/tmp\/startupscript.sh\",\r\n     \"sudo \/tmp\/startupscript.sh\"\r\n   ]\r\n }<\/pre>\n<p>as a prerequisite, we should make sure that the source location and the script names are valid<\/p>\n<p>In our example, we are going to keep the script file on the same directory where our terraform configuration files are present<\/p>\n<p>here is the tree structure of my directory.\u00a0 ( new script file added )<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">.\r\n\u251c\u2500\u2500 main.tf\r\n\u251c\u2500\u2500 startupscript.sh\r\n\u251c\u2500\u2500 terraform.tfvars\r\n\u2514\u2500\u2500 variables.tf\r\n<\/pre>\n<p>&nbsp;<\/p>\n<h2>How to download this terraform project from Github.<\/h2>\n<p>I have created a Github repo for this code and committed two branches<\/p>\n<p><a href=\"https:\/\/github.com\/AKSarav\/gcp-vm-remote-execution.git\">https:\/\/github.com\/AKSarav\/gcp-vm-remote-execution.git<\/a><\/p>\n<p>The First approach of having inline commands and remote execution can be cloned from the <code>inline<\/code> branch<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">git clone -b inline https:\/\/github.com\/AKSarav\/gcp-vm-remote-execution.git<\/pre>\n<p>The second approach with Shell script can be downloaded\/cloned using the <code>ShellScript<\/code> branch<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">git clone -b ShellScript https:\/\/github.com\/AKSarav\/gcp-vm-remote-execution.git<\/pre>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this article, we are going to see how to create a Linux Virtual machine and provision it using the Terraform remote execution strategy. We are going to be using SSH method to connect to the Virtual machine and provision it on the go by executing some startup Shell script.[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":6782,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[399,424,233],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Terraform google_compute_instance Example - with Remote Exec | Devops Junction<\/title>\n<meta name=\"description\" content=\"How to create GCP VM with Terraform and remote execute shell script or inline commands to provision the machine and install software products. Terraform GCP remote exec example.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Terraform google_compute_instance Example - with Remote Exec | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"How to create GCP VM with Terraform and remote execute shell script or inline commands to provision the machine and install software products. Terraform GCP remote exec example.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2021-02-12T22:20:57+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-20T16:13:11+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1000\" \/>\n\t<meta property=\"og:image:height\" content=\"416\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/02\/gcp-image.png\",\"width\":1000,\"height\":416,\"caption\":\"gcp vm terraform\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/\",\"name\":\"Terraform google_compute_instance Example - with Remote Exec | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#primaryimage\"},\"datePublished\":\"2021-02-12T22:20:57+00:00\",\"dateModified\":\"2022-05-20T16:13:11+00:00\",\"description\":\"How to create GCP VM with Terraform and remote execute shell script or inline commands to provision the machine and install software products. Terraform GCP remote exec example.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Terraform google_compute_instance Example &#8211; with Remote Exec\",\"datePublished\":\"2021-02-12T22:20:57+00:00\",\"dateModified\":\"2022-05-20T16:13:11+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#primaryimage\"},\"articleSection\":\"Cloud,GCP - GoogleCloud,Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/create-linux-vm-in-gcp-with-terraform-remote-exec\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/6743"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=6743"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/6743\/revisions"}],"predecessor-version":[{"id":8502,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/6743\/revisions\/8502"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/6782"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=6743"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=6743"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=6743"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}