{"id":4087,"date":"2019-07-29T04:01:42","date_gmt":"2019-07-28T22:31:42","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=4087"},"modified":"2022-11-11T00:45:06","modified_gmt":"2022-11-10T19:15:06","slug":"docker-network-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/","title":{"rendered":"Docker network between containers &#8211; Docker Networking Example"},"content":{"rendered":"<p>In this post we are going to see How to establish docker network between containers,<\/p>\n<p>How to Link Docker Containers,<\/p>\n<p>How to Access one Container from Another,<\/p>\n<p>Docker inter-container communication,<\/p>\n<p>How to Connect to Container, etc.<\/p>\n<p>&nbsp;<\/p>\n<p>This post is to answer all that.<\/p>\n<p>So How do we connect a Container from Another Container? How to create communication network between docker containers?<\/p>\n<p>In this post, we are going to see multiple methods on How to Connect two or multiple containers and enable inter container connectivity<\/p>\n<p>&nbsp;<\/p>\n<h2>Three methods to Create Docker network between containers<\/h2>\n<p>These are the methods we are going to be discussing in detail with examples in this post<\/p>\n<ol>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-link-containers\/#method1\"><strong>Docker Link <\/strong><\/a>&#8211; Linking One more Docker Containers<\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-link-containers\/#method2\"><strong>Docker Compose <\/strong><\/a>&#8211; Using Docker Compose create an Auto Created Shared Network<\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-link-containers\/#method3\"><strong>Docker Network<\/strong><\/a> &#8211; Create a Network and Connect the Containers to that network<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h2>Pre Requisites:<\/h2>\n<ol>\n<li>Docker CE and Docker CLI installed<\/li>\n<li>Internet Connectivity<\/li>\n<li>Basic Knowledge on What is Container,\u00a0 What is Dockerfile and How to Create Container<\/li>\n<li>Basic Knowledge on Apache HTTPD web server and Tomcat (Optional)<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h2>The Requirement \/ The Objective:<\/h2>\n<p>In order to demonstrate the various methods to connect docker containers, I need some easily relatable objective.<\/p>\n<p>Consider the following Design of infrastructure with three different technologies running in the container comes together to make an enterprise like web application.<\/p>\n<ul>\n<li>HA Proxy &#8211;\u00a0 Edge Level Load Balancer and Reverse Proxy like F5 Big IP<\/li>\n<li>Node JS &#8211; Java Script based Application Server Framework where the App is hosted<\/li>\n<li>Redis DB &#8211;\u00a0 A Small Key-Value Database to store data<\/li>\n<\/ul>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM.png\"><img class=\"alignnone size-full wp-image-4089\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM.png\" alt=\"docker link containers\" width=\"911\" height=\"507\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM.png 911w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM-300x167.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM-768x427.png 768w\" sizes=\"(max-width: 911px) 100vw, 911px\" \/><\/a><\/p>\n<p>Note*: Though we have different methods to achieve the same docker container intercommunication or connectivity between containers. All these methods do the same thing at the backend which is creating a shared bridged network and attaching these containers to them.<\/p>\n<p>Once the containers are connected on the same network they can communicate to the other container docked to the same network freely by just knowing the name of the other container.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Environment Setup<\/h2>\n<p>we are going to use three technologies in this post and we are going to create our own Docker images by writing <code>Dockerfile<\/code>\u00a0and we also need to write some configuration files for HAProxy and Javascript program files for NodeJS containers.<\/p>\n<p>Refer to the following Directory Structure tree with all necessary files we need for this post.<\/p>\n<p><span style=\"color: #0a508a;\"><span style=\"font-size: 14pt;\">You can simply download the resources required for this post as a <a href=\"https:\/\/github.com\/AKSarav\/haproxy-nodejs-redis\/archive\/master.zip\"><span style=\"color: #e81c78;\">ZIP file<\/span><\/a> or\u00a0 clone my <a href=\"https:\/\/github.com\/AKSarav\/haproxy-nodejs-redis\"><span style=\"color: #e81c78;\">Github<\/span><\/a> Repository<\/span><\/span><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\">\u279c tree haproxy-nodejs-redis\r\nhaproxy-nodejs-redis <span style=\"color: #ffff99;\">## Root Directory<\/span>\r\n\u251c\u2500\u2500 docker-compose\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 docker-compose.yml\r\n\u251c\u2500\u2500 haproxy\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 haproxy.cfg\r\n\u2514\u2500\u2500 nodejs\r\n    \u251c\u2500\u2500 Dockerfile\r\n    \u251c\u2500\u2500 index.js\r\n    \u2514\u2500\u2500 package.json\r\n\r\n3 directories, 6 files<\/pre>\n<p>I presume that you have downloaded these files in the same directory structure. [ It would be helpful to follow along]<\/p>\n<p>Let&#8217;s move on.<\/p>\n<p>&nbsp;<\/p>\n<h2>Create Docker Images Locally<\/h2>\n<p>The first step to create a container is to have the image ready. In our case, we are going to build our images using the Dockerfile<\/p>\n<p>Now let us go and create the Docker Images.<\/p>\n<p>I request you to name these images as same as I do so that you can follow along without getting lost in the middle.<\/p>\n<p>Now go to the root directory of our Directory structure in your terminal [ <em>terminal<\/em> or <em>iterm2<\/em> for mac &amp; <em>Git Bash<\/em> for Windows ]<\/p>\n<p><strong>What is Root Directory<\/strong><\/p>\n<p>If you have downloaded the Directory as zip file the root directory name would be\u00a0<code>haproxy-nodejs-redis-master<\/code>\u00a0 If you have gone with Git clone your root directory name would be\u00a0<code>haproxy-nodejs-redis<\/code><\/p>\n<p>You can refer the tree diagram given in the <em>Environment setup<\/em> section if you still have a question.<\/p>\n<p>Here are the commands that you need to execute in the same order as it is given.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\">cd haproxy-nodejs-redis\r\ncd haproxy\r\ndocker build -t my-haproxy .\r\ncd ..\/nodejs\r\ndocker build -t my-nodejs .<\/pre>\n<p>For better understanding, I have copied the results along with the commands as it was executed in my terminal.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\">\u279c  \/tmp <span style=\"color: #ffff00;\">cd haproxy-nodejs-redis<\/span>\r\n\r\n\u279c  haproxy-nodejs-redis git:(master) <span style=\"color: #ffff00;\">cd haproxy<\/span>\r\n\r\n\u279c  haproxy git:(master) <span style=\"color: #ffff00;\">docker build -t my-haproxy .<\/span>\r\nSending build context to Docker daemon  <span class=\"hljs-number\" style=\"color: #ffc58f;\">3.584<\/span>kB\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">1<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">2<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">FROM<\/span> haproxy\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; 914693575d71<\/span>\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">2<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">2<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">COPY<\/span> haproxy.cfg \/usr\/local\/etc\/haproxy\/haproxy.cfg\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; bcefbfb501fe<\/span>\r\nSuccessfully built bcefbfb501fe\r\nSuccessfully <span class=\"hljs-keyword\" style=\"color: #ebbbff;\">tagged<\/span> my-haproxy:latest\r\n\r\n\u279c  haproxy git:(master) <span style=\"color: #ffff00;\">cd ..\/nodejs<\/span>\r\n\r\n\u279c  nodejs git:(master) <span style=\"color: #ffff00;\">docker build -t my-nodejs .<\/span>\r\nSending build context to Docker daemon  <span class=\"hljs-number\" style=\"color: #ffc58f;\">4.608<\/span>kB\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">1<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">FROM<\/span> node:alpine\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; 5206c0dd451a<\/span>\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">2<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">WORKDIR<\/span> <span class=\"hljs-string\" style=\"color: #d1f1a9;\">\"\/app\"<\/span>\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; Using cache<\/span>\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; 7850f098dfd7<\/span>\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">3<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">COPY<\/span> <span class=\"hljs-keyword\" style=\"color: #ebbbff;\">package<\/span>.json .\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; Using cache<\/span>\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; 724a794795e2<\/span>\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">4<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">RUN<\/span> npm install\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; Using cache<\/span>\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; e75ab380acda<\/span>\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">5<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">COPY<\/span> . .\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; 1842d18166f2<\/span>\r\nStep <span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span>\/<span class=\"hljs-number\" style=\"color: #ffc58f;\">6<\/span> : <span class=\"hljs-type\" style=\"color: #ffc58f;\">CMD<\/span> [<span class=\"hljs-string\" style=\"color: #d1f1a9;\">\"npm\"<\/span>, <span class=\"hljs-string\" style=\"color: #d1f1a9;\">\"start\"<\/span>]\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; Running in fb2d11819180<\/span>\r\nRemoving intermediate container fb2d11819180\r\n <span class=\"hljs-comment\" style=\"color: #7285b7;\">---&gt; 7ba992104be2<\/span>\r\nSuccessfully built <span class=\"hljs-number\" style=\"color: #ffc58f;\">7<\/span>ba992104be2\r\nSuccessfully <span class=\"hljs-keyword\" style=\"color: #ebbbff;\">tagged<\/span> my-nodejs:latest<\/pre>\n<p>Now we have Successfully created images\u00a0 named\u00a0<code>my-haproxy<\/code>\u00a0and <code>my-nodejs<\/code>.<\/p>\n<p>Now, these images are created and stored in your local. You can verify the same using <code>docker images<\/code> command<\/p>\n<p>If you have noticed, we have not created an image for Redis,\u00a0 The reason is that the default <code>redis<\/code> image is sufficient for us.<\/p>\n<p>Now our Images are ready and they can be containerized anytime. But before creating it as container we need to set somethings clear.<\/p>\n<p>What are we building?\u00a0 what should be the outcome?<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>The Visitor Tracking NodeJS Application.<\/h2>\n<p>In the root directory, If you go into the nodejs directory you can find a Javascript file named <code>index.js<\/code>\u00a0If you take a look you can understand it tries to connect to the Redis server and update the value for the key named visit<\/p>\n<p>So the Application that we have taken for this post is designed to track the number of visits made to the NodeJS website.<\/p>\n<p>The Data [ number of visits] is saved and retrieved from the Redis database running on the container named <code>redisnode01<\/code><\/p>\n<p>Here is our final expected web page. the Visits count would increase as you refresh the page.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.18.17-AM.png\"><img class=\"alignnone size-full wp-image-4109\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.18.17-AM.png\" alt=\"\" width=\"876\" height=\"334\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.18.17-AM.png 876w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.18.17-AM-300x114.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.18.17-AM-768x293.png 768w\" sizes=\"(max-width: 876px) 100vw, 876px\" \/><\/a><\/p>\n<p>I hope everything is clear till here.<\/p>\n<p>Now we are going to create three containers and establish a network between them using different methods and validate the communication.<\/p>\n<p>Besides that, we are also going to create an enterprise like NODEJS application which tracks the number of visits and stores the visitor information in REDIS DB.<\/p>\n<p>&nbsp;<\/p>\n<h2 id=\"method1\"><span style=\"color: #d10f7a;\">Method1<\/span>: Docker Link Containers<\/h2>\n<p>Docker Link container is a legacy method to connect containers together by linking the containers we form a Shared network to enable communication channel so that the containers can talk within themselves and transmit packets on bidirectional channels.<\/p>\n<p>If everything is done right. These three commands would complete and finish our requirement.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span style=\"color: #ffcc99;\"># Start the Redis Container<\/span>\r\n\u279c  docker container <span class=\"hljs-built_in\" style=\"color: #6d9cbe;\">run<\/span> -<span class=\"hljs-keyword\" style=\"color: #c26230;\">it<\/span> -d <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\">--name <span style=\"color: #ffff00;\">redisnode01<\/span> redis<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">75126420<\/span>ab18faaf3bd68e18fb7f6201c29a91c8b96f56e3673e8b81388d5146\r\n\r\n<span style=\"color: #ffcc99;\"># Start the NodeJS Container and link it with Redis Container<\/span>\r\n\u279c  docker container <span class=\"hljs-built_in\" style=\"color: #6d9cbe;\">run<\/span> -<span class=\"hljs-keyword\" style=\"color: #c26230;\">it<\/span> -d <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\">--name <span style=\"color: #00ffff;\">nodejsserver01<\/span> &#8211; link <span style=\"color: #ffff00;\">redisnode01<\/span> my-nodejs<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">3<\/span>eb4a3bf3e70686259d4e66e607144dc9145f464c599333b36c2f3628634c112\r\n\r\n<span style=\"color: #ffcc99;\"># Start the Haproxy Container and link it with NodeJS Container<\/span>\r\n\u279c  docker container <span class=\"hljs-built_in\" style=\"color: #6d9cbe;\">run<\/span> -<span class=\"hljs-keyword\" style=\"color: #c26230;\">it<\/span> -d <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\">--name haproxyserver &#8211; publish 90:80 &#8211; link <span style=\"color: #00ffff;\">nodejsserver01<\/span> my-haproxy<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">567<\/span>c7d3aceb3b900194fd62e157a1bab6b8798aa208f9bd1911c0833ec39c03c\r\n<\/pre>\n<p>On your host machine where you are executing these Docker CLI commands. you can access the webpage in the following URL<code>http:\/\/localhost:90\/<\/code><\/p>\n<p>The commands are already self-explanatory.\u00a0 If you are still having a question, just look at the <code>--name\u00a0<\/code> and\u00a0\u00a0<code>--link<\/code> flags of each command.<\/p>\n<p>Let&#8217;s decrypt what commands are given below<\/p>\n<ul>\n<li>We have Started the Redis container in the name <code>redisnode01<\/code><\/li>\n<li>Started the nodejs container in the name <code>nodejsserver01<\/code> and linked it with <code>redisnode01<\/code> container which I created in the previous step<\/li>\n<li>Have also started the haproxy container in the name <code>haproxyserver<\/code>\u00a0and linked it with <code>nodejsserver01<\/code> container which I created in the previous step<\/li>\n<\/ul>\n<p>Like a Chain reaction? Is not it.<\/p>\n<p>&nbsp;<\/p>\n<h2>Clear up your workspace before Switching methods<\/h2>\n<p>Before proceeding to the next method, you must stop the containers you have created in the previous method and also you need to remove them to save space and to reclaim the name.<\/p>\n<p><span style=\"color: #18588c;\">To see what Containers are running\/stopped<\/span><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"hljs-attribute\" style=\"color: #ffeead;\">docker<\/span> ps -a<\/pre>\n<p><span style=\"color: #18588c;\">Stop the containers<\/span><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span style=\"color: #ffff00;\">docker<\/span> stop &lt;container id&gt; [or] &lt;container name&gt;<\/pre>\n<p><span style=\"color: #18588c;\">To Remove the container and reclaim the Name and Space<\/span><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span style=\"color: #ffff00;\">docker<\/span> stop &lt;container id&gt; [or] &lt;container name&gt;<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2><\/h2>\n<h2 id=\"method2\"><span style=\"color: #d10f7a;\">Method 2<\/span>: Docker Network Connect Containers ( Recommended )<\/h2>\n<p>This is a recommended and widely accepted method to connect two containers together, this exactly does the same thing as Docker Link which is connecting the containers to the same network.<\/p>\n<p>While Docker Link is doing the task in an abstracted manner Docker Network is doing the same in a Sophisticated manner.<\/p>\n<p>let us do our objective of creating the NodeJS Visitor management Application using this method.<\/p>\n<p>These are the commands that I had to execute to bring the environment up. If you notice the text in the green color you can understand that I have created a network and using the same network all the way down with my containers.<\/p>\n<p>Note*: There is an order to start the containers as they are integrated and have dependencies. so execute the commands in the same order.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span style=\"color: #ffcc99;\"># Create a Network<\/span>\r\n\u279c <span style=\"color: #ffff00;\">docker<\/span> <span style=\"color: #ffcc00;\">network<\/span> <span style=\"color: #ffcc00;\">create<\/span> <span style=\"color: #ccffcc;\">internal-container-network<\/span>\r\nac3f833da3297899d5ef461da39420b39bbe4ca988f481b785d7577c129b1277\r\n\r\n<span style=\"color: #ffcc99;\"># Start the Redis Container and Attach to the Created Network<\/span>\r\n\u279c <span style=\"color: #ffff00;\">docker<\/span> <span style=\"color: #ffcc00;\">container run<\/span> -it -d &#8211; name redisnode01 <span style=\"color: #ccffcc;\">--network internal-container-network<\/span> redis\r\na915154432d17e02965d7af4aa9277fedea34e5502dab428d05a90c529372411\r\n\r\n<span style=\"color: #ffcc99;\"># Start the NodeJS Container and Attach to the Created Network<\/span>\r\n\u279c <span style=\"color: #ffff00;\">docker<\/span> <span style=\"color: #ffcc00;\">container run<\/span> -it -d &#8211; name nodejsserver01 <span style=\"color: #ccffcc;\">--network internal-container-network<\/span> my-nodejs\r\n4b6159c8e5fc6842ca267d78579316b7a836734004e68ae01da68588bfa3b883\r\n\r\n<span style=\"color: #ffcc99;\"># Start the HaProxy Container and Attach to the Created Network<\/span>\r\n\u279c <span style=\"color: #ffff00;\">docker<\/span> <span style=\"color: #ffcc00;\">container run<\/span> -it -d &#8211; name haproxyserver &#8211; publish <span class=\"hljs-number\" style=\"color: #ffc58f;\">90<\/span>:<span class=\"hljs-number\" style=\"color: #ffc58f;\">80<\/span> <span style=\"color: #ccffcc;\">--network internal-container-network<\/span> my-haproxy\r\n2486a7589706904392d167148d2585e9268edf398f7dff6a47c5ddf7da9bdd3d<\/pre>\n<p>Should I remember you to clear your workspace and stop the remove the containers before going to the next method?<\/p>\n<p>&nbsp;<\/p>\n<h2 id=\"method3\"><span style=\"color: #d10f7a;\">Method 3<\/span>: Docker Compose Link Containers<\/h2>\n<p>Docker-compose is the most predominant method out of these three and a programmatic approach used in enterprises to start an enterprise application like what we are developing<\/p>\n<p>As I said this is a programmatic approach. we are going to use the <code>docker-compose.yml<\/code> manifest file which was already downloaded as part of the\u00a0<span style=\"color: #993366;\"><em>Environment setup <\/em><\/span>step<\/p>\n<p>Go into the <span style=\"color: #993366;\"><em>docker-compose <\/em><span style=\"color: #000000;\">directory beneath the root directory. You will find the <code>docker-compose.yml<\/code>\u00a0which has everything already pre-written. <\/span><\/span><\/p>\n<p><span style=\"color: #993366;\"><span style=\"color: #000000;\">All you have do is execute the following command <\/span><\/span><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span style=\"color: #ffff00;\">docker-compose<\/span> <span class=\"hljs-meta\" style=\"color: #ffc58f;\">up<\/span><\/pre>\n<p>docker-compose creates a network and connect all the containers together in the same network and make sure they are communicating with each other with no issues.<\/p>\n<p>Here is the snapshot of me executing the same command and the result.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.05.37-AM.png\"><img class=\"alignnone size-full wp-image-4107\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.05.37-AM.png\" alt=\"Docker Compose Example\" width=\"1437\" height=\"578\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.05.37-AM.png 1437w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.05.37-AM-300x121.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.05.37-AM-768x309.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-29-at-3.05.37-AM-1024x412.png 1024w\" sizes=\"(max-width: 1437px) 100vw, 1437px\" \/><\/a><\/p>\n<p><span style=\"color: #0a528a;\">Besides that, Docker compose can help you set up a reliable environment that can auto start the containers in case of failure.\u00a0<\/span><\/p>\n<p>To stop the infrastructure you have brought up with docker-compose all you need to is executing the following command<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span style=\"color: #ffff00;\">docker-compose<\/span> <span class=\"hljs-meta\" style=\"color: #ffc58f;\">down<\/span><\/pre>\n<p>&nbsp;<\/p>\n<p><span style=\"color: #c9147e;\">Do you have any questions? <span style=\"color: #000000;\">feel free to ask<\/span><\/span><\/p>\n<p>If you have questions or need some support or find any bug in here. Please do let me know over the comments.<\/p>\n<p>Hope it Helps.\u00a0 Rate this article [ratings]<\/p>\n<p>Cheers,<br \/>\nRumen Lishkov<br \/>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577340\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"4087\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577340\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577340\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this post we are going to see How to establish docker network between containers, How to Link Docker Containers, How to Access one Container from Another, Docker inter-container communication, How to Connect to Container, etc. &nbsp; This post is to answer all that. So How do we connect a[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":4089,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[454,152],"tags":[307,340,342,310,309,311,306,308,341],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Docker network between containers - Docker Networking Example<\/title>\n<meta name=\"description\" content=\"Docker Networking between containers using Docker Link, Docker Compose and Docker Network. Docker networking example . How to setup Docker network between containers.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Docker network between containers - Docker Networking Example\" \/>\n<meta property=\"og:description\" content=\"Docker Networking between containers using Docker Link, Docker Compose and Docker Network. Docker networking example . How to setup Docker network between containers.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-07-28T22:31:42+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:15:06+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"911\" \/>\n\t<meta property=\"og:image:height\" content=\"507\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-27-at-4.23.24-PM.png\",\"width\":911,\"height\":507,\"caption\":\"docker link containers\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/\",\"name\":\"Docker network between containers - Docker Networking Example\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#primaryimage\"},\"datePublished\":\"2019-07-28T22:31:42+00:00\",\"dateModified\":\"2022-11-10T19:15:06+00:00\",\"description\":\"Docker Networking between containers using Docker Link, Docker Compose and Docker Network. Docker networking example . How to setup Docker network between containers.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Docker network between containers &#8211; Docker Networking Example\",\"datePublished\":\"2019-07-28T22:31:42+00:00\",\"dateModified\":\"2022-11-10T19:15:06+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#primaryimage\"},\"keywords\":\"Docker Compose example,docker compose link containers,docker compose links example,Docker Connect Containers,Docker connectivity,Docker Link Containers,Docker Link example,Docker Network example,docker networking\",\"articleSection\":\"DevOps_Beginner,Docker\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/docker-network-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4087"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=4087"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4087\/revisions"}],"predecessor-version":[{"id":8221,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4087\/revisions\/8221"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/4089"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=4087"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=4087"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=4087"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}