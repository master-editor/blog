{"id":7302,"date":"2021-09-25T20:35:49","date_gmt":"2021-09-25T15:05:49","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=7302"},"modified":"2022-11-11T00:48:12","modified_gmt":"2022-11-10T19:18:12","slug":"terraform-create-multiple-ec2-different-config","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/","title":{"rendered":"Terraform Create Multiple EC2 with different Configs &#8211; for_each and count together"},"content":{"rendered":"<p>Those who have been using Terraform might already know that you can create multiple numbers of the same resources with the help of <code>count<\/code> or <code>for_each<\/code><\/p>\n<p>But What if we want to create multiple resources with different configurations at the same time.<\/p>\n<p>For example. we can easily create No of EC2 instances with the same set of configurations like AMI, Subnet, MachineType with the help of <code>count<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\" data-enlighter-highlight=\"4\">resource \"aws_instance\" \"web\" {\r\n  ami           = \"ami-007a18d38016a0f4e\"\r\n  instance_type = \"t3.medium\"\r\n  count = 5\r\n  vpc_security_group_ids = [\r\n    \"sg-0d8bdc716e7baee9f\"\r\n  ]<\/pre>\n<p>But what if we want multiple resources with a different set of configuration and each resource have to created in a specific amount ( 3, 4 etc)<\/p>\n<p>If you think we can use <code>count<\/code> and <code>for_each<\/code> under the resource_block and try it. you would see the following error from Terraform.<\/p>\n<pre class=\"fs-headline1 ow-break-word mb8 flex--item fl1\">The \"count\" and \"for_each\" meta-arguments are mutually-exclusive, \r\nonly one should be used to be explicit about the number of resources to be created<\/pre>\n<p>Yes.\u00a0 you cannot use <code>count<\/code> and <code>for_each<\/code> together under the same resource block.<\/p>\n<p>So how to do it is what\u00a0 We are going to see in this article.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each.jpg\"><img class=\"post-img alignnone wp-image-7342 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each.jpg\" alt=\"terraform for_each\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each.jpg 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each-300x213.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each-1024x726.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each-768x545.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each-1536x1090.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each-90x65.jpg 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<h2>How to use <span style=\"color: #eb1a74;\">for-each <\/span>and<span style=\"color: #eb1a74;\"> count<\/span>\u00a0together in Terraform<\/h2>\n<p>As we already know,\u00a0 The <code>count<\/code> and <code>for_each<\/code> are mutually exclusive but we need to use both of them to complete our requirement: <strong>creating multiple resources with different sets of configurations and counts.<\/strong><\/p>\n<p>So. How to get this done.<\/p>\n<p>Without using Count and for_each together we are going to achieve the same result that we are trying to achieve with the help of the following functions\/expression<\/p>\n<ul>\n<li><strong>for<\/strong> &#8211; A loop expression to traverse and create dynamic blocks to match the number of instances with dynamic names for each instance<\/li>\n<li><strong>range <\/strong>&#8211; used inside for expression to create a dynamic range according to the number set for the <code>count<\/code> let&#8217;s say no of instances<\/li>\n<li><strong>flatten<\/strong> &#8211; to convert the nested list to a single list<\/li>\n<\/ul>\n<p>Before we go deep and see how to use each of these expressions to get our requirement completed.<\/p>\n<p>You can download the code from Github and get ready.<\/p>\n<p>&nbsp;<\/p>\n<h2><span style=\"color: #eb1a74;\">Download the Code<\/span> to begin with<\/h2>\n<p>Now it&#8217;s time to go practical. Though we will be discussing each segment of the code in detail.\u00a0 To begin with. you can download\/clone the code from this repository<\/p>\n<pre>git clone https:\/\/github.com\/AKSarav\/Terraform-Count-ForEach<\/pre>\n<p>&nbsp;<\/p>\n<h2>A quick look at the files &#8211; <span style=\"color: #eb1a74;\">Decoding<\/span> the configuration<\/h2>\n<p>After you have downloaded the files or cloned the Git repo. You can see three files<\/p>\n<ul>\n<li><strong>main.tf<\/strong> &#8211; the main Terraform configuration files<\/li>\n<li><strong>variables.tf<\/strong> &#8211; For declaring and initializing the variables<\/li>\n<li><strong>dev.tfvars <\/strong>&#8211; A File with variables filled with values.<\/li>\n<\/ul>\n<p>Let us learn more about each files in detail<\/p>\n<p>We can start with the <code>variables.tf<\/code> file which has a minimal content.<\/p>\n<p>&nbsp;<\/p>\n<h3>variables.tf<\/h3>\n<p>the <code>variables.tf<\/code> file is used to declare the list of variables that we might be using on the terraform code.<\/p>\n<p>If the variable is defined\/declared here and not provided with a value. Terraform would throw an error.<\/p>\n<p>If the variables is not declared but used on the Terraform configuration. It would throw an error and ask you to declare it.<\/p>\n<p>So this is basically a way to isolate and document all the variables necessary for the terraform module or configuration to work.<\/p>\n<p>In our case, we are declaring only one variable named <code>configuration<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">variable \"configuration\" {\r\n  description = \"The total configuration, List of Objects\/Dictionary\"\r\n  default = [{}]\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<h3>dev.tfvars\u00a0 &#8211; A Snapshot of our Infra we are going to create<strong><br \/>\n<\/strong><\/h3>\n<p>this tfvars file is where we provide actual values for the variables we declare.<\/p>\n<p>we can have different <code>tfvars<\/code> file and launch our terraform with customizations every time we launch using <code>--var-file<\/code> attribute<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>to be precise. you can have different tfvars file for each environment with different sets of values and name them as <code>dev.tfvars, qa.tfvars, prod.tfvars, dr.tfvars<\/code> etc to cover different environments like dev,QA, prod,dr accordingly<\/p>\n<p>In our case, we are having a single tfvars file named <code>dev.tfvars<\/code> with the following content<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">configuration = [\r\n  {\r\n    \"application_name\" : \"GritfyApp-dev\",\r\n    \"ami\" : \"ami-09e67e426f25ce0d7\",\r\n    \"no_of_instances\" : \"2\",\r\n    \"instance_type\" : \"t2.medium\",\r\n    \"subnet_id\" : \"subnet-0f4f294d8404946eb\",\r\n    \"vpc_security_group_ids\" : [\"sg-0d15a4cac0567478c\",\"sg-0d8749c35f7439f3e\"]\r\n  },\r\n  {\r\n    \"application_name\" : \"GrityWeb-dev\",\r\n    \"ami\" : \"ami-0747bdcabd34c712a\",\r\n    \"instance_type\" : \"t2.micro\",\r\n    \"no_of_instances\" : \"1\"\r\n    \"subnet_id\" : \"subnet-0f4f294d8404946eb\"\r\n    \"vpc_security_group_ids\" : [\"sg-0d15a4cac0567478c\"]\r\n  },\r\n  {\r\n    \"application_name\" : \"OpsGrit-dev\",\r\n    \"ami\" : \"ami-0747bdcabd34c712a\",\r\n    \"instance_type\" : \"t3.micro\",\r\n    \"no_of_instances\" : \"3\"\r\n    \"subnet_id\" : \"subnet-0f4f294d8404946eb\"\r\n    \"vpc_security_group_ids\" : [\"sg-0d15a4cac0567478c\"]\r\n  }\r\n  \r\n]<\/pre>\n<p>As you can see, we have filled the variable named <code>configuration<\/code> we have declared earlier on the <code>variables.tf<\/code> file.<\/p>\n<p>we are going to create 6 EC2 instances for three different applications. thanks to <code>count<\/code><\/p>\n<p>I have compiled it as a table for you to grasp it real quick.<\/p>\n<table style=\"width: 100%; border-collapse: collapse; overflow: auto;\" border=\"2\">\n<tbody>\n<tr style=\"height: 28px; background-color: #54a5de;\">\n<td style=\"width: 16.6667%; height: 28px;\">Application Name<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">\u00a0AMI ID<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">No Of Instances(Count)<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">Instance type<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">subnet_id<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">security_group_ids<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 16.6667%; height: 28px;\">GritfyApp<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">ami-09e67e426f25ce0d7<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">2<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">t2.medium<\/td>\n<td style=\"width: 16.6667%; height: 28px; border-style: solid; border: 1px;\">subnet-0f4f294d8404946eb<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">sg-0d15a4cac0567478c,sg-0d8749c35f7439f3e<\/td>\n<\/tr>\n<tr style=\"height: 53px;\">\n<td style=\"width: 16.6667%; height: 53px;\">GritfyWeb<\/td>\n<td style=\"width: 16.6667%; height: 53px;\">ami-0747bdcabd34c712a<\/td>\n<td style=\"width: 16.6667%; height: 53px;\">1<\/td>\n<td style=\"width: 16.6667%; height: 53px;\">t2.micro<\/td>\n<td style=\"width: 16.6667%; height: 53px;\">subnet-0f4f294d8404946eb<\/td>\n<td style=\"width: 16.6667%; height: 53px;\">sg-0d15a4cac0567478c<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 16.6667%; height: 28px;\">OpsGrit<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">ami-0747bdcabd34c712a<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">3<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">t3.micro<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">subnet-0f4f294d8404946eb<\/td>\n<td style=\"width: 16.6667%; height: 28px;\">sg-0d15a4cac0567478c<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<p>As you can see each application has different configurations in terms of count, AMI and instance type and security group<\/p>\n<p>&nbsp;<\/p>\n<h3>main.tf &#8211; The Configuration that does the magic<\/h3>\n<p>This is the main configuration file of terraform with all the logic and looping expressions we have talked earlier about.<\/p>\n<p>Let us see what each block on this file is doing, in detail.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">provider \"aws\" {\r\n  region = \"us-east-1\"\r\n  profile = \"personal\"\r\n\r\n}\r\n\r\nlocals {\r\n  serverconfig = [\r\n    for srv in var.configuration : [\r\n      for i in range(1, srv.no_of_instances+1) : {\r\n        instance_name = \"${srv.application_name}-${i}\"\r\n        instance_type = srv.instance_type\r\n        subnet_id   = srv.subnet_id\r\n        ami = srv.ami\r\n        security_groups = srv.vpc_security_group_ids\r\n      }\r\n    ]\r\n  ]\r\n}\r\n\r\n\/\/ We need to Flatten it before using it\r\nlocals {\r\n  instances = flatten(local.serverconfig)\r\n}\r\n\r\nresource \"aws_instance\" \"web\" {\r\n\r\n  for_each = {for server in local.instances: server.instance_name =&gt;  server}\r\n  \r\n  ami           = each.value.ami\r\n  instance_type = each.value.instance_type\r\n  vpc_security_group_ids = each.value.security_groups\r\n  user_data = &lt;&lt;EOF\r\n#!\/bin\/bash\r\necho \"Copying the SSH Key to the remote server\"\r\necho -e \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvhXuMn9FwsrcK\/DkgOlZdQFbY9e0+InX2sdHm8ZF7hGOQvg3CTMdBtMHlALnzqsYlS0aN0puzNF7fWAvUawdGjcSYxKEMlO1CaKPYxEgLTPDdiuYm3DNUutNMOLB0KHSJDk1Vb83UEpXm4vZjAWwHQTgoSsyXA57GcV4+IiTOy+iIIiiB7XzTDjt7ePVOW237HJAENlB\/txh0qEl4Gn0eNGykg2E00jN8cOfIf\/sKuY2kXBRgSjTjr6HArB4an6+aJpNJMWFFLyk47+NOIepaZhJNuXL39y0kGp\/KzTlQw45g+ct92CSoCvySGqSUGN85ofPeYfzwB45yVJ9bMrZpY88TG4kLGAFeAg4DHVxUmJQhbjQOBRL8FDadOZuHmawlBUNeqFFtQ1EAad9Z2FWAZ80htaPysE9coA2VXC559VapIs9fsx2nPStKoB8bPP91rArS4Q9tt077+BgPE3d4IK2GRTYsC1TXzrF6hvGGk9zk+nWpZMqDtW5sQxdxl0k=\" &gt;&gt; \/home\/ubuntu\/.ssh\/authorized_keys\r\n\r\necho \"Changing the hostname to ${each.value.instance_name}\"\r\nhostname ${each.value.instance_name}\r\necho \"${each.value.instance_name}\" &gt; \/etc\/hostname\r\n\r\nEOF\r\n  subnet_id = each.value.subnet_id\r\n  tags = {\r\n    Name = \"${each.value.instance_name}\"\r\n  }\r\n}\r\n\r\noutput \"instances\" {\r\n  value       = \"${aws_instance.web}\"\r\n  description = \"All Machine details\"\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p><span style=\"font-size: 18pt; color: #125ba3;\"><strong>Provider block<\/strong><\/span><\/p>\n<p>the provider block is to tell terraform what Provider to use like <code>AWS GCP<\/code> etc and additional information to login to the provider API<\/p>\n<p>in our case we are using the <code>AWS CLI<\/code> <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-configure-profiles.html\">Named Profiles.<\/a><\/p>\n<p>My profile name is <code>personal<\/code> and the region I have chosen in <code>us-east-1<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">provider \"aws\" {\r\n  region = \"us-east-1\"\r\n  profile = \"personal\"\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p><span style=\"color: #125ba3; font-size: 18pt;\"><strong>locals block<\/strong><\/span><\/p>\n<p>As discussed earlier, we cannot directly consume our variable <code>configuration<\/code>\u00a0 using <code>for_each<\/code>\u00a0 if we do that, Terraform would not let us use <code>count<\/code> on the same block because both are for loop expressions therefore mutually exclusive to each other.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>Having said that. Now we need to find a way to generate repeated resource blocks somewhere outside but not in the <code>aws_instance<\/code> resource block.<\/p>\n<p>thats what we are going to do in the locals block.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">locals {\r\n  serverconfig = [\r\n    for srv in var.configuration : [\r\n      for i in range(1, srv.no_of_instances+1) : {\r\n        instance_name = \"${srv.application_name}-${i}\"\r\n        instance_type = srv.instance_type\r\n        subnet_id   = srv.subnet_id\r\n        ami = srv.ami\r\n        security_groups = srv.vpc_security_group_ids\r\n      }\r\n    ]\r\n  ]\r\n}\r\n\r\n\/\/ We need to Flatten it before using it\r\nlocals {\r\n  instances = flatten(local.serverconfig)\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>We have two <code>local<\/code> variables named <code>serverconfig<\/code> and <code>instances<\/code><\/p>\n<ul>\n<li><strong>serverconfig<\/strong> &#8211; is to create a dynamic block of server configuration, in a list of objects <code>[[{}],[{}],[{}]<\/code> format<\/li>\n<li><strong>instances &#8211;<\/strong> to turn multiple nested lists into a single flat list\u00a0 with flatten<code>[{},{},{}]<\/code><\/li>\n<\/ul>\n<p>I know it must be a little hard to understand but thanks to <code>terraform console<\/code> which can help us debug what these variables look like during the runtime.<\/p>\n<p>Refer the following Quick video to understand the actual runtime values of these variables.<\/p>\n<p><script id=\"asciicast-q6SUoYOCs4iaYBLI7zLQ5D9oZ\" src=\"https:\/\/asciinema.org\/a\/q6SUoYOCs4iaYBLI7zLQ5D9oZ.js\" async><\/script><\/p>\n<h3><span style=\"color: #125ba3; font-size: 18pt;\">resource block<\/span><\/h3>\n<p>Now the resource block is pretty much typical. except we have a <code>for_each<\/code> loop set based on the <code>local.instances<\/code> variable we have created using locals block.<\/p>\n<p>As you know the instances block contains the list of objects <code>[{},{},{}]<\/code> that represents the configuration of different instances we are going to create.<\/p>\n<p>the key logic part is done by this statement<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\">for_each = {for server in local.instances: server.instance_name =&gt; server}<\/pre>\n<p>we are passing the <code>for<\/code> expression&#8217;s output\u00a0 into <code>for_each<\/code><\/p>\n<p>Now to clarify what is the output of our for expression. Let us use <code>terraform console<\/code> once again<\/p>\n<p>and paste the for expression along with the parenthesis<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-scaled.jpg\"><img class=\"alignnone wp-image-7319 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-scaled.jpg\" alt=\"terraform for_each\" width=\"2560\" height=\"1855\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-scaled.jpg 2560w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-300x217.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-1024x742.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-768x556.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-1536x1113.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-2048x1484.jpg 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/TerraformConsole-ForLoop-90x65.jpg 90w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" \/><\/a><\/p>\n<p>As presented in the image above. you can see that the for expression is creating a list of objects with instance_name added as a key<\/p>\n<pre>{\r\n  instance_name-[0-9] = {\r\n  },\r\n  instance_name-[0-9] = {\r\n  }\r\n}<\/pre>\n<p>So basically it is creating dynamic blocks of instance configuration with customized configurations like <code>ami<\/code>, <code>name<\/code>, <code>instance type<\/code> etc<\/p>\n<p>&nbsp;<\/p>\n<h2>Validation and Running the Configuration<\/h2>\n<p>If you have just downloaded the code and cloned the repo. you might have to initialize the terraform using the following command<\/p>\n<pre>\u21d2 terraform init<\/pre>\n<p>now it&#8217;s a time that we validate if we have made any syntax issues on our configuration file using the following command<\/p>\n<pre>\u21d2 terraform validate\r\nSuccess! The configuration is valid.<\/pre>\n<p>After the validation is successful we can go ahead and create a plan document<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>Since we have a custom <code>tfvars<\/code> file we need to use the <code>-var-file<\/code> during the plan and apply<\/p>\n<pre>\u21d2 terraform plan -var-file=dev.tfvars -out devtfplan.out<\/pre>\n<p>Once you are satisfied with the plan<\/p>\n<p>You can apply the changes using the following command and make sure you use the right <code>out<\/code> file. in our case its <code>devtfplan.out<\/code><\/p>\n<pre>\u21d2 terraform apply \"devtfplan.out\"<\/pre>\n<p>Sit back and relax. while the Terraform creates all the instances<\/p>\n<p>Here is the Screen record of Terraform <code>plan<\/code> and <code>apply<\/code>\u00a0 execution from my end.<\/p>\n<p><script id=\"asciicast-JGQIa0WCvsgaigSl5HxKTUqnS\" src=\"https:\/\/asciinema.org\/a\/JGQIa0WCvsgaigSl5HxKTUqnS.js\" async><\/script><\/p>\n<p>&nbsp;<\/p>\n<h2>Validate the EC2 instances are Launched<\/h2>\n<p>Now head to AWS Management Console and you can see that the EC2 instances are created and waiting for you<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM.png\"><img class=\"post-img alignnone wp-image-7326 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM.png\" alt=\"terraform for_each\" width=\"3098\" height=\"632\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM.png 3098w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM-300x61.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM-1024x209.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM-768x157.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM-1536x313.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/Screenshot-2021-09-25-at-5.35.54-PM-2048x418.png 2048w\" sizes=\"(max-width: 3098px) 100vw, 3098px\" \/><\/a><\/p>\n<p>You can log in to the machines directly as you have copied your <code>SSH<\/code> to authorized_keys as part of <code>user_data<\/code><\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>As part of this article, we have covered various sub scenarios like<\/p>\n<ul>\n<li>Create multiple EC2 instances with different sets of configuration<\/li>\n<li>How to use Count and For_each together<\/li>\n<li>Debug variables in Terraform and know their values at runtime with Terraform console<\/li>\n<li>How to process a List of dictionaries in terraform using For and For_each.<\/li>\n<li>How to use For and For_each on Terraform resources.<\/li>\n<\/ul>\n<p>Not just for EC2. you can tweak this solution and try it for other AWS resources too.<\/p>\n<p>Hope this helps. If you have any feedback or a better way to do this. Please share it with us in the comments section.<\/p>\n<p>Are you looking for Digital Transformation Partner or DevOps as a Service solution. <a href=\"https:\/\/gritfy.com\">Try us<\/a><\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577310\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"7302\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577310\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577310\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Those who have been using Terraform might already know that you can create multiple numbers of the same resources with the help of count or for_each But What if we want to create multiple resources with different configurations at the same time. For example. we can easily create No of[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":7342,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[454,233],"tags":[444,443],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Terraform Create Multiple EC2 with different Configs - for_each and count together<\/title>\n<meta name=\"description\" content=\"Terraform Create Multiple EC2 with a different set of configurations. Using Count and for_each together in Terraform example. Terraform for_each example. Terraform count example\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Terraform Create Multiple EC2 with different Configs - for_each and count together\" \/>\n<meta property=\"og:description\" content=\"Terraform Create Multiple EC2 with a different set of configurations. Using Count and for_each together in Terraform example. Terraform for_each example. Terraform count example\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2021-09-25T15:05:49+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:18:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/tf-for_each.jpg\",\"width\":1748,\"height\":1240,\"caption\":\"terraform for_each\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\",\"name\":\"Terraform Create Multiple EC2 with different Configs - for_each and count together\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#primaryimage\"},\"datePublished\":\"2021-09-25T15:05:49+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"description\":\"Terraform Create Multiple EC2 with a different set of configurations. Using Count and for_each together in Terraform example. Terraform for_each example. Terraform count example\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Terraform Create Multiple EC2 with different Configs &#8211; for_each and count together\",\"datePublished\":\"2021-09-25T15:05:49+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#primaryimage\"},\"keywords\":\"terraform for-each and count,terraform for-each and count together\",\"articleSection\":\"DevOps_Beginner,Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7302"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=7302"}],"version-history":[{"count":6,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7302\/revisions"}],"predecessor-version":[{"id":8164,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7302\/revisions\/8164"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/7342"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=7302"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=7302"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=7302"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}