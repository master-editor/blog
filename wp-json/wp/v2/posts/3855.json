{"id":3855,"date":"2019-05-22T05:35:29","date_gmt":"2019-05-22T00:05:29","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=3855"},"modified":"2022-03-13T21:59:55","modified_gmt":"2022-03-13T16:29:55","slug":"docker-nodejs-statsd-graphite-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/","title":{"rendered":"NodeJS StatsD with Graphite On Docker Example &#8211; Create Graphs and Metrics"},"content":{"rendered":"<p>Creating Application is Tough, I agree. So does monitoring the application statistics like Number of Hits, Response time etc. But if we have the right tools in hand, we can do wonders<\/p>\n<p>In this post, we are going to develop a Simple <strong>NODE JS<\/strong> web application with <strong>StatsD<\/strong> and <strong>Graphite<\/strong> to Monitor the Number of Hits and the throughput etc.<\/p>\n<p>Nowadays Every monitoring and Statistics has become a Chart and Graphs and we are going to build one ourselves using StatsD and Graphite.<\/p>\n<h2>Prerequisites<\/h2>\n<p>In this post, All the Components like NODEJs, StatsD and Graphite are going to be launched as Containers on Docker technology. It is Quick and Easy. If you are entirely new to Docker, that&#8217;s fine too.<\/p>\n<p>Just Install Docker CE and continue from here.<\/p>\n<p>If you want to learn basics about Container and\u00a0 Docker,\u00a0 <a href=\"https:\/\/www.middlewareinventory.com\/blog\/what-is-container-and-containerization-a-basic-notes\/\">Refer to these post<\/a><\/p>\n<p>&nbsp;<\/p>\n<p><strong>Before moving in, So what is StasD?<\/strong><\/p>\n<p>A network daemon that runs on the\u00a0<a href=\"http:\/\/nodejs.org\/\" rel=\"nofollow\">Node.js<\/a>\u00a0platform and listens for statistics, like counters and timers, sent over\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/User_Datagram_Protocol\" rel=\"nofollow\">UDP<\/a>\u00a0or\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Transmission_Control_Protocol\" rel=\"nofollow\">TCP<\/a>\u00a0and sends aggregates to one or more pluggable backend services (e.g.,\u00a0<a href=\"http:\/\/graphite.readthedocs.org\/\" rel=\"nofollow\">Graphite<\/a>).<\/p>\n<p>Since it is being a network Deamon, It can receive data over the network as UDP\/TCP packets. A Quick and easy way to send the metric to the StatsD is with nc (netcat) command<\/p>\n<p>The Following command will increment the pointer named foo.<\/p>\n<p>This would all make sense when we see it in practice. So Continue to read.<\/p>\n<pre><code>echo \"foo:1|c\" | nc -u -w0 127.0.0.1 8125<\/code><\/pre>\n<p>You can find more information about StatsD in <a href=\"https:\/\/github.com\/statsd\/statsd\">here<\/a><\/p>\n<p>StatsD can Support a variety of metrics like<span style=\"color: #0b5285;\"> <strong>Counter, Sets, Gauges<\/strong><\/span>\u00a0 and you can read more about all of them <a href=\"https:\/\/github.com\/statsd\/statsd\/blob\/master\/docs\/metric_types.md\">here<\/a><\/p>\n<p>&nbsp;<\/p>\n<p><span style=\"color: #0a6091; font-size: 14pt;\"><strong>A Quick Glimpse to our End Product, So that you don&#8217;t get bored<\/strong><\/span><\/p>\n<p>This is how our End Result would look like. Is it not it Cool?. Trust me!.\u00a0 We are going to build this Step by Step from Scratch.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png\"><img class=\"alignnone size-full wp-image-3868\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png\" alt=\"NodeJS StatsD\" width=\"951\" height=\"461\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png 951w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM-300x145.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM-768x372.png 768w\" sizes=\"(max-width: 951px) 100vw, 951px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Index<\/h2>\n<ol>\n<li>Steps for Docker + NodeJS + StatsD + Graphite Configuration\n<ul>\n<li>Run the Graphite, StatsD image as a Container using Docker CLI<\/li>\n<li>Make Sure the Container is Running and Graphite UI is ACTIVE<\/li>\n<li>Create the NODEJS Image with Lynx and Express<\/li>\n<li>Launch the NodeJS Application Image as a Container<\/li>\n<li>Validate the Graphite and NodeJS Containers are running<\/li>\n<li>Create a Network in Docker and map these two containers<\/li>\n<\/ul>\n<\/li>\n<li>A Quick Validation of the Application<\/li>\n<li>A Load Testing and Graph Generation<\/li>\n<li>Conclusion<\/li>\n<\/ol>\n<h2><\/h2>\n<h2>Steps for Docker + NodeJS + StatsD + Graphite Configuration<\/h2>\n<p>As we already mentioned, all our key elements are going to be Docker Containers.\u00a0 We presume that you have the basic knowledge on Docker and have it installed in your Machine.<\/p>\n<p>Now in your host where you have Docker CE and CLI installed, Execute the following steps,<\/p>\n<h3>Step1:\u00a0 \u00a0Run the Graphite, StatsD image as a Container using Docker CLI<\/h3>\n<p>Here the Image name is\u00a0<span style=\"color: #e3106f;\"><span style=\"color: #0b5285;\"> graphiteapp\/graphite-statsd<\/span> <span style=\"color: #000000;\">and it would automatically be downloaded from hub.docker.com if not present locally.<\/span><\/span><\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker run -d\\                                             \r\n &#8211; name graphite\\      \r\n &#8211; restart=always\\\r\n -p 80:80\\\r\n -p 2003-2004:2003-2004\\\r\n -p 2023-2024:2023-2024\\\r\n -p 8125:8125\/udp\\\r\n -p 8126:8126\\\r\n graphiteapp\/graphite-statsd<\/pre>\n<\/div>\n<p>Here<\/p>\n<p><strong>&#8211;name:<\/strong> Is to Name the Container. We named this container as\u00a0<span style=\"color: #0b5285;\">graphite\u00a0<\/span><\/p>\n<p><strong>&#8211;restart:<\/strong>\u00a0 this is to say Docker to Restart the container in case of a Box reboot or failure<\/p>\n<p><strong>-p:<\/strong> Port forwarding, Left to the colon is the Host port and Right to the colon is the Container Port<br \/>\nThat&#8217;s All. Your Graphite, StatsD installation is Ready.<\/p>\n<p>This is what I was talking about earlier, Just think, with no Container technology in hand it would have taken a lot of time for us to create an Infrastructure with Graphite and StatsD installed and configured.<\/p>\n<blockquote><p><strong>A Quick Note:<\/strong><\/p>\n<p>We named this container as <strong>graphite<\/strong> which will later be referred in the NodeJS Application as a host name of StatsD server.<\/p>\n<p>Refer Step3b, <strong>Index.js<\/strong> file<\/p>\n<p><span style=\"color: #0b5285;\">var metrics = new lynx(&#8216;graphite&#8217;, 8125, opt);<\/span><\/p>\n<p>You can find a line like this, Where the <em>graphite<\/em>\u00a0stands for the hostname of container\/server where the statsD is running. In our case it is a container.<\/p>\n<p>So Make Sure you follow this convention or change in both the places.<\/p><\/blockquote>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step2:\u00a0 \u00a0Make Sure the Container is Running and Graphite UI is ACTIVE<\/h3>\n<p>Now we need to make sure the Container is running and Graphite is working<\/p>\n<p>Execute the Following Docker CLI command to make sure that your container is running<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #ff0000; background-color: #ffaaaa;\">$<\/span> <span style=\"color: #007020;\">docker<\/span> container list\r\n<span style=\"color: #007020;\">CONTAINER<\/span> ID        IMAGE                         COMMAND             CREATED             STATUS              PORTS                                                                                                                                                                       NAMES\r\n<span style=\"color: #007020;\">0dcc76ab681d<\/span>        graphiteapp\/graphite-statsd   <span style=\"background-color: #fff0f0;\">\"\/entrypoint\"<\/span>       <span style=\"color: #6600ee; font-weight: bold;\">2<\/span> days ago          Up <span style=\"color: #6600ee; font-weight: bold;\">4<\/span> hours          <span style=\"color: #6600ee; font-weight: bold;\">0.0.0.0<\/span>:80-&gt;80\/tcp, <span style=\"color: #6600ee; font-weight: bold;\">0.0.0.0<\/span>:2003-2004-&gt;2003-2004\/tcp, <span style=\"color: #6600ee; font-weight: bold;\">2013<\/span>-2014\/tcp, <span style=\"color: #6600ee; font-weight: bold;\">8080<\/span><span style=\"color: #dd2200; background-color: #fff0f0;\">\/tcp<\/span>, <span style=\"color: #6600ee; font-weight: bold;\">0.0.0.0<\/span>:2023-2024-&gt;2023-2024\/tcp, <span style=\"color: #6600ee; font-weight: bold;\">0.0.0.0<\/span>:8126-&gt;8126\/tcp, <span style=\"color: #6600ee; font-weight: bold;\">8125<\/span><span style=\"color: #dd2200; background-color: #fff0f0;\">\/tcp<\/span>, <span style=\"color: #6600ee; font-weight: bold;\">0.0.0.0<\/span>:8125-&gt;8125\/udp   graphite\r\n<\/pre>\n<\/div>\n<p>Also, make sure the Graphite Web Interface is accessible at\u00a0<code>http:\/\/localhost\/<\/code><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-08-at-4.37.41-PM.png\"><img class=\"alignnone size-full wp-image-3860\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-08-at-4.37.41-PM.png\" alt=\"NodeJS StatsD Graphite\" width=\"1052\" height=\"639\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-08-at-4.37.41-PM.png 1052w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-08-at-4.37.41-PM-300x182.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-08-at-4.37.41-PM-768x466.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-08-at-4.37.41-PM-1024x622.png 1024w\" sizes=\"(max-width: 1052px) 100vw, 1052px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Step3:\u00a0 \u00a0Create the NODEJS Image with Lynx and Express<\/h3>\n<p><strong>Express<\/strong> is a widely used Node JS web Application framework and <strong>Lynx<\/strong> is a client package<\/p>\n<p>We are going to use them together in our application for serving a page and to connect to <strong>StatsD<\/strong>. We are also going to use a Package named <strong>request<\/strong> to connect to remote URLs.<\/p>\n<p>The Application is designed to connect to <strong>two<\/strong> remote URLs and collect some data and we are going to calculate the time it spends on two different websites.<\/p>\n<p>One is <code>www.google.com<\/code> and the other one is <code>www.middlewareinventory.com<\/code><\/p>\n<p><strong>Step 3A: Create a Work Space<\/strong><\/p>\n<p>You can choose any existing directory of your choice or create a new one. I am creating a new directory for this example. We are going to perform all the upcoming tasks.<\/p>\n<pre>mkdir \/apps\/docker\/NodeStatsD<\/pre>\n<p><strong>Step 3B: Create <span style=\"color: #0b5285;\">Index.js<\/span> file with the following content.<\/strong><\/p>\n<p>I tried to cover the most used metrics like Gauges, Timer,\u00a0 Sets, Counter etc and placed each of them under a Single URI or Listener.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #272822; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; background: #272822; line-height: 125%;\"><span style=\"color: #66d9ef;\">const<\/span> <span style=\"color: #a6e22e;\">express<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #a6e22e;\">require<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"express\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n<span style=\"color: #66d9ef;\">const<\/span> <span style=\"color: #a6e22e;\">lynx<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #a6e22e;\">require<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"lynx\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n<span style=\"color: #66d9ef;\">const<\/span> <span style=\"color: #a6e22e;\">request<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #a6e22e;\">require<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"request\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n<span style=\"color: #66d9ef;\">const<\/span> <span style=\"color: #a6e22e;\">app<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #a6e22e;\">express<\/span><span style=\"color: #f8f8f2;\">();<\/span>\r\n<span style=\"color: #66d9ef;\">var<\/span> <span style=\"color: #a6e22e;\">opt<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #f8f8f2;\">{};<\/span> \r\n<span style=\"color: #a6e22e;\">opt<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">prefix<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #e6db74;\">'SampleNodeJSApp'<\/span><span style=\"color: #f8f8f2;\">;<\/span>\r\n<span style=\"color: #66d9ef;\">var<\/span> <span style=\"color: #a6e22e;\">metrics<\/span> <span style=\"color: #f92672;\">=<\/span> <span style=\"color: #66d9ef;\">new<\/span> <span style=\"color: #a6e22e;\">lynx<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'graphite'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #ae81ff;\">8125<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">opt<\/span><span style=\"color: #f8f8f2;\">);<\/span> <span style=\"color: #75715e;\">\/\/ StatsD IP &amp; Port <\/span>\r\n\r\n<span style=\"color: #75715e;\">\/\/Example1 - Hit Count Home Page<\/span>\r\n<span style=\"color: #a6e22e;\">app<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"\/\"<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">req<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">)<\/span> <span style=\"color: #f92672;\">=&gt;<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n    <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">send<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"Welcome to HomePage\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n    <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">increment<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'HomePage.hitcount'<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n<span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n<span style=\"color: #75715e;\">\/\/Example2 - Gauges App<\/span>\r\n<span style=\"color: #a6e22e;\">app<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"\/GaugesApp\"<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">req<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">)<\/span> <span style=\"color: #f92672;\">=&gt;<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n    <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">send<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"Welcome to GaugesApp Page\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n    <span style=\"color: #a6e22e;\">request<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">({<\/span>\r\n        <span style=\"color: #a6e22e;\">url<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">'https:\/\/www.middlewareinventory.com'<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #a6e22e;\">time<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #66d9ef;\">true<\/span>\r\n      <span style=\"color: #f8f8f2;\">},<\/span><span style=\"color: #66d9ef;\">function<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">err<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response<\/span><span style=\"color: #f8f8f2;\">){<\/span>\r\n        <span style=\"color: #a6e22e;\">console<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">log<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'MWI Request time in ms'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n        <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">gauge<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'GaugesApp.mwi'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n      <span style=\"color: #f8f8f2;\">});<\/span>\r\n      <span style=\"color: #a6e22e;\">request<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">({<\/span>\r\n        <span style=\"color: #a6e22e;\">url<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">'https:\/\/www.google.com'<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #a6e22e;\">time<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #66d9ef;\">true<\/span>\r\n      <span style=\"color: #f8f8f2;\">},<\/span><span style=\"color: #66d9ef;\">function<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">err<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response1<\/span><span style=\"color: #f8f8f2;\">){<\/span>\r\n        <span style=\"color: #a6e22e;\">console<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">log<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'Google Request time in ms'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response1<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n        <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">gauge<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'GaugesApp.google'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response1<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n      <span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n      \r\n      \r\n      \r\n<span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n\r\n<span style=\"color: #75715e;\">\/\/Example3 - Timer App<\/span>\r\n<span style=\"color: #a6e22e;\">app<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"\/TimerApp\"<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">req<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">)<\/span> <span style=\"color: #f92672;\">=&gt;<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n    <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">send<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"Welcome to TimerApp Page\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n    <span style=\"color: #a6e22e;\">request<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">({<\/span>\r\n        <span style=\"color: #a6e22e;\">url<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">'https:\/\/www.middlewareinventory.com'<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #a6e22e;\">time<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #66d9ef;\">true<\/span>\r\n      <span style=\"color: #f8f8f2;\">},<\/span><span style=\"color: #66d9ef;\">function<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">err<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response<\/span><span style=\"color: #f8f8f2;\">){<\/span>\r\n        <span style=\"color: #a6e22e;\">console<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">log<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'Request time in ms'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n        <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">timing<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'TimerApp.mwi'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span> \r\n      <span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n      <span style=\"color: #a6e22e;\">request<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">({<\/span>\r\n        <span style=\"color: #a6e22e;\">url<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">'https:\/\/www.google.com'<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #a6e22e;\">time<\/span> <span style=\"color: #f92672;\">:<\/span> <span style=\"color: #66d9ef;\">true<\/span>\r\n      <span style=\"color: #f8f8f2;\">},<\/span><span style=\"color: #66d9ef;\">function<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">err<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response1<\/span><span style=\"color: #f8f8f2;\">){<\/span>\r\n        <span style=\"color: #a6e22e;\">console<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">log<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'Request time in ms'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response1<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n        <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">timing<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'TimerApp.google'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">response1<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">elapsedTime<\/span><span style=\"color: #f8f8f2;\">);<\/span> \r\n      <span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n      \r\n      \r\n      \r\n      \r\n<span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n\r\n <span style=\"color: #75715e;\">\/\/Example4 - User Defined Sets<\/span>\r\n <span style=\"color: #a6e22e;\">app<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">get<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"\/Sets\"<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">req<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #a6e22e;\">res<\/span><span style=\"color: #f8f8f2;\">)<\/span> <span style=\"color: #f92672;\">=&gt;<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n    <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">set<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'Sets.user'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #e6db74;\">'Sarav'<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n    <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">set<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'Sets.user'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #e6db74;\">'Sarav'<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n    <span style=\"color: #66d9ef;\">if<\/span> <span style=\"color: #f8f8f2;\">(Math.<\/span><span style=\"color: #a6e22e;\">random<\/span><span style=\"color: #f8f8f2;\">()<\/span> <span style=\"color: #f92672;\">&gt;<\/span> <span style=\"color: #ae81ff;\">0.9<\/span><span style=\"color: #f8f8f2;\">)<\/span> \r\n    <span style=\"color: #f8f8f2;\">{<\/span> \r\n        <span style=\"color: #a6e22e;\">metrics<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">set<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'Sets.user'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #e6db74;\">'Jarvis'<\/span><span style=\"color: #f8f8f2;\">);<\/span> \r\n    <span style=\"color: #f8f8f2;\">}<\/span>\r\n    <span style=\"color: #a6e22e;\">setTimeout<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #a6e22e;\">pick<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #ae81ff;\">1000<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n<span style=\"color: #f8f8f2;\">});<\/span>\r\n\r\n\r\n<span style=\"color: #a6e22e;\">app<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">listen<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">'8080'<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #f8f8f2;\">()<\/span> <span style=\"color: #f92672;\">=&gt;<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n    <span style=\"color: #a6e22e;\">console<\/span><span style=\"color: #f8f8f2;\">.<\/span><span style=\"color: #a6e22e;\">log<\/span><span style=\"color: #f8f8f2;\">(<\/span><span style=\"color: #e6db74;\">\"Started Listening in Port 8080\"<\/span><span style=\"color: #f8f8f2;\">);<\/span>\r\n<span style=\"color: #f8f8f2;\">});<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<blockquote><p><strong>Just a Reminder:<\/strong><\/p>\n<p>Hope you read our caveat on Step1 about the Container Name being <strong>graphite<\/strong> and the line of code in index.js representing the statsd server.<\/p>\n<p><span style=\"color: #0b5285;\">var metrics = new lynx(&#8216;graphite&#8217;, 8125, opt);<\/span><\/p>\n<p>Our NodeJS Application looks for a statsd server with the hostname <em>graphite<\/em>, In our case it is a container.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p><strong>Step 3C: Create <span style=\"color: #0b5285;\">package.json<\/span>\u00a0<\/strong><strong>file with the following content.<\/strong><\/p>\n<div style=\"background: #272822; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; background: #272822; line-height: 125%;\"><span style=\"color: #f8f8f2;\">{<\/span>\r\n    <span style=\"color: #e6db74;\">\"dependencies\"<\/span><span style=\"color: #f92672;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n        <span style=\"color: #e6db74;\">\"express\"<\/span><span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">\"*\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #e6db74;\">\"lynx\"<\/span><span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">\"*\"\r\n<\/span>        <span style=\"color: #e6db74;\">\"request\"<\/span><span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">\"*\"<\/span>\r\n    <span style=\"color: #f8f8f2;\">},<\/span>\r\n    <span style=\"color: #e6db74;\">\"scripts\"<\/span><span style=\"color: #f92672;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n        <span style=\"color: #e6db74;\">\"start\"<\/span><span style=\"color: #f92672;\">:<\/span> <span style=\"color: #e6db74;\">\"node index.js\"<\/span>\r\n    <span style=\"color: #f8f8f2;\">}<\/span>\r\n<span style=\"color: #f8f8f2;\">}<\/span>\r\n<\/pre>\n<\/div>\n<p>we have two dependencies for this node application.<\/p>\n<ol>\n<li><strong>express<\/strong> &#8211; An Application framework<\/li>\n<li><strong>lynx<\/strong> &#8211; A Client Package to Connect to StatD<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<p><strong>Step 3D: Create <span style=\"color: #0b5285;\">Dockerfile<\/span><\/strong><strong>\u00a0with the following content.<\/strong><\/p>\n<p>Refer to the comments before each line to understand what it is meant to do.<\/p>\n<div style=\"background: #272822; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; background: #272822; line-height: 125%;\"><span style=\"color: #75715e;\"># Base Image<\/span>\r\n<span style=\"color: #f8f8f2;\">FROM<\/span> <span style=\"color: #f8f8f2;\">node:alpine<\/span>\r\n\r\n<span style=\"color: #75715e;\"># Working Directory<\/span>\r\n<span style=\"color: #f8f8f2;\">WORKDIR<\/span> <span style=\"color: #e6db74;\">\"\/app\"<\/span>\r\n\r\n\r\n<span style=\"color: #75715e;\"># COPY the package.json file<\/span>\r\n<span style=\"color: #f8f8f2;\">COPY<\/span> <span style=\"color: #f8f8f2;\">package<\/span><span style=\"color: #f92672;\">.<\/span><span style=\"color: #f8f8f2;\">json<\/span> <span style=\"color: #f92672;\">.<\/span>\r\n\r\n<span style=\"color: #75715e;\"># RUN command to install programs<\/span>\r\n<span style=\"color: #f8f8f2;\">RUN<\/span> <span style=\"color: #f8f8f2;\">npm<\/span> <span style=\"color: #f8f8f2;\">install\r\n\r\n<span style=\"color: #75715e;\"># COPY All the files from Host Present Working Directory to Container <\/span><\/span>\r\n<span style=\"color: #f8f8f2;\">COPY<\/span> <span style=\"color: #f92672;\">.<\/span> <span style=\"color: #f92672;\">.<\/span>\r\n\r\n<span style=\"color: #75715e;\"># Start the program<\/span>\r\n<span style=\"color: #f8f8f2;\">CMD<\/span> <span style=\"color: #f8f8f2;\">[<\/span><span style=\"color: #e6db74;\">\"npm\"<\/span><span style=\"color: #f8f8f2;\">,<\/span> <span style=\"color: #e6db74;\">\"start\"<\/span><span style=\"color: #f8f8f2;\">]<\/span>\r\n<\/pre>\n<\/div>\n<h3><\/h3>\n<p>Make Sure your Directory is having these aforementioned three files. Before you proceed, Just validate if your present workspace is looking similar to what is shown below<\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">aksarav@middlewareinventory:\/apps\/docker\/NodeStatsD $ tree \/apps\/docker\/NodeStatsD \r\n\/apps\/docker\/NodeStatsD\r\n\u251c\u2500\u2500 Dockerfile\r\n\u251c\u2500\u2500 index.js\r\n\u2514\u2500\u2500 package.json\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p><strong>Step 3E: Build the Image\u00a0<\/strong><\/p>\n<p>In the workspace directory itself. Execute the following command to build the image, It might take a minute or two during the first time so please wait.<\/p>\n<p>&nbsp;<\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker build -t nodestatsd .\r\n<\/pre>\n<\/div>\n<p>We are naming this image as <code>nodestatsd<\/code><\/p>\n<p>You can make sure that image is created and available in the local Docker Image Repository using the following Docker CLI command.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker image ls nodestatsd<\/pre>\n<\/div>\n<p><code><\/code><br \/>\nAs we are done with the NodeJS Application Image and it is ready to be launched as a container with StatsD Lynx module.<\/p>\n<h3><script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script><\/h3>\n<h3>Step4:\u00a0 Launch the NodeJS Application Image as a Container<\/h3>\n<p>There cannot be any perfect time than this to start the docker image we have created in the previous step (step3) . So Go on and Create a Docker Container from the image.<\/p>\n<p>Use the following command<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">docker container run -p 8080:8080 -it -d &#8211; name nodejs-statsd nodestatsd\r\n<\/pre>\n<\/div>\n<p>Here the Image Name is <code>nodestatsd<\/code>\u00a0and the Container Name is\u00a0<code>nodejs-statsd\u00a0<\/code><\/p>\n<p>&nbsp;<\/p>\n<h3>Step5: Validate the Graphite and NodeJS Containers are running<\/h3>\n<p>Using the Docker CLI commands, We need to make sure that the Containers we have started on Step1(Graphite) and Step4 (NodeJS App) are up and running.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">aksarav@middlewareinventory:\/apps\/docker\/NodeStatsD $ <span style=\"color: #d9326c;\"><strong>docker ps<\/strong><\/span>\r\nCONTAINER ID        IMAGE                         COMMAND             CREATED             STATUS              PORTS                                                                                                                                                                       NAMES\r\nabe175dc62a9        saravak\/nodestatsd            \"npm start\"         6 seconds ago       Up 5 seconds        0.0.0.0:8080-&gt;8080\/tcp                                                                                                                                                      nodejs-statsd\r\n44913556eedd        graphiteapp\/graphite-statsd   \"\/entrypoint\"       9 minutes ago       Up 9 minutes        0.0.0.0:80-&gt;80\/tcp, 0.0.0.0:2003-2004-&gt;2003-2004\/tcp, 2013-2014\/tcp, 8080\/tcp, 0.0.0.0:2023-2024-&gt;2023-2024\/tcp, 0.0.0.0:8126-&gt;8126\/tcp, 8125\/tcp, 0.0.0.0:8125-&gt;8125\/udp   graphite\r\n<\/pre>\n<\/div>\n<p>As we have successfully validated that both the containers are running. Now we need to connect them with each other.<\/p>\n<p>There are multiple ways to connect two different containers in docker such as<\/p>\n<ol>\n<li>Docker Compose<\/li>\n<li>Docker Container Link<\/li>\n<li>Docker Shared Network.<\/li>\n<\/ol>\n<p>My favourite is the 3rd one and it also recommended by Docker.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step6:\u00a0 Create a Network in Docker and map these two containers<\/h3>\n<p>Using Docker CLI commands we need to create a network (bridged) and map these two containers to that network so that they can communicate with each other.<\/p>\n<p>In other words,\u00a0 NodeJS Application would be able to communicate to the\u00a0 Graphite StatsD Container just by referring its name.<\/p>\n<p>Hope you remember we spoke about this in Step1.\u00a0 Our StatsD Container Name is Graphite and it has hardcoded into the NodeJS Application code.<\/p>\n<p><strong>Step6a:\u00a0 Create a Network<\/strong><\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">$ docker network create <strong>nodeapp-statsd-Net<\/strong> \r\n473360475ebebd266460aa170f1e788376d384e439ca8dc3417f65aac06ff808\r\n<\/pre>\n<\/div>\n<p>We Named our\u00a0 new network as <span style=\"color: #d9326c;\"><code>nodeapp-statsd-Net<\/code><\/span><br \/>\n<span style=\"color: #d9326c;\">\u00a0<\/span><\/p>\n<p>You can validate the Successful creation of this network and its type using <code>docker network ls<\/code>\u00a0command<\/p>\n<blockquote><p>The Default Driver type of the Docker Network is <strong>Bridge<\/strong> and that is\u00a0 sufficient for us<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p><strong>Step6b:\u00a0 Connect our Running Containers to this network<\/strong><\/p>\n<p>The Syntax of the Docker Network Connect command is as follows.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">$ docker network connect [NETWORK NAME] [CONTAINER NAME]<\/pre>\n<\/div>\n<p>When you replace the placeholders with the actual network name and Container name of ours. We will get some command like below.<\/p>\n<p>Execute these commands one after another [ No Response message would come that&#8217;s OK ]<\/p>\n<div style=\"background: #f0f3f3; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\">$ docker network connect nodeapp-statsd-Net graphite\r\n$ docker network connect nodeapp-statsd-Net nodejs-statsd \r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p><strong>Step6c:\u00a0 Inspect the connected containers to the Docker Network<\/strong><\/p>\n<p>Using the following Docker CLI command you can actually list a Specific docker network and see what are the containers connected to that network.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #272822; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; background: #272822; line-height: 125%;\"><span style=\"color: #ff9900;\"><span style=\"color: #ffffff;\">$ docker network inspect nodeapp-statsd-Net  <\/span>           <\/span> \r\n<span style=\"color: #f8f8f2;\">[<\/span>\r\n    <span style=\"color: #f8f8f2;\">{<\/span>\r\n        <span style=\"color: #f92672;\">\"Name\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"nodeapp-statsd-Net\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Id\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"473360475ebebd266460aa170f1e788376d384e439ca8dc3417f65aac06ff808\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Created\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"2019-05-20T21:37:29.0008195Z\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Scope\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"local\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Driver\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"bridge\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"EnableIPv6\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #66d9ef;\">false<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"IPAM\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n            <span style=\"color: #f92672;\">\"Driver\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"default\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n            <span style=\"color: #f92672;\">\"Options\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{},<\/span>\r\n            <span style=\"color: #f92672;\">\"Config\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">[<\/span>\r\n                <span style=\"color: #f8f8f2;\">{<\/span>\r\n                    <span style=\"color: #f92672;\">\"Subnet\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"172.22.0.0\/16\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                    <span style=\"color: #f92672;\">\"Gateway\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"172.22.0.1\"<\/span>\r\n                <span style=\"color: #f8f8f2;\">}<\/span>\r\n            <span style=\"color: #f8f8f2;\">]<\/span>\r\n        <span style=\"color: #f8f8f2;\">},<\/span>\r\n        <span style=\"color: #f92672;\">\"Internal\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #66d9ef;\">false<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Attachable\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #66d9ef;\">false<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Ingress\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #66d9ef;\">false<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"ConfigFrom\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n            <span style=\"color: #f92672;\">\"Network\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"\"<\/span>\r\n        <span style=\"color: #f8f8f2;\">},<\/span>\r\n        <span style=\"color: #f92672;\">\"ConfigOnly\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #66d9ef;\">false<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n        <span style=\"color: #f92672;\">\"Containers\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n            <span style=\"color: #f92672;\">\"44913556eedd31b71524bd1b66ef7f9400214400a5aa40bcb2394bb3212606b1\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n               <strong> <span style=\"color: #f92672;\">\"Name\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"graphite\"<\/span><span style=\"color: #f8f8f2;\">,<\/span><\/strong>\r\n                <span style=\"color: #f92672;\">\"EndpointID\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"3c60d9c82d0cd19824576982b6b10f93e9c6476cdcf87034e5171558c5a57eab\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                <span style=\"color: #f92672;\">\"MacAddress\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"02:42:ac:16:00:02\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                <span style=\"color: #f92672;\">\"IPv4Address\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"172.22.0.2\/16\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                <span style=\"color: #f92672;\">\"IPv6Address\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"\"<\/span>\r\n            <span style=\"color: #f8f8f2;\">},<\/span>\r\n            <span style=\"color: #f92672;\">\"abe175dc62a9295a138449dc94c31aa6822d6f08670def2adda3e83898c1f80d\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{<\/span>\r\n               <strong> <span style=\"color: #f92672;\">\"Name\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"nodejs-statsd\"<\/span><span style=\"color: #f8f8f2;\">,<\/span><\/strong>\r\n                <span style=\"color: #f92672;\">\"EndpointID\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"403c14ee076f7acdc055433b05f58d005891d8729c0ba3cdfc213364a5590f07\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                <span style=\"color: #f92672;\">\"MacAddress\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"02:42:ac:16:00:03\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                <span style=\"color: #f92672;\">\"IPv4Address\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"172.22.0.3\/16\"<\/span><span style=\"color: #f8f8f2;\">,<\/span>\r\n                <span style=\"color: #f92672;\">\"IPv6Address\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #e6db74;\">\"\"<\/span>\r\n            <span style=\"color: #f8f8f2;\">}<\/span>\r\n        <span style=\"color: #f8f8f2;\">},<\/span>\r\n        <span style=\"color: #f92672;\">\"Options\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{},<\/span>\r\n        <span style=\"color: #f92672;\">\"Labels\"<\/span><span style=\"color: #f8f8f2;\">:<\/span> <span style=\"color: #f8f8f2;\">{}<\/span>\r\n    <span style=\"color: #f8f8f2;\">}<\/span>\r\n<span style=\"color: #f8f8f2;\">]<\/span>\r\n<\/pre>\n<\/div>\n<p>From the Output of the preceding command, you can see that our containers named <strong>graphite<\/strong> and<strong> nodejs-statsd<\/strong> are connected to the network<span style=\"color: #000000;\">\u00a0<\/span><strong><em><span style=\"color: #0b5285;\">nodeapp-statsd-Net <\/span><\/em><\/strong><\/p>\n<blockquote><p>Thereby,\u00a0 we have successfully established a Container to Container Connectivity between two containers. You can attach N number of containers to the same network and create a Connectivity\/communication channel between them.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p><strong>Step6d:\u00a0 Before Testing Do a STOP and START on these containers<\/strong><\/p>\n<p>Before starting our testing. I would recommend stopping and Starting our containers so that our containers are as fresh as possible.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><strong># Stop the Containers<\/strong>\r\n$ docker stop nodejs<span style=\"color: #333333;\">-<\/span>statsd\r\n$ docker start nodejs<span style=\"color: #333333;\">-<\/span>statsd\r\n\r\n<strong># Start the Containers<\/strong>\r\n$ docker stop graphite\r\n$ docker start graphite<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<h2>Time for the Rocket Launch aka Validation<\/h2>\n<p>T Minus 9 Seconds. 8,7,6,5,4,3,2,1<\/p>\n<p>Now you can access the URLs we have designed in the index.js file on our Application <code>\/GaugesApp,<\/code> <code>\/TimerApp<\/code> etc.<\/p>\n<p>In your host machine where you are running the containers ( in my case MAC)\u00a0 open a browser and try the URLs<\/p>\n<p>http:\/\/localhost:8080\/GaugesApp<\/p>\n<p>http:\/\/localhost:8080\/<\/p>\n<p>http:\/\/localhost:8080\/TimerApp<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.38.10-AM.png\"><img class=\"alignnone size-full wp-image-3867\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.38.10-AM.png\" alt=\"NodeJS StatsD\" width=\"928\" height=\"404\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.38.10-AM.png 928w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.38.10-AM-300x131.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.38.10-AM-768x334.png 768w\" sizes=\"(max-width: 928px) 100vw, 928px\" \/><\/a><\/p>\n<p>You should see the page displayed with a Single Line message containing the Application Name you have reached.<\/p>\n<p>Though this calls can be tracked in StatsD &#8211; Graphite web interface. We need more data for the Graph to Generate and look good.<\/p>\n<h2><script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script><\/h2>\n<h2>A Load Testing and Graph Generation<\/h2>\n<p>I have built a Simple Shell script that runs with 5 seconds interval and access the <span style=\"color: #148de3;\"><em>http:\/\/localhost:8080\/GaugesApp<\/em> <\/span>and\u00a0<em>\u00a0<span style=\"color: #148de3;\">http:\/\/localhost:8080\/<\/span><\/em> urls<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"border: 1px solid #FF0000;\">#<\/span><span style=\"color: #666666;\">!<\/span><span style=\"border: 1px solid #FF0000;\">\/bin\/bash<\/span>\r\n\r\n<span style=\"color: #aa22ff; font-weight: bold;\">while<\/span> <span style=\"color: #aa22ff; font-weight: bold;\">true<\/span>; <span style=\"color: #aa22ff; font-weight: bold;\">do\r\n<\/span>  # To Try Home Page\r\n  curl http<span style=\"color: #666666;\">:<\/span><span style=\"color: #008800; font-style: italic;\">\/\/localhost:8080\/\r\n<\/span>  \r\n  # To Try Gauges App\r\n  curl http<span style=\"color: #666666;\">:<\/span><span style=\"color: #008800; font-style: italic;\">\/\/localhost:8080\/GaugesApp<\/span>\r\n  echo <span style=\"color: #bb4444;\">\"\"<\/span>\r\n  sleep <span style=\"color: #666666;\">5<\/span>\r\ndone\r\n<\/pre>\n<\/div>\n<p>When you run this script it gives a call to the HomePage and GaugesApp.<\/p>\n<p>Since the GaugesApp is designed\u00a0 to connect to remote websites and do some task (just imagine that&#8217;s our logic)\u00a0 we can actually monitor the time taken to complete this remote HTTP call and display it as a graph<\/p>\n<p><strong>To Access the GaugesApp Graph.<\/strong><\/p>\n<pre>Go to Graphite Web Interface -&gt; stats -&gt; gauges -&gt;\u00a0SampleNodeJSApp -&gt; GaugesApp<\/pre>\n<p><strong>and To Access the HomePage Graph<\/strong><\/p>\n<pre>Go to Graphite Web Interface -&gt; stats -&gt; gauges -&gt; SampleNodeJSApp -&gt; GaugesApp<\/pre>\n<p>Here is the final Graph showing the response times of Google and Middlewareinventory ( Suppose that&#8217;s our Logic in the NodeJS Application)<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png\"><img class=\"alignnone size-full wp-image-3868\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png\" alt=\"NodeJS StatsD\" width=\"951\" height=\"461\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png 951w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM-300x145.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM-768x372.png 768w\" sizes=\"(max-width: 951px) 100vw, 951px\" \/><\/a><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Conclusion<\/h2>\n<p>In this long and brief post, we have designed our own NodeJS appliation with Express, Lynx and Request modules with a logic to connect to remote servers\/urls and perform NO action. We have also created a Docker Image and started this NodeJS Application as a container named<code> \"nodejs-statsd\"\u00a0<\/code>\u00a0and started another container named <code>graphite<\/code> from the official Graphite-StatsD image<\/p>\n<p>We created a Docker Network and Connected these containers together and enabled connectivity between each other.<\/p>\n<p>Created a Shell Script to perform a quick load test by accessing the NodeJS Application which is designed already to add the counter and gauges to the graphite container.<\/p>\n<p>Upon the Load Test running,\u00a0 We monitored the Graphite Web interface and observed the graphs of the response time of the remote URLs.<\/p>\n<p>Note*: The Response-time monitoring can be done easily with proper plugins in hand with tools like Graphite and Grafana. This application is just a sample to give you an idea how NodeJS and StatsD works together and how to use StatsD for your Application monitoring.<\/p>\n<p>Hope this article helps.<\/p>\n<p>Rate this article [ratings] For any help feel free to comment.<\/p>\n<p>Cheers,<br \/>\nSarav<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577415\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"3855\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577415\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577415\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Creating Application is Tough, I agree. So does monitoring the application statistics like Number of Hits, Response time etc. But if we have the right tools in hand, we can do wonders In this post, we are going to develop a Simple NODE JS web application with StatsD and Graphite[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":3868,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[95,152,275,273,274],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>NodeJS StatsD with Graphite On Docker Example - Create Graphs and Metrics<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"NodeJS StatsD with Graphite On Docker Example - Create Graphs and Metrics\" \/>\n<meta property=\"og:description\" content=\"Creating Application is Tough, I agree. So does monitoring the application statistics like Number of Hits, Response time etc. But if we have the right tools in hand, we can do wonders In this post, we are going to develop a Simple NODE JS web application with StatsD and Graphite[...]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-05-22T00:05:29+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-13T16:29:55+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"951\" \/>\n\t<meta property=\"og:image:height\" content=\"461\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/05\/Screen-Shot-2019-05-22-at-4.36.46-AM.png\",\"width\":951,\"height\":461,\"caption\":\"NodeJS StatsD\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/\",\"name\":\"NodeJS StatsD with Graphite On Docker Example - Create Graphs and Metrics\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#primaryimage\"},\"datePublished\":\"2019-05-22T00:05:29+00:00\",\"dateModified\":\"2022-03-13T16:29:55+00:00\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"NodeJS StatsD with Graphite On Docker Example &#8211; Create Graphs and Metrics\",\"datePublished\":\"2019-05-22T00:05:29+00:00\",\"dateModified\":\"2022-03-13T16:29:55+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#primaryimage\"},\"articleSection\":\"Development,Docker,Graphite,NodeJS,StatsD\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/docker-nodejs-statsd-graphite-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/3855"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=3855"}],"version-history":[{"count":11,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/3855\/revisions"}],"predecessor-version":[{"id":3880,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/3855\/revisions\/3880"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/3868"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=3855"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=3855"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=3855"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}