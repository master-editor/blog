{"id":2346,"date":"2019-01-01T22:12:22","date_gmt":"2019-01-01T16:42:22","guid":{"rendered":"http:\/\/www.middlewareinventory.com\/?p=2346"},"modified":"2022-01-19T11:16:27","modified_gmt":"2022-01-19T05:46:27","slug":"ansible-wait_for-examples","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/","title":{"rendered":"Ansible wait_for module examples &#8211; How to | Devops Junction"},"content":{"rendered":"<h2>Introduction to Ansible wait_for module<\/h2>\n<p>Ansible <strong>wait_for<\/strong>\u00a0module can be used to pause your playbook execution and to wait for many different things or conditions before continuing with the execution. The wait_for module of ansible is to make your playbook or task execution halt or pause for various reasons and for numerous conditions.<\/p>\n<p>You can compare it with the sleep of any given programming language but it is more than that. Yes, it does have a conditional validation.<\/p>\n<p>Take our real-life examples.<\/p>\n<p><em>We Sleep<\/em> When we are expecting our friend who is always late, <em>We Sleep<\/em> till mom kicks us out of bed, <em>We Sleep<\/em> till our spouse spill water at our face and angrily say &#8220;WAKE UP&#8221;<\/p>\n<p>Besides all,\u00a0 there are few like me. We Sleep for no specific reason.<\/p>\n<blockquote><p>Ansible Wait_for module is capable to make your playbook Sleep for no specific reason ( Simply Sleep) as well as while we wait for something ( A Conditional Sleep)<\/p><\/blockquote>\n<p>Like people, Our playbooks also have different conditions to wait for and sleep and we have listed some of the most known and used conditions where ansible playbook has to go sleep or wait for.<\/p>\n<p><img class=\"wp-image-2600 size-medium alignright\" style=\"color: #000000;\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/wait-for-200x300.jpeg\" alt=\"ansible wait_for examples\" width=\"200\" height=\"300\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/wait-for-200x300.jpeg 200w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/wait-for.jpeg 634w\" sizes=\"(max-width: 200px) 100vw, 200px\" \/><\/p>\n<ul>\n<li><span style=\"font-size: 14pt;\">wait_for the port to be available or not available<\/span><\/li>\n<li><span style=\"font-size: 14pt;\">wait_for the file to be created with a state, present or absent<\/span><\/li>\n<li><span style=\"font-size: 14pt;\">wait_for some period of time, Simply sleep for a specified time (in seconds)<\/span><\/li>\n<li><span style=\"font-size: 14pt;\">wait_for the server to come up or get rebooted.<\/span><\/li>\n<li><span style=\"font-size: 14pt;\">wait_for a String to be available in the log file\u00a0 Like Log Parsing or Searching\u00a0<\/span><\/li>\n<li><span style=\"font-size: 14pt;\">wait_for SSH to be ready at the remote servers<\/span><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>We are going to see all these aforementioned usage scenarios (or) test cases of ansible wait_for module with the examples (playbooks) I have written. one by one.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h2>Ansible wait_for examples<\/h2>\n<p>We have given short snippets of ansible task and playbooks for each of the aforementioned scenarios.<\/p>\n<p>These are examples we have covered in this post<\/p>\n<ol>\n<li>ansible wait_for the port to open<\/li>\n<li>ansible wait_for the port to close<\/li>\n<li>ansible wait_for the port to drain and close active connections<\/li>\n<li>ansible Wait_for\u00a0file to be created<\/li>\n<li>ansible Wait_for\u00a0file to be deleted or\u00a0lock file\u00a0to be removed<\/li>\n<li>ansible wait_for\u00a0seconds or sleep for seconds<\/li>\n<li>ansible Wait_for reboot ( wait_for SSH )<\/li>\n<li>ansible Wait_for the string to be available in the log file<\/li>\n<li>ansible wait_for the process to finish<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h3>Ansible wait for the port to open<\/h3>\n<p>Using ansible wait_for module along with <code>host<\/code> and <code>port<\/code>, we can wait a maximum of <code>timeout<\/code> seconds for the port to be available or not available.<\/p>\n<p>Consider the following task snippet which waits for the port to be available.\u00a0 Actually, this task is validating if the server has come up and RUNNING by validating that the port is open.<\/p>\n<p><span style=\"font-size: 14pt;\"><strong>The Playbook Snippet<\/strong><\/span><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Validating if the WebServer is UP and OPENED the PORT\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    tags:<\/span> amvalidate1\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        host:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{inventory_hostname}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        port:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{webserver_port}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">30<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        state:<\/span> started\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        msg:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"WebServer PORT is not Listening\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    when:<\/span> ansible_hostname == <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{inventory_hostname}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    register:<\/span> amvalidate1\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">true<\/span><\/pre>\n<p><span style=\"font-size: 14pt;\"><strong>Explanation:<\/strong><\/span><\/p>\n<p><strong>host:<\/strong> The Hostname<br \/>\n<strong>port:<\/strong> The port to listen<br \/>\n<strong>delay:<\/strong> Delay in seconds before starting the validation<br \/>\n<strong>timeout:<\/strong> timeout after defined seconds.<br \/>\n<strong>state:<\/strong>\u00a0 Make sure the Port if OPEN<br \/>\n<strong>msg:<\/strong> A Custom message to be printed in case of failure after the allocated time(timeout) elapsed.<\/p>\n<p>While the previous snippet was designed to run in the remote node, Here we present another way around to accomplish the same using <code>local_action<\/code> module.<\/p>\n<p><span style=\"font-size: 14pt;\">Running the same task Local ( An Another Approach)<\/span><\/p>\n<p><strong><span style=\"font-size: 14pt;\">The Playbook Snippet ( local_action)<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Wait for webserver to start.\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  local_action:<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    module:<\/span> wait_for\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    host:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{ inventory_hostname }}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    port:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{ webserver_port }}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">300<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    state:<\/span> started<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>ansible wait for the port to close<\/h3>\n<p>If you modify the playbook given in Example 1 a little bit. you would be able to achieve the requirement of waiting till the port to close<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Validating if the WebServer port is closed.\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    tags:<\/span> amvalidate1\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        host:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{inventory_hostname}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        port:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{webserver_port}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">30<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        state:<\/span> stopped\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        msg:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"WebServer PORT is not yet stopped\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    when:<\/span> ansible_hostname == <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{inventory_hostname}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    register:<\/span> amvalidate1\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">true<\/span><\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3><\/h3>\n<h3>ansible wait_for the port to drain and close active connections<\/h3>\n<p>you can wait_for the port to drain its active connections (or) close its active connections\u00a0 using the <code>state: drained<\/code> argument<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Validating if the port is drained \r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    tags:<\/span> portvalidate\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        host:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{inventory_hostname}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        port:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{webserver_port}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">30<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        state:<\/span> drained<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>ansible Wait_for\u00a0file to be created<\/h3>\n<p>The following task snippet is to validate if the file is present in other it will validate if the file is created already using\u00a0<code>state: present<\/code><\/p>\n<p>If you change the state argument of wait_for to <code>state: absent<\/code> it will make sure that the file is not present (absent) in other words removed or deleted.<\/p>\n<p><strong><span style=\"font-size: 14pt;\">The Playbook Snippet<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Making sure that the Log file is present in the corresponding directory\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  tags:<\/span> filepresensevalidation\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  register:<\/span> filepresensevalidation\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    path:<\/span>  <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{logfile}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">30<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    state:<\/span> present\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    msg:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"Specified LOG FILE is not present\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  when:<\/span> ansible_hostname == <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{groups['app'][0]}}<\/span>\"<\/span> and adminlogfile is defined\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">true<\/span><\/pre>\n<p><strong><span style=\"font-size: 14pt;\">Explanation:<\/span><\/strong><\/p>\n<p><strong>path:<\/strong>\u00a0The fully qualified location of the file we are validating.<br \/>\n<strong>delay:<\/strong> Delay in seconds before starting the validation<br \/>\n<strong>timeout:<\/strong> timeout after defined seconds.<br \/>\n<strong>state:<\/strong>\u00a0 Make sure the file is available(present)<br \/>\n<strong>msg:<\/strong> A Custom message to be printed in case of failure. which is when the file is not present.<\/p>\n<p>&nbsp;<\/p>\n<h3>ansible Wait_for\u00a0file to be deleted or\u00a0lock file\u00a0to be removed<\/h3>\n<p>we can use wait_for module to wait for the file deletion as well. such as waiting for the lock file to be deleted before starting the instance<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Making sure that the lock file is not present (or) removed\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    path:<\/span>  <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{lockfile}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">30<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    state:<\/span> absent\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    msg:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"Specified LOCK FILE is still present\"<\/span><\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>ansible wait for\u00a0seconds or sleep for seconds<\/h3>\n<p>wait_for module can also be used to simply make the execution of the play to sleep for certain seconds. in other words, simply pause the playbook execution.<\/p>\n<p>This can be done with simply setting the <code>delay<\/code> and <code>timeout<\/code> arguments. Consider the following playbook with the task to sleep for<\/p>\n<p><strong><span style=\"font-size: 14pt;\">The Playbook Snippet<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-meta\" style=\"color: #75715e;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  - name:<\/span> Sleep Playbook\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    hosts:<\/span> app\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    gather_facts:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">no<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">       -  name:<\/span> Sleep for <span class=\"hljs-number\" style=\"color: #ae81ff;\">60<\/span> seconds and timeout\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          tags:<\/span> sleep60\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">            delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">60<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">            timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">0<\/span><\/pre>\n<p><strong><span style=\"font-size: 14pt;\">Explanation:<\/span><\/strong><\/p>\n<p><strong>delay:<\/strong> Delay in seconds before starting the validation (or) processing<br \/>\n<strong>timeout:<\/strong> timeout after defined seconds.<\/p>\n<p>Here no validation is being performed like file presence or port status. The task is just to pause the execution for 60 seconds just like <strong>sleep<\/strong> statement\u00a0 in any programming language<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2><\/h2>\n<h3><\/h3>\n<h3>ansible Wait_for reboot ( wait_for SSH )<\/h3>\n<p>There are cases where we want our remote nodes to be rebooted or restarted. For example, Take the Patching as an example. As part of quarterly patching, we upgrade the installed software and packages and do various other stuff along with a final reboot to make the changes effective.<\/p>\n<p>When we reboot the box. you might get your ansible play failed with the error <strong>&#8220;Shared connection closed&#8221;<\/strong><\/p>\n<p>But this can be avoided and you can reboot the box and wait for the server to come back up and execute the post-reboot\u00a0validations or checks.<\/p>\n<p>There are many methods to accomplish this<\/p>\n<blockquote><p><strong>For Ansible 2.7 and more<\/strong> &#8211; There is a dedicated <strong><span style=\"color: #1092c2;\">reboot<\/span><\/strong> module<br \/>\n<strong>For previous versions<\/strong> &#8211;\u00a0 Either use ansible\u00a0<span style=\"color: #1092c2;\"><strong>wait_for<\/strong><\/span> or ansible\u00a0<span style=\"color: #1092c2;\"><strong>wait_for_connection\u00a0<\/strong><\/span><\/p><\/blockquote>\n<p>Since this post is about ansible wait_for module. Let us go with the same option. Consider the following playbook I have created for linux patching. It performs <code>yum update<\/code> and <code>reboot<\/code> the box and print the <code>uptime<\/code><\/p>\n<p><strong><span style=\"font-size: 14pt;\">The Playbook<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-meta\" style=\"color: #75715e;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  - name:<\/span> Patch the server and Reboot\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    hosts:<\/span> app\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    gather_facts:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">no<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">      - name:<\/span> Patch the server\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        become:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        tags:<\/span> Patch\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        shell:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"yum -y update\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        register:<\/span> patchresult\r\n\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">      - name:<\/span> Reboot the server\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        tags:<\/span> reboot\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        become:<\/span> <span class=\"hljs-literal\" style=\"color: #ae81ff;\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        shell:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"sleep 5 &amp; reboot\"<\/span>\r\n        <span class=\"hljs-attr\" style=\"color: #f92672;\">async:<\/span><span class=\"hljs-comment\" style=\"color: #75715e;\"> 1<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        poll:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">0<\/span>\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">      - name:<\/span> Wait for the reboot and reconnect \r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          port:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">22<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          host:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">'<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}<\/span>'<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          search_regex:<\/span> OpenSSH\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">          timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">60<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        connection:<\/span> local\r\n\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">      - name:<\/span> Check the Uptime of the servers\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        shell:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"uptime\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">        register:<\/span> Uptime\r\n\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">      - debug:<\/span> var=Uptime<\/pre>\n<p>&nbsp;<\/p>\n<p><strong><span style=\"font-size: 14pt;\">Explanation<\/span><\/strong><\/p>\n<p>In the preceding playbook, we have four tasks.<\/p>\n<p><span style=\"color: #db0d6a; font-size: 14pt;\">The first task<\/span> is running a single command <span style=\"color: #09478f;\">&#8220;yum -y update&#8221;<\/span> over the shell module, which is responsible for updating the packages and software in the boxes.<\/p>\n<p><span style=\"font-size: 14pt; color: #db0d6a;\">The Second task\u00a0<\/span>is to reboot the server. we execute the <span style=\"color: #09478f;\">reboot<\/span> command over shell module. The task contains two important arguments which are <em>async<\/em> and <em>poll<\/em><\/p>\n<p><strong>async:\u00a0\u00a0<\/strong>By default, the tasks in playbook block the execution till it gets completed.\u00a0 If you mention async in the task. It will be run asynchronously, in other words, it runs detached and in the background.\u00a0 ansible master keeps track of this task by using the <em>poll <\/em>interval.\u00a0 <em>it accepts the time in seconds it should keep the connection open before times out<\/em><br \/>\n<strong>poll:\u00a0<\/strong>Time in seconds, at what interval the ansible master should poll the Job\/task to know whether it is completed.<\/p>\n<blockquote><p>when the poll is set to 0 seconds, Ansible will <strong>fire the task and forget it.\u00a0<\/strong>which is used specifically in here so that despite the remote servers shutdown the playbook will still be on<\/p><\/blockquote>\n<p><span style=\"color: #db0d6a; font-size: 14pt;\">The Third task<\/span> is <span style=\"color: #09478f;\">wait_for<\/span>. which is our primary focus so let me explain all the arguments of this task<\/p>\n<p><strong>port:\u00a0\u00a0<\/strong>we are waiting for the port 22 (SSH Default port) to be open<br \/>\n<strong>host:\u00a0\u00a0<\/strong>we are using the ansible built-in variables here <code>inventory_hostname<\/code> or <code>ansible_host<\/code>\u00a0which will represent the current host from of the\u00a0host group defined in the playbook (app)<br \/>\n<strong>search_regex:\u00a0\u00a0<\/strong>we are looking for a word <code><span style=\"color: #09478f;\">OpenSSH<\/span><\/code>\u00a0once the Port is open.<br \/>\n<strong>delay:<\/strong> Delay in seconds before starting the validation<br \/>\n<strong>timeout:<\/strong> timeout the execution after defined seconds.<br \/>\n<strong>connection:\u00a0<\/strong> Execute the connection from local (master)<\/p>\n<blockquote><p>When the connection is set to local. The Master will try to connect to the remote boxes from the master. It is more like executing\u00a0\u00a0<span style=\"color: #09478f;\"><code>nc<\/code><\/span> or <span style=\"color: #09478f;\"><code>telnet<\/code><\/span> command to make sure the port is open<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>ansible Wait_for the string to be available in the log file<\/h3>\n<p>Log files are the Swiss Army Knife of every IT analyst. We rely on the logs for various things in our day to day life. Let it be for troubleshooting or for quick validation like making sure the server is UP and RUNNING.<\/p>\n<p>Let us take some real-time examples, The task snippet given below is created to validate if the Weblogic AdminServer is successfully started.<\/p>\n<p>Weblogic will write clear information in the log file similar to what is given below.<\/p>\n<pre class=\"p1\"><code><\/code><\/pre>\n<p><em><span class=\"s1\">&lt;Dec 28, 2018 3:23:07,661 PM IST&gt; &lt;Notice&gt; &lt;WebLogicServer&gt; &lt;Saravanans-MacBook-Air.local&gt; &lt;AdminServer&gt; &lt;[STANDBY] ExecuteThread: &#8216;2&#8217; for queue: &#8216;weblogic.kernel.Default (self-tuning)&#8217;&gt; &lt;&lt;WLS Kernel&gt;&gt; &lt;&gt; &lt;d5ba0f5f-250c-4991-aa59-e6d3f3cb0ec7-0000001a&gt; &lt;1545990787661&gt; &lt;[severity-value: 32] [rid: 0] [partition-id: 0] [partition-name: DOMAIN] &gt; &lt;BEA-000360&gt; &lt;The server started in RUNNING mode.&gt;<\/span><\/em><\/p>\n<pre class=\"p1\"><code><\/code><\/pre>\n<p>So here our search string is\u00a0<span style=\"color: #075173;\"><code><code><\/code><\/code><em><span class=\"s1\">The server started in RUNNING mode<\/span><\/em><\/span><\/p>\n<p><strong><span style=\"font-size: 14pt;\">The Playbook Snippet<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Validating if the AdminServer state is RUNNING\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  tags:<\/span> validatestart\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    path:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{serverlogfile}}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    search_regex:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"The server started in RUNNING mode\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    delay:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    timeout:<\/span> <span class=\"hljs-number\" style=\"color: #ae81ff;\">60<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    msg:<\/span> <span class=\"hljs-string\" style=\"color: #e6db74;\">\"Not able to find the String RUNNING in the Logfile\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  when:<\/span> ansible_hostname == <span class=\"hljs-string\" style=\"color: #e6db74;\">\"<span class=\"hljs-template-variable\" style=\"color: #e6db74;\">{{groups['app'][0]}}<\/span>\"<\/span> and serverlogfile is defined\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  register:<\/span> validatestart\r\n<\/pre>\n<p><strong><span style=\"font-size: 14pt;\">Explanation<\/span><\/strong><\/p>\n<p><strong>path:\u00a0\u00a0<\/strong>Fully Qualified log file name including the path<br \/>\n<strong>search_regex<\/strong>: The Search String we are going look for in the log file, Also support regular expressions<br \/>\n<strong>delay<\/strong>:\u00a0 Start the task after a defined second of initial delay<br \/>\n<strong>timeout<\/strong>: When to stop and time out the task, in seconds<br \/>\n<strong>msg<\/strong>: Custom message in case of failure<\/p>\n<p>in the when conditional statement, you can also see that we have pre-validation to make sure that the <code>serverlogfile<\/code> variable is defined<\/p>\n<p>this example can also be interpreted for ansible wait_for service to start. you can use ansible wait_for till the service is starting. Here we have taken weblogic application server. you can choose any other and apply the same example. Hope it helps.<\/p>\n<p>&nbsp;<\/p>\n<h3>ansible wait_for some process to finish<\/h3>\n<p>In Linux based Operating System, if you want to wait for the process to finish. The best approach to get that done is using the PID and the proc file.<\/p>\n<p>Whenever the process is started in the Linux based os, there will be a PID assigned to it and the pid will have a reference in the \/proc directory of linux. in other words, there will be a new file created in the \/proc directory with the pid.<\/p>\n<p>All you have to do is wait for that file to be removed. When the file is removed you can consider the process is died or finished.<\/p>\n<p>let us say our process has the PID 8798 and here is the playbook snippet you could use to wait for it to get completed (or) finish.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #23241f; color: #f8f8f2;\"><span class=\"hljs-attr\" style=\"color: #f92672;\">- name:<\/span> Wait until the process is finished and pid was destroyed\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">  wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    path:<\/span> \/proc\/<span class=\"hljs-number\" style=\"color: #ae81ff;\">8798<\/span>\/status\r\n<span class=\"hljs-attr\" style=\"color: #f92672;\">    state:<\/span> absent<\/pre>\n<p>&nbsp;<\/p>\n<p>Further References:\u00a0 <a href=\"https:\/\/docs.ansible.com\/ansible\/2.5\/modules\/wait_for_module.html\">Ansible Wait_for module<\/a> &#8211; Ansible documentation<\/p>\n<p>Rate this article [ratings]<\/p>\n<p>&nbsp;<\/p>\n<p>Thanks,<br \/>\nSaravAK<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577779\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"2346\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577779\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577779\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Introduction to Ansible wait_for module Ansible wait_for\u00a0module can be used to pause your playbook execution and to wait for many different things or conditions before continuing with the execution. The wait_for module of ansible is to make your playbook or task execution halt or pause for various reasons and for[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2600,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible wait_for module examples - How to | Devops Junction<\/title>\n<meta name=\"description\" content=\"ansible wait_for examples. Examples of frequently used cases like ansible wait for the port to be available or not available, ansible wait_for the file to be created or removed, ansible wait_for examples, ansible wait_for the server to come up after reboot. wait_for a String to be available in the log, or wait_for SSH\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible wait_for module examples - How to | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"ansible wait_for examples. Examples of frequently used cases like ansible wait for the port to be available or not available, ansible wait_for the file to be created or removed, ansible wait_for examples, ansible wait_for the server to come up after reboot. wait_for a String to be available in the log, or wait_for SSH\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-01-01T16:42:22+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-19T05:46:27+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/wait-for.jpeg\" \/>\n\t<meta property=\"og:image:width\" content=\"634\" \/>\n\t<meta property=\"og:image:height\" content=\"951\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/wait-for.jpeg\",\"width\":634,\"height\":951,\"caption\":\"ansible wait_for examples\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\",\"name\":\"Ansible wait_for module examples - How to | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#primaryimage\"},\"datePublished\":\"2019-01-01T16:42:22+00:00\",\"dateModified\":\"2022-01-19T05:46:27+00:00\",\"description\":\"ansible wait_for examples. Examples of frequently used cases like ansible wait for the port to be available or not available, ansible wait_for the file to be created or removed, ansible wait_for examples, ansible wait_for the server to come up after reboot. wait_for a String to be available in the log, or wait_for SSH\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible wait_for module examples &#8211; How to | Devops Junction\",\"datePublished\":\"2019-01-01T16:42:22+00:00\",\"dateModified\":\"2022-01-19T05:46:27+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#primaryimage\"},\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2346"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=2346"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2346\/revisions"}],"predecessor-version":[{"id":8052,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2346\/revisions\/8052"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/2600"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=2346"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=2346"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=2346"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}