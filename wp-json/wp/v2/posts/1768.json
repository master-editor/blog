{"id":1768,"date":"2018-09-23T07:47:31","date_gmt":"2018-09-23T02:17:31","guid":{"rendered":"http:\/\/www.middlewareinventory.com\/?p=1768"},"modified":"2022-04-05T20:38:13","modified_gmt":"2022-04-05T15:08:13","slug":"ansible-changed_when-and-failed_when-examples","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/","title":{"rendered":"Ansible changed_when and failed_when examples"},"content":{"rendered":"<p>In this post, we are going to see how to use conditional statements of Ansible\u00a0such as\u00a0<strong>when<\/strong>, <strong>changed_when<\/strong>, <strong>failed_when<\/strong> and where to use them appropriately and how it works. By these conditional modules, Ansible provides a way for us to define when should ansible run a certain task or consider the executed task as Success or failure.<\/p>\n<p>Long Story Short, These modules give us a way to make ansible do something when a certain condition is met or satisfied<\/p>\n<p>let us cover each conditional statements one by one with examples.<\/p>\n<p>We presume that you have all the basic knowledge of Ansible. If not, we highly recommend you to refer the following articles and come back.<\/p>\n<p>Ansible Basics: <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-playbook-example\/\">What is Ansible, Ad hoc commands and Playbooks<\/a><\/p>\n<p>Ansible In Action:\u00a0 <a href=\"https:\/\/www.middlewareinventory.com\/blog\/server-provisioning-with-vagrant-and-ansible-apache-server-setup-example\/\">How setup your own ansible infrastructure using Vagrant and run your playbook<\/a><\/p>\n<p>These articles can help you to get started with Ansible.<\/p>\n<p>Find more<a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-playbook-example\/\"> ansible playbook examples<\/a> here<\/p>\n<p>&nbsp;<\/p>\n<h2>The Ansible <span style=\"color: #e32434;\">when<\/span>\u00a0Statement<\/h2>\n<p>Ansible when statement is more like if statement in any given programming language. It evaluates if a condition is met or satisfied.<\/p>\n<p>Consider yourself having any of the following requirements<\/p>\n<ol>\n<li>You want to run a task only in a specific box<\/li>\n<li>You want to run a task based on the output of another task<\/li>\n<li>You want to skip or proceed with an installation\u00a0when the OS version is Linux or Ubuntu<\/li>\n<li>You want to perform some disk clean up tasks when a threshold is reached<\/li>\n<li>You want to control the execution when a certain value is reached in Loop<\/li>\n<\/ol>\n<p>More and more.\u00a0 These are all the few test cases or real-time usage scenarios, I could think of.\u00a0 I am certain, there would be more explored and unexplored possibilities for these conditional statements.<\/p>\n<p>&nbsp;<\/p>\n<h2>How to use ansible <span style=\"color: #e32434;\">when<\/span>\u00a0Statement<\/h2>\n<p>We are going to provide various examples of how to use ansible when statement\u00a0,\u00a0You can choose to read whichever example you would like to read<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 1:\u00a0 Shutdown the Debian flavoured servers<\/h3>\n<p>In the following playbook,\u00a0 we have used a when statement and a command to execute. The Command will only execute when the defined condition is satisfied, which is exactly\u00a0<em>when the Operating system of the host is Debian<\/em><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"shut<\/span> <span style=\"color: #4e9a06;\">down<\/span> <span style=\"color: #4e9a06;\">Debian<\/span> <span style=\"color: #4e9a06;\">flavored<\/span> <span style=\"color: #4e9a06;\">systems\"<\/span>\r\n    <span style=\"color: #000000;\">command<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">\/sbin\/shutdown -t now<\/span>\r\n    <span style=\"color: #000000;\">when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">ansible_os_family == \"Debian\"<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 2:\u00a0 Install HTTPD when httpd is not installed already<\/h3>\n<p>Being aware that shell would return <strong>not found <\/strong>error message when the given command is not installed. We are using it as our search keyword to determine the installation of httpd.In this example, we are first making sure whether &#8220;Apache\u00a0httpd&#8221; is already installed by running the httpd command over the shell.\u00a0 The output of the command is saved into a register variable named &#8220;<code>validatedhttpd<\/code>&#8221;<\/p>\n<p>When we run the following playbook, The first task will run the command httpd and the result of the command will be stored in &#8220;<code>validatehttpd<\/code>&#8221; register variable.<\/p>\n<p>Then the second task, which is to install httpd using yum module. Will first execute the when condition we have specified and see if it is TRUE.<\/p>\n<p>Therefore, If there is a &#8220;not found&#8221; error in the register variable. The HTTPD will be installed. If there is anything else.\u00a0 HTTPD will not be installed and the task will be skipped.<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">---<\/span> \r\n<span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">hosts<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">web<\/span>\r\n  <span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"Determine<\/span> <span style=\"color: #4e9a06;\">if<\/span> <span style=\"color: #4e9a06;\">the<\/span> <span style=\"color: #4e9a06;\">HTTPD<\/span> <span style=\"color: #4e9a06;\">is<\/span> <span style=\"color: #4e9a06;\">installed\"<\/span>\r\n    <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">validatehttpd<\/span>\r\n    <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">httpd<\/span>\r\n\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">Ensure Apache is at the Latest version<\/span>\r\n    <span style=\"color: #000000;\">become<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">yes<\/span>\r\n    <span style=\"color: #000000;\">become_user<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">root<\/span>\r\n    <span style=\"color: #000000;\">yum<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n      <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">httpd<\/span>\r\n      <span style=\"color: #000000;\">state<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">latest<\/span>\r\n    <span style=\"color: #000000;\">when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">'not<\/span> <span style=\"color: #4e9a06;\">found'<\/span> <span style=\"color: #000000;\">in validatehttpd.stdout<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<h3>Example 3: [Multiple Conditions in Single when statement] Shutdown only <span style=\"font-family: 'andale mono', monospace;\">CentOS-6<\/span> and <span style=\"font-family: 'andale mono', monospace;\">Debian-7\u00a0<\/span><\/h3>\n<p>Our requirement here is to shut down only CentOS6 and Debian7 version flavoured systems. So our conditional statement should be as followsAs said earlier,\u00a0 when is more like an if statement so it should support the multiple conditions in a single validation.<\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">(ansible_distribution == \"CentOS\" and ansible_distribution_major_version == \"6\") or<\/span>\r\n<span style=\"color: #000000;\">(ansible_distribution == \"Debian\" and ansible_distribution_major_version == \"7\")<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<blockquote><p>Here we have used parenthesis ( ) for a grouping<\/p><\/blockquote>\n<p>The Playbook is given below<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">---<\/span>\r\n<span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">hosts<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">all<\/span>\r\n  <span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"shut<\/span> <span style=\"color: #4e9a06;\">down<\/span> <span style=\"color: #4e9a06;\">CentOS<\/span> <span style=\"color: #4e9a06;\">6<\/span> <span style=\"color: #4e9a06;\">and<\/span> <span style=\"color: #4e9a06;\">Debian<\/span> <span style=\"color: #4e9a06;\">7<\/span> <span style=\"color: #4e9a06;\">systems\"<\/span>\r\n    <span style=\"color: #000000;\">command<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">\/sbin\/shutdown -t now<\/span>\r\n    <span style=\"color: #000000;\">when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">(ansible_distribution == \"CentOS\" and ansible_distribution_major_version == \"6\") or<\/span>\r\n          <span style=\"color: #000000;\">(ansible_distribution == \"Debian\" and ansible_distribution_major_version == \"7\")<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>If our requirement is just to validate, If the OS distribution is <strong>CentOS<\/strong> and version is <strong>6\u00a0<\/strong>, We could write it like this<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"shut<\/span> <span style=\"color: #4e9a06;\">down<\/span> <span style=\"color: #4e9a06;\">CentOS<\/span> <span style=\"color: #4e9a06;\">6<\/span> <span style=\"color: #4e9a06;\">systems\"<\/span>\r\n    <span style=\"color: #000000;\">command<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">\/sbin\/shutdown -t now<\/span>\r\n    <span style=\"color: #000000;\">when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n      <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">ansible_distribution == \"CentOS\"<\/span>\r\n      <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">ansible_distribution_major_version == \"6\"<\/span><\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>What we do here is mentioning our conditions in a list and <em>ALL SHOULD BE TRUE\u00a0<\/em> for this task to run<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>The Ansible <span style=\"color: #e32434;\">failed_when <\/span>and<span style=\"color: #e32434;\"> changed_when<\/span>\u00a0Statements<\/h2>\n<p>Ansible failed_when and changed_when statements are similar to ansible when statement.\u00a0 The only difference is that It will mark the task as <strong>failed<\/strong>\u00a0or <strong>Success<\/strong>[changed], when the condition defined, is met or satisfied.<\/p>\n<p>The primary purpose of the <code>failed_when<\/code> and <code>changed_when<\/code> statements are to determine whether the task is actually successful or failure<\/p>\n<p>Consider you are running a <code>command<\/code> or <code>shell<\/code> module with some complex script or a simple command.<\/p>\n<blockquote><p>Ansible would report it as <code>changed<\/code>\u00a0as long as the command (or) script give ZERO return code.<\/p><\/blockquote>\n<p>But how would you decide whether the command or script ran successfully? or met your needs?<\/p>\n<p>For example,\u00a0 When you are starting a Weblogic (or) Tomcat servers using some shell script or command. Ansible would invoke the script and consider it as done (or) changed. But you would never know whether its actually true until you re-validate with <code>wait_for<\/code>\u00a0or\u00a0 <code>debug<\/code> module<\/p>\n<p>Let us see some real time practical examples for both failed_when and changed_when statements in the upcoming section<\/p>\n<p>&nbsp;<\/p>\n<h2>How to use ansible <span style=\"color: #e32434;\">changed_when<\/span>\u00a0Statement<\/h2>\n<p>&nbsp;<\/p>\n<h3>Example 1:\u00a0 Start the HTTPD (or) Apache Server which is already started<\/h3>\n<p>Having said that, Let&#8217;s start with our trialWe are going to start the HTTPD (or) Apache Server which is already running. Ideally, If it is already running it should not report as <strong>changed<\/strong><\/p>\n<p><strong>Step 1:<\/strong> Making sure it is already running by invoking the <code>ps -eaf|grep -i httpd<\/code> command as\u00a0<code>ad-hoc<\/code><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.24.43-AM.png\"><img class=\"alignnone wp-image-1825 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.24.43-AM.png\" alt=\"ansibled failed_when example\" width=\"772\" height=\"184\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.24.43-AM.png 772w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.24.43-AM-300x72.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.24.43-AM-768x183.png 768w\" sizes=\"(max-width: 772px) 100vw, 772px\" \/><\/a><\/p>\n<p><strong>Step 2:<\/strong>\u00a0 Use the following playbook with the task to start the HTTPD \u00a0server<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">---<\/span> \r\n<span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">hosts<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">web<\/span>\r\n  <span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n   <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"Start<\/span> <span style=\"color: #4e9a06;\">the<\/span> <span style=\"color: #4e9a06;\">Apache<\/span> <span style=\"color: #4e9a06;\">HTTPD<\/span> <span style=\"color: #4e9a06;\">Server\"<\/span>\r\n     <span style=\"color: #000000;\">become<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">true<\/span>\r\n     <span style=\"color: #000000;\">become_user<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">root<\/span>\r\n     <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"httpd<\/span> <span style=\"color: #4e9a06;\">-k<\/span> <span style=\"color: #4e9a06;\">start\"<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.30.58-AM.png\"><img class=\"alignnone wp-image-1826 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.30.58-AM.png\" alt=\"\" width=\"931\" height=\"216\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.30.58-AM.png 931w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.30.58-AM-300x70.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.30.58-AM-768x178.png 768w\" sizes=\"(max-width: 931px) 100vw, 931px\" \/><\/a><\/p>\n<p>As you could see in the preceding execution output snapshot,\u00a0 The task to start the httpd server has been marked as changed despite it did not actually start the apache and it was already running.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p><strong>Step 2a:<\/strong>\u00a0 Modified Playbook with Debug Enabled<\/p>\n<p>To know the truth, you should modify the playbook with a debug and register as follows<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">---<\/span> \r\n<span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">hosts<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">web<\/span>\r\n  <span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n    <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"Start<\/span> <span style=\"color: #4e9a06;\">the<\/span> <span style=\"color: #4e9a06;\">Apache<\/span> <span style=\"color: #4e9a06;\">HTTPD<\/span> <span style=\"color: #4e9a06;\">Server\"<\/span>\r\n      <span style=\"color: #000000;\">become<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">true<\/span>\r\n      <span style=\"color: #000000;\">become_user<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">root<\/span>\r\n      <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">starthttpdout<\/span>\r\n      <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"httpd<\/span> <span style=\"color: #4e9a06;\">-k<\/span> <span style=\"color: #4e9a06;\">start\"<\/span>\r\n      \r\n\r\n    <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">debug<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n        <span style=\"color: #000000;\">msg<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"{{starthttpdout.stdout}}\"<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>The execution output of the preceding playbook is given below<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.37.52-AM.png\"><img class=\"size-full wp-image-1827 alignleft\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.37.52-AM.png\" alt=\"\" width=\"776\" height=\"308\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.37.52-AM.png 776w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.37.52-AM-300x119.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.37.52-AM-768x305.png 768w\" sizes=\"(max-width: 776px) 100vw, 776px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Hope the execution output is already self-explanatory.\u00a0 \u00a0You could see the ansible considering the task as changed when it has not actually started it<\/p>\n<p>Here comes the <code>changed_when<\/code> to explicitly tell ansible when to consider the task as Successful (or) changed<\/p>\n<p>Let us re modify our same Playbook with <code>changed_when<\/code><\/p>\n<p>&nbsp;<\/p>\n<p><span style=\"font-size: 14pt;\"><strong>Step 3:<\/strong> The Modified Playbook with <span style=\"color: #ff007b;\">changed_when<\/span><\/span><\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">---<\/span> \r\n<span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">hosts<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">web<\/span>\r\n  <span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"Start<\/span> <span style=\"color: #4e9a06;\">the<\/span> <span style=\"color: #4e9a06;\">Apache<\/span> <span style=\"color: #4e9a06;\">HTTPD<\/span> <span style=\"color: #4e9a06;\">Server\"<\/span>\r\n    <span style=\"color: #000000;\">become<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">true<\/span>\r\n    <span style=\"color: #000000;\">become_user<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">root<\/span>\r\n    <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">starthttpdout<\/span>\r\n    <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"httpd<\/span> <span style=\"color: #4e9a06;\">-k<\/span> <span style=\"color: #4e9a06;\">start\"<\/span>\r\n    <span style=\"color: #000000;\">changed_when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"'already<\/span> <span style=\"color: #4e9a06;\">running'<\/span> <span style=\"color: #4e9a06;\">not<\/span> <span style=\"color: #4e9a06;\">in<\/span> <span style=\"color: #4e9a06;\">starthttpdout.stdout\"<\/span>\r\n\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">debug<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n      <span style=\"color: #000000;\">msg<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"{{starthttpdout.stdout}}\"<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>We have just added a single line to our previous version of playbook.<\/p>\n<blockquote><p>changed_when: &#8220;&#8216;already running&#8217; is not in starthttpdout.stdout&#8221;<\/p><\/blockquote>\n<p>The Execution Output of our new playbook is given below<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.51.01-AM.png\"><img class=\"alignnone size-full wp-image-1828\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.51.01-AM.png\" alt=\"ansible changed_when example\" width=\"794\" height=\"334\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.51.01-AM.png 794w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.51.01-AM-300x126.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-12.51.01-AM-768x323.png 768w\" sizes=\"(max-width: 794px) 100vw, 794px\" \/><\/a><\/p>\n<p>Now you can notice that the task is <span style=\"color: #339966;\">GREEN<\/span>, not <span style=\"color: #ffcc00;\">YELLOW<\/span>. In other words, It is\u00a0<strong>unchanged<\/strong><\/p>\n<p>&nbsp;<\/p>\n<h2>Example 2:\u00a0 Install Dependencies via PHP Composer<\/h2>\n<div class=\"page\" title=\"Page 103\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>When using PHP Composer as a command to install project dependencies, it\u2019s useful to know when Composer installed something, or when nothing changed. Here\u2019s an example:<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">Install dependencies via Composer.<\/span>\r\n  <span style=\"color: #000000;\">command<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"\/usr\/local\/bin\/composer<\/span> <span style=\"color: #4e9a06;\">global<\/span> <span style=\"color: #4e9a06;\">require<\/span> <span style=\"color: #4e9a06;\">phpunit\/phpunit<\/span> <span style=\"color: #4e9a06;\">--prefer-dist\"<\/span>\r\n  <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">composer<\/span>\r\n  <span style=\"color: #000000;\">changed_when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"'Nothing<\/span> <span style=\"color: #4e9a06;\">to<\/span> <span style=\"color: #4e9a06;\">install<\/span> <span style=\"color: #4e9a06;\">or<\/span> <span style=\"color: #4e9a06;\">update'<\/span> <span style=\"color: #4e9a06;\">not<\/span> <span style=\"color: #4e9a06;\">in<\/span> <span style=\"color: #4e9a06;\">composer.stdout\"<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<\/div>\n<\/div>\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>You can see we used \u00a0<code>register<\/code> to store the results of the command, then we checked whether a certain string was in the registered variable\u2019s stdout.<\/p>\n<p>Only when Composer doesn\u2019t do anything it will print \u201cNothing to install or update\u201d, so we use that string to determine or to tell Ansible if the task resulted in a change.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<\/div>\n<\/div>\n<\/div>\n<h2>How to use ansible <span style=\"color: #e32434;\">failed_when<\/span>\u00a0Statement<\/h2>\n<h3>Example 1:\u00a0 System Requirement \/ Prerequisite check before Installation<\/h3>\n<div class=\"page\" title=\"Page 103\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>This one is a more real-time scenario every one of us might have come across, During the installation of software, in midway, the installation wizard will fail stating that there is no enough memory (or) the minimum system requirements to install that specific software is not met<\/p>\n<p>As we all know, Every Software needs some minimum system requirements. When they are not met, The installation would fail.<\/p>\n<p>In our case, We are going to take weblogic application server installation as an example.<\/p>\n<p>As per oracle recommendation for weblogic 12c to function properly and for hassle-free installation, The system must meet the following requirement<\/p>\n<ul style=\"list-style-type: square;\">\n<li>2 GB of Physical Memory ( RAM)<\/li>\n<li>Minimum 4 GB of Disk space in Domain Directory <code>\/opt<\/code><\/li>\n<li>Minimum 1 GB of disk space in <code>\/tmp<\/code> directory<\/li>\n<\/ul>\n<p>Now we are going to perform a quick pre-requisite check using ansible <strong>failed_when\u00a0<\/strong>and determine whether the system requirement specified above are met<\/p>\n<p>Consider the following playbook<\/p>\n<p><!-- HTML generated using hilite.me --><\/p>\n<div style=\"background: #f8f8f8; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%;\"><span style=\"color: #000000;\">---<\/span>\r\n<span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">hosts<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">app<\/span>\r\n  <span style=\"color: #000000;\">tasks<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span>\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">Making sure the \/tmp has more than 1gb<\/span>\r\n    <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"df<\/span> <span style=\"color: #4e9a06;\">-h<\/span> <span style=\"color: #4e9a06;\">\/tmp|grep<\/span> <span style=\"color: #4e9a06;\">-v<\/span> <span style=\"color: #4e9a06;\">Filesystem|awk<\/span> <span style=\"color: #4e9a06;\">'{print<\/span> <span style=\"color: #4e9a06;\">$4}'|cut<\/span> <span style=\"color: #4e9a06;\">-d<\/span> <span style=\"color: #4e9a06;\">G<\/span> <span style=\"color: #4e9a06;\">-f1\"<\/span>\r\n    <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">tmpspace<\/span>\r\n    <span style=\"color: #000000;\">failed_when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"tmpspace.stdout|float<\/span> <span style=\"color: #4e9a06;\">&lt;<\/span> <span style=\"color: #4e9a06;\">1\"<\/span>\r\n\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">Making sure the \/opt has more than 4gb<\/span>\r\n    <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"df<\/span> <span style=\"color: #4e9a06;\">-h<\/span> <span style=\"color: #4e9a06;\">\/opt|grep<\/span> <span style=\"color: #4e9a06;\">-v<\/span> <span style=\"color: #4e9a06;\">Filesystem|awk<\/span> <span style=\"color: #4e9a06;\">'{print<\/span> <span style=\"color: #4e9a06;\">$4}'|cut<\/span> <span style=\"color: #4e9a06;\">-d<\/span> <span style=\"color: #4e9a06;\">G<\/span> <span style=\"color: #4e9a06;\">-f1\"<\/span>\r\n    <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">tmpspace<\/span>\r\n    <span style=\"color: #000000;\">failed_when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"tmpspace.stdout|float<\/span> <span style=\"color: #4e9a06;\">&lt;<\/span> <span style=\"color: #4e9a06;\">4\"<\/span>\r\n\r\n  <span style=\"color: #000000; font-weight: bold;\">-<\/span> <span style=\"color: #000000;\">name<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">Making sure the Physical Memory more than 2gb<\/span>\r\n    <span style=\"color: #000000;\">shell<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"cat<\/span> <span style=\"color: #4e9a06;\">\/proc\/meminfo|grep<\/span> <span style=\"color: #4e9a06;\">-i<\/span> <span style=\"color: #4e9a06;\">memtotal|awk<\/span> <span style=\"color: #4e9a06;\">'{print<\/span> <span style=\"color: #4e9a06;\">$2\/1024\/1024}'\"<\/span>\r\n    <span style=\"color: #000000;\">register<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #000000;\">memory<\/span>\r\n    <span style=\"color: #000000;\">failed_when<\/span><span style=\"color: #000000; font-weight: bold;\">:<\/span> <span style=\"color: #4e9a06;\">\"memory.stdout|float<\/span> <span style=\"color: #4e9a06;\">&lt;<\/span> <span style=\"color: #4e9a06;\">2\"<\/span>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<\/div>\n<\/div>\n<\/div>\n<p>The playbook has been created exactly to validate if the system is meeting the oracle recommended System Requirements.<\/p>\n<p>The tasks are programmed to fail when they are not meeting the requirements. This is done using failed_when and a simple math.<\/p>\n<p>Execution Output of the playbook is given below<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/ansible_failedwhen.png\"><img class=\"alignnone size-full wp-image-1842\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/ansible_failedwhen.png\" alt=\"\" width=\"1440\" height=\"357\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/ansible_failedwhen.png 1440w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/ansible_failedwhen-300x74.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/ansible_failedwhen-768x190.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/ansible_failedwhen-1024x254.png 1024w\" sizes=\"(max-width: 1440px) 100vw, 1440px\" \/><\/a><\/p>\n<p>as shown in the preceding snapshot, The final requirement, The Physical memory is not enough (or) not meeting our requirement of 2gb. You can notice that the system is built with 1gb in the <code>stdout<\/code>\u00a0of the error message<\/p>\n<p>We come to a conclusion, as we have already discussed about all three conditional statements like when, failed_when and changed_when in detail with examples<\/p>\n<p>Hope it is useful and make sense.<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>Thanks<\/p>\n<p>Rumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670578163\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"1768\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670578163\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670578163\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this post, we are going to see how to use conditional statements of Ansible\u00a0such as\u00a0when, changed_when, failed_when and where to use them appropriately and how it works. By these conditional modules, Ansible provides a way for us to define when should ansible run a certain task or consider the[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":1855,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible changed_when and failed_when examples | Devops Junction<\/title>\n<meta name=\"description\" content=\"In this post, we are going to see how to use conditional statements of Ansible\u00a0such as\u00a0when, changed_when, failed_when and where to use them appropriately and how it works. with real time examples. Ansible conditional statements practical examples. Multiple Playbooks examples for when, changed_when and failed_when\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible changed_when and failed_when examples | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"In this post, we are going to see how to use conditional statements of Ansible\u00a0such as\u00a0when, changed_when, failed_when and where to use them appropriately and how it works. with real time examples. Ansible conditional statements practical examples. Multiple Playbooks examples for when, changed_when and failed_when\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2018-09-23T02:17:31+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-05T15:08:13+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-8.13.12-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1197\" \/>\n\t<meta property=\"og:image:height\" content=\"528\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-23-at-8.13.12-AM.png\",\"width\":1197,\"height\":528},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/\",\"name\":\"Ansible changed_when and failed_when examples | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#primaryimage\"},\"datePublished\":\"2018-09-23T02:17:31+00:00\",\"dateModified\":\"2022-04-05T15:08:13+00:00\",\"description\":\"In this post, we are going to see how to use conditional statements of Ansible\\u00a0such as\\u00a0when, changed_when, failed_when and where to use them appropriately and how it works. with real time examples. Ansible conditional statements practical examples. Multiple Playbooks examples for when, changed_when and failed_when\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible changed_when and failed_when examples\",\"datePublished\":\"2018-09-23T02:17:31+00:00\",\"dateModified\":\"2022-04-05T15:08:13+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#primaryimage\"},\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-changed_when-and-failed_when-examples\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/1768"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=1768"}],"version-history":[{"count":45,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/1768\/revisions"}],"predecessor-version":[{"id":6565,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/1768\/revisions\/6565"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/1855"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=1768"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=1768"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=1768"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}