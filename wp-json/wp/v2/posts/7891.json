{"id":7891,"date":"2022-02-07T04:06:52","date_gmt":"2022-02-06T22:36:52","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=7891"},"modified":"2022-04-03T02:52:39","modified_gmt":"2022-04-02T21:22:39","slug":"creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/","title":{"rendered":"Creating EKS Cluster with Karpenter Auto scaling &#8211; Terraform | Kubernetes"},"content":{"rendered":"<p>Kubernetes has been a disruptive change in IT Infrastructure. It had been widely adopted across the industry<\/p>\n<p>Managed Kubernetes are the best choice if you do not want to face the hurdles of setting up K8s from scratch Unless you want to deep learn Kubernetes.<\/p>\n<p>AWS a market leader in Cloud Infrastructure as a service has a perfectly tailored solution for Kubernetes called EKS &#8211; Elastic Kubernetes Services.<\/p>\n<p>Creating EKS Cluster is an easy task and they provide special command-line tools like <code>eksctl<\/code> to create and manage EKS effortlessly<\/p>\n<p>But Can we create EKS Clusters with <code>eksctl<\/code> commands for production? What if we want to automate it and customize it and add some IAC(infrastructure as code) standards to it.<\/p>\n<p>When we talk about Infrastructure implementation and automation. Terraform is undeniably a leader and best for multi-cloud solutions and platform-agnostic solutions.<\/p>\n<p>In this article, we are going to see how to create <strong>EKS Cluste<\/strong>r with <strong>Terraform<\/strong> with built-in <strong>Karpenter<\/strong> auto-scaling capability<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter.jpg\"><img class=\"post-img alignnone wp-image-8126 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter.jpg\" alt=\"EKS Karpenter Example\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter.jpg 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter-300x213.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter-1024x726.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter-768x545.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter-1536x1090.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter-90x65.jpg 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<h2><strong>So what is Karpenter<\/strong><\/h2>\n<p>Karpenter is a cluster auto scaler that takes care of scaling up and down worker nodes in your cluster for AWS EKS. As of Feb 2022 only AWS is supported by Karpenter<\/p>\n<p>It takes care of Compute provisioning for your EKS cluster and enables you to add <code>on-demand<\/code> and <code>spot<\/code> instances to your cluster.<\/p>\n<p>If you have exposure to EKS world or any managed Kubernetes, you might have used another product named <a href=\"https:\/\/github.com\/kubernetes\/autoscaler\/tree\/master\/cluster-autoscaler\"><code>cluster autoscaler<\/code><\/a> for the same purpose<\/p>\n<p>While the cluster autoscaler had been solving the purpose and widely accepted. Karpenter comes with various best things to offer.<\/p>\n<p>Here are some of the key items, I can say Karpenter is doing great<\/p>\n<ul>\n<li>Creating the right capacity or the computing power based on the number of pods and resources they need. For example. If two pods are pending it can just create <code>t3.medium<\/code> or small instance automatically. if\u00a0 twenty pods are pending it can choose the right to compute power like <code>c5.2xlarge<\/code>\u00a0 &#8211; Cluster auto scaler cannot do this right.<\/li>\n<li>Implementation of Karpenter is really easy and well documented &#8211; Cluster auto scaler falls behind a little.<\/li>\n<li>Since it adds the right compute power for the job. Karpenter offers a lot of cost-saving compared to the Cluster auto scaler.<\/li>\n<\/ul>\n<p>There are more I can list but these are the ones to be highlighted.<\/p>\n<h2><strong>Prerequisites<\/strong><\/h2>\n<p>You need to install these tools and configure them before proceeding.<\/p>\n<ol>\n<li><a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/install-cliv2-linux.html\">AWS CLI<\/a><\/li>\n<li><code>kubectl<\/code>\u00a0&#8211;\u00a0<a href=\"https:\/\/kubernetes.io\/docs\/tasks\/tools\/install-kubectl-linux\/\">the Kubernetes CLI<\/a><\/li>\n<li><code>terraform<\/code>\u00a0&#8211;\u00a0<a href=\"https:\/\/learn.hashicorp.com\/tutorials\/terraform\/install-cli\">infrastructure-as-code tool made by HashiCorp<\/a><\/li>\n<li><code>helm<\/code>\u00a0&#8211;\u00a0<a href=\"https:\/\/helm.sh\/docs\/intro\/install\/\">the package manager for Kubernetes<\/a><\/li>\n<\/ol>\n<p>Log in to the AWS CLI with a user that has sufficient privileges to create a cluster.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2><strong>Configuring Terraform Workspace<\/strong><\/h2>\n<p>The steps given below are designed for mac\/Linux users.\u00a0 If you are using windows you can use either <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/install\">Windows Subsystem for Linux<\/a> or <code>git bash<\/code> to be able to run these bash commands.<\/p>\n<h3>Set Environment variables<\/h3>\n<p>Before starting up, we need to set some environment variables like <code>CLUSTER_NAME<\/code><\/p>\n<pre>export CLUSTER_NAME=gritfy-eks-karpenter<\/pre>\n<p>AWS CLI is powering our authentication needed for Terraform to access the AWS account and to create Terraform.<\/p>\n<p>So you can set the following variables according to your requirement<\/p>\n<pre>export AWS_DEFAULT_REGION=us-east-2\r\nexport AWS_DEFAULT_PROFILE=personal<\/pre>\n<p>If you want to use the same default region configured during the <code>aws configure<\/code> this may not be needed.<\/p>\n<p>The <code>AWS_DEFAULT_PROFILE<\/code> is to let terraform know which AWS CLI profile to use for authentication and to connect.\u00a0 This is needed if you are having multiple <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-configure-profiles.html\">AWS Named profiles<\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Create Terraform files<\/h3>\n<p>Create a new directory as a workspace and copy the following <code>.tf<\/code> files<\/p>\n<p><strong>Variables.tf file<\/strong><\/p>\n<p>Create a new file named <code>variables.tf<\/code> and copy the following content to the file<\/p>\n<p>this is to define the variables, that are needed for the project. In case no value is provided, it would prompt during the runtime<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">variable \"cluster_name\" {\r\n  description = \"The name of the cluster\"\r\n  type        = string\r\n}<\/pre>\n<p>we can put default values for the variables by using <code>tfvars<\/code> file but we are not doing that here.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>The main.tf file<\/strong><\/p>\n<p>Create a new file named <code>main.tf<\/code>and copy the following content into that file.<\/p>\n<p>It does three things.<\/p>\n<ol>\n<li>Creates a\u00a0 <code>vpc<\/code> with subnets and the cluster-name would be used as a vpc name.<\/li>\n<li>Creating a Kubernetes cluster using <code>eks<\/code> module. A version of the cluster is defined as <code>1.21<\/code><\/li>\n<li>Instance profile creation with policy attachment. It creates a new instance profile in this format <code>KarpenterNodeInstanceProfile-{cluster-name}<\/code><\/li>\n<\/ol>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">module \"vpc\" {\r\n  source = \"terraform-aws-modules\/vpc\/aws\"\r\n\r\n  name = var.cluster_name\r\n  cidr = \"10.0.0.0\/16\"\r\n\r\n  azs             = [\"us-east-2a\", \"us-east-2b\", \"us-east-2c\"]\r\n  private_subnets = [\"10.0.1.0\/24\", \"10.0.2.0\/24\", \"10.0.3.0\/24\"]\r\n  public_subnets  = [\"10.0.101.0\/24\", \"10.0.102.0\/24\", \"10.0.103.0\/24\"]\r\n\r\n  enable_nat_gateway     = true\r\n  single_nat_gateway     = true\r\n  one_nat_gateway_per_az = false\r\n\r\n  private_subnet_tags = {\r\n    \"kubernetes.io\/cluster\/${var.cluster_name}\" = \"owned\"\r\n    \"karpenter.sh\/discovery\" = var.cluster_name\r\n  }\r\n}\r\n\r\nmodule \"eks\" {\r\n  source          = \"terraform-aws-modules\/eks\/aws\"\r\n  version         = \"&lt;18\"\r\n\r\n  cluster_version = \"1.21\"\r\n  cluster_name    = var.cluster_name\r\n  vpc_id          = module.vpc.vpc_id\r\n  subnets         = module.vpc.private_subnets\r\n  enable_irsa     = true\r\n\r\n  # Only need one node to get Karpenter up and running\r\n  worker_groups = [\r\n    {\r\n      instance_type = \"t3a.medium\"\r\n      asg_max_size  = 1\r\n    }\r\n  ]\r\n\r\n  tags = {\r\n    \"karpenter.sh\/discovery\" = var.cluster_name\r\n  }\r\n}\r\n\r\n# Instance Profile\r\n\r\ndata \"aws_iam_policy\" \"ssm_managed_instance\" {\r\n  arn = \"arn:aws:iam::aws:policy\/AmazonSSMManagedInstanceCore\"\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"karpenter_ssm_policy\" {\r\n  role       = module.eks.worker_iam_role_name\r\n  policy_arn = data.aws_iam_policy.ssm_managed_instance.arn\r\n}\r\n\r\nresource \"aws_iam_instance_profile\" \"karpenter\" {\r\n  name = \"KarpenterNodeInstanceProfile-${var.cluster_name}\"\r\n  role = module.eks.worker_iam_role_name\r\n}\r\n<\/pre>\n<p><strong>The providers.tf file<\/strong><\/p>\n<p>To configure the <code>aws<\/code> provider right and to define the region and the profile to be used.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">provider \"aws\" {\r\n  region = \"us-east-2\"\r\n  profile = \"personal\"\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<h2>Terraform init and apply &#8211; Creating EKS<\/h2>\n<p>Now we have all the files copied in place, now it&#8217;s time to initialize terraform and apply our configuration.<\/p>\n<p>At this point, we assume your directory looks like this<\/p>\n<pre>Karpenter-test|\u21d2 ls -rlt\r\ntotal 40\r\n-rw-r--r &#8211; 1 sarav staff 1497 Feb 6 20:03 main.tf\r\n-rw-r--r &#8211; 1 sarav staff 692 Feb 6 20:03 helm.tf\r\n-rw-r--r &#8211; 1 sarav staff 1289 Feb 6 20:03 irsa.tf\r\n-rw-r--r &#8211; 1 sarav staff 92 Feb 6 20:03 variables.tf\r\n-rw-r--r &#8211; 1 sarav staff 64 Feb 6 20:03 providers.tf<\/pre>\n<p>Run <code>terraform init<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">Karpenter-test|\u21d2 terraform init\r\nInitializing modules...\r\nDownloading terraform-aws-modules\/eks\/aws 17.24.0 for eks...\r\n- eks in .terraform\/modules\/eks\r\n- eks.fargate in .terraform\/modules\/eks\/modules\/fargate\r\n- eks.node_groups in .terraform\/modules\/eks\/modules\/node_groups\r\nDownloading terraform-aws-modules\/iam\/aws 4.7.0 for iam_assumable_role_karpenter...\r\n- iam_assumable_role_karpenter in .terraform\/modules\/iam_assumable_role_karpenter\/modules\/iam-assumable-role-with-oidc\r\nDownloading terraform-aws-modules\/vpc\/aws 3.11.5 for vpc...\r\n- vpc in .terraform\/modules\/vpc\r\n\r\nInitializing the backend...\r\n\r\nInitializing provider plugins...\r\n- Finding hashicorp\/kubernetes versions matching \"&gt;= 1.11.1\"...\r\n- Finding hashicorp\/cloudinit versions matching \"&gt;= 2.0.0\"...\r\n- Finding terraform-aws-modules\/http versions matching \"&gt;= 2.4.1\"...\r\n- Finding latest version of hashicorp\/helm...\r\n- Finding hashicorp\/aws versions matching \"&gt;= 2.23.0, &gt;= 3.56.0, &gt;= 3.63.0\"...\r\n- Finding hashicorp\/local versions matching \"&gt;= 1.4.0\"...\r\n- Installing hashicorp\/kubernetes v2.7.1...\r\n- Installed hashicorp\/kubernetes v2.7.1 (signed by HashiCorp)\r\n- Installing hashicorp\/cloudinit v2.2.0...\r\n- Installed hashicorp\/cloudinit v2.2.0 (signed by HashiCorp)\r\n- Installing terraform-aws-modules\/http v2.4.1...\r\n- Installed terraform-aws-modules\/http v2.4.1 (self-signed, key ID B2C1C0641B6B0EB7)\r\n- Installing hashicorp\/helm v2.4.1...\r\n- Installed hashicorp\/helm v2.4.1 (signed by HashiCorp)\r\n- Installing hashicorp\/aws v3.74.0...\r\n- Installed hashicorp\/aws v3.74.0 (signed by HashiCorp)\r\n- Installing hashicorp\/local v2.1.0...\r\n- Installed hashicorp\/local v2.1.0 (signed by HashiCorp)\r\n\r\nPartner and community providers are signed by their developers.\r\nIf you'd like to know more about provider signing, you can read about it here:\r\nhttps:\/\/www.terraform.io\/docs\/cli\/plugins\/signing.html\r\n\r\nTerraform has created a lock file .terraform.lock.hcl to record the provider\r\nselections it made above. Include this file in your version control repository\r\nso that Terraform can guarantee to make the same selections by default when\r\nyou run \"terraform init\" in the future.\r\n\r\nTerraform has been successfully initialized!\r\n\r\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\r\nany changes that are required for your infrastructure. All Terraform commands\r\nshould now work.\r\n\r\nIf you ever set or change modules or backend configuration for Terraform,\r\nrerun this command to reinitialize your working directory. If you forget, other\r\ncommands will detect it and remind you to do so if necessary.<\/pre>\n<p>Run <code>terraform apply<\/code> with <code>$CLUSTER_NAME<\/code><\/p>\n<pre>terraform apply -var cluster_name=$CLUSTER_NAME<\/pre>\n<p><script id=\"asciicast-za3MUn14UkCOoaebmXGarc6BJ\" src=\"https:\/\/asciinema.org\/a\/za3MUn14UkCOoaebmXGarc6BJ.js\" async><\/script><\/p>\n<p>You might probably get the following error<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM.png\"><img class=\"post-img alignnone wp-image-8098 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM.png\" alt=\"Terraform aws_auth error\" width=\"3840\" height=\"800\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM.png 3840w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM-300x63.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM-1024x213.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM-768x160.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM-1536x320.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.11.44-PM-2048x427.png 2048w\" sizes=\"(max-width: 3840px) 100vw, 3840px\" \/><\/a><\/p>\n<p>This is because of authorization. you can resolve it by setting an environment variable.<\/p>\n<p>The <code>Kubeconfig<\/code> file should have been created already on the current directory with the cluster name. <code>kubeconfig_{cluster-name}<\/code><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM.png\"><img class=\"post-img alignnone wp-image-8099 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM.png\" alt=\"Terraform list\" width=\"2276\" height=\"402\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM.png 2276w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM-300x53.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM-1024x181.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM-768x136.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM-1536x271.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-06-at-9.14.30-PM-2048x362.png 2048w\" sizes=\"(max-width: 2276px) 100vw, 2276px\" \/><\/a><\/p>\n<p>You need to update your <code>KUBECONFIG<\/code>variable to refer to this file along with <code>KUBE_CONFIG_PATH<\/code>variable.<\/p>\n<pre>\u21d2 export KUBECONFIG=${PWD}\/kubeconfig_${CLUSTER_NAME}\r\n\u21d2 export KUBE_CONFIG_PATH=$KUBECONFIG<\/pre>\n<p>After doing this. you can retry and it would be successful this time<\/p>\n<p><script id=\"asciicast-jHXJNsJjnMf6QYKWaQu0gNQqg\" src=\"https:\/\/asciinema.org\/a\/jHXJNsJjnMf6QYKWaQu0gNQqg.js\" async><\/script><\/p>\n<p>Now we have the cluster ready. Now we need to install Karpenter in this EKS Cluster.<\/p>\n<p>Before we can install the Karpenter using the helm chart, we need to do Create an IAM role to give necessary access to Karpenter for managing the nodes like launching nodes, terminating nodes etc.<\/p>\n<h2>Creating Karpenter Controller IAM Role<\/h2>\n<p>In the same workspace directory, create a new file named <code>irsa.tf<\/code> and paste the following config<\/p>\n<p>This terraform config does the following things<\/p>\n<ul>\n<li>Creating an AWS IAM Role<\/li>\n<li>Attaching a policy<\/li>\n<li>Authorizing the Service Account to assume the role &#8211; <a href=\"https:\/\/docs.aws.amazon.com\/emr\/latest\/EMR-on-EKS-DevelopmentGuide\/setting-up-enable-IAM.html\">IRSA<\/a>.( <span style=\"color: #993300;\">I<\/span>AM <span style=\"color: #993300;\">R<\/span>oles for <span style=\"color: #993300;\">S<\/span>ervice <span style=\"color: #993300;\">A<\/span>ccounts)<\/li>\n<\/ul>\n<p>We will create the ServiceAccount and connect it to this role during the Helm chart install.<\/p>\n<p>Now we are creating an IAM role <code>karpenter-policy-${var.cluster_name}<\/code>its an assumable role will later be associated with EKS Service Account using IRSA principle<\/p>\n<p><strong>irsa.tf<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">module \"iam_assumable_role_karpenter\" {\r\n  source                        = \"terraform-aws-modules\/iam\/aws\/\/modules\/iam-assumable-role-with-oidc\"\r\n  version                       = \"4.7.0\"\r\n  create_role                   = true\r\n  role_name                     = \"karpenter-controller-${var.cluster_name}\"\r\n  provider_url                  = module.eks.cluster_oidc_issuer_url\r\n  oidc_fully_qualified_subjects = [\"system:serviceaccount:karpenter:karpenter\"]\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"karpenter_controller\" {\r\n  name = \"karpenter-policy-${var.cluster_name}\"\r\n  role = module.iam_assumable_role_karpenter.iam_role_name\r\n\r\n  policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Action = [\r\n          \"ec2:CreateLaunchTemplate\",\r\n          \"ec2:CreateFleet\",\r\n          \"ec2:RunInstances\",\r\n          \"ec2:CreateTags\",\r\n          \"iam:PassRole\",\r\n          \"ec2:TerminateInstances\",\r\n          \"ec2:DescribeLaunchTemplates\",\r\n          \"ec2:DescribeInstances\",\r\n          \"ec2:DescribeSecurityGroups\",\r\n          \"ec2:DescribeSubnets\",\r\n          \"ec2:DescribeInstanceTypes\",\r\n          \"ec2:DescribeInstanceTypeOfferings\",\r\n          \"ec2:DescribeAvailabilityZones\",\r\n          \"ssm:GetParameter\"\r\n        ]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n    ]\r\n  })\r\n}<\/pre>\n<p>Now we have a terraform config file for the Karpenter controller IAM role.\u00a0 Let us add one more config file to take care of the karpenter installation using helm.<\/p>\n<h2><\/h2>\n<h2>Installing Karpenter to EKS with Helm and Terraform.<\/h2>\n<p>using <code>helm_release<\/code> resource of terraform we are going to release\/install karpenter to our cluster.<\/p>\n<p>we are also configuring the following variable to let Karpenter know the IAM role that it can assume<\/p>\n<pre>serviceAccount.annotations.eks.amazonaws.com\/role-arn<\/pre>\n<p>For this variable, we will be passing the IAM role we have craeted in the <code>irsa.tf<\/code> config file<\/p>\n<pre>module.iam_assumable_role_karpenter.iam_role_arn<\/pre>\n<p>&nbsp;<\/p>\n<p>Now, Copy the following config and save it as <code>helm.tf<\/code> in our workspace directory we have been using so far<\/p>\n<p><strong>helm.tf<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">resource \"helm_release\" \"karpenter\" {\r\n  depends_on       = [module.eks.kubeconfig]\r\n  namespace        = \"karpenter\"\r\n  create_namespace = true\r\n\r\n  name       = \"karpenter\"\r\n  repository = \"https:\/\/charts.karpenter.sh\"\r\n  chart      = \"karpenter\"\r\n  version    = \"v0.6.0\"\r\n\r\n  set {\r\n    name  = \"serviceAccount.annotations.eks\\\\.amazonaws\\\\.com\/role-arn\"\r\n    value = module.iam_assumable_role_karpenter.iam_role_arn\r\n  }\r\n\r\n  set {\r\n    name  = \"controller.clusterName\"\r\n    value = var.cluster_name\r\n  }\r\n\r\n  set {\r\n    name  = \"controller.clusterEndpoint\"\r\n    value = module.eks.cluster_endpoint\r\n  }\r\n\r\n  set {\r\n    name  = \"aws.defaultInstanceProfile\"\r\n    value = aws_iam_instance_profile.karpenter.name\r\n  }\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>so far we have added two files named <code>irsa.tf<\/code> and <code>helm.tf<\/code> Now your directory should look something like this<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM.png\"><img class=\"alignnone size-full wp-image-8108\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM.png\" alt=\"\" width=\"2160\" height=\"434\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM.png 2160w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM-300x60.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM-1024x206.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM-768x154.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM-1536x309.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-1.41.59-AM-2048x411.png 2048w\" sizes=\"(max-width: 2160px) 100vw, 2160px\" \/><\/a><\/p>\n<p>You can see the new files on the top.<\/p>\n<h3>Enable Spot instances in your AWS Account ( If not used spot instances before )<\/h3>\n<p>Before we move on to apply these configuration. you need to enable Spot instance support if you have not used Spot instances in your AWS account before<\/p>\n<pre tabindex=\"0\"><code class=\"language-bash\" data-lang=\"bash\">aws iam create-service-linked-role &#8211; aws-service-name spot.amazonaws.com<\/code><\/pre>\n<p>If the role has already been successfully created, you will see:<\/p>\n<pre>An error occurred (InvalidInput) when calling the CreateServiceLinkedRole operation: \r\nService role name AWSServiceRoleForEC2Spot has been taken in this account, \r\nplease try a different suffix.<\/pre>\n<p>&nbsp;<\/p>\n<h2>Re-initialize Terraform and apply<\/h2>\n<p>Since we are adding two new modules with these two new configuration files. we need to reinitialize with <code>terraform init<\/code> on the same workspace<\/p>\n<blockquote><p>Note*: Re-initialize will not do any changes to your EKS Cluster which has been already created. so no worries<\/p><\/blockquote>\n<p>Now execute the following commands to initialize and apply<\/p>\n<pre>terraform init\r\nterraform apply -var cluster_name=$CLUSTER_NAME<\/pre>\n<p>&nbsp;<\/p>\n<p>Upon Successful, To verify if the IAM role is created fine. you can use the following command. ( we are using <a href=\"https:\/\/stedolan.github.io\/jq\/\"><strong>jq<\/strong><\/a> command for filtering. you must have it installed before using it)<\/p>\n<pre>aws iam list-roles &#8211; profile personal|jq '.Roles[] | select(.RoleName == \"karpenter-controller-gritfy-eks-karpenter\")'<\/pre>\n<p>you would see some output like this<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM.png\"><img class=\"post-img alignnone wp-image-8109 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM.png\" alt=\"EKS Karpenter\" width=\"2996\" height=\"1154\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM.png 2996w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM-300x116.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM-1024x394.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM-768x296.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM-1536x592.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.05.18-AM-2048x789.png 2048w\" sizes=\"(max-width: 2996px) 100vw, 2996px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Connect to your EKS using Kubectl and Validate Karpenter<\/h2>\n<p>Since our EKS cluster is ready and the IAM roles are ready.\u00a0 You should be able to connect to our EKS cluster using kubectl.<\/p>\n<p>since the <code>KUBECONFIG<\/code> variable is pointing to the current directory the <code>kubectl<\/code> would be able to use the context and connect to your EKS cluster with no issues<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM.png\"><img class=\"post-img alignnone wp-image-8110 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM.png\" alt=\"EKS Karpenter\" width=\"2268\" height=\"320\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM.png 2268w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM-300x42.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM-1024x144.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM-768x108.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM-1536x217.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.13.46-AM-2048x289.png 2048w\" sizes=\"(max-width: 2268px) 100vw, 2268px\" \/><\/a><\/p>\n<p>Since you are able to connect to EKS cluster already. you should also be able to list the helm release and <code>karpenter<\/code> installed<\/p>\n<p>use the following command to list the helm releases. It should show our karpetner helm release<\/p>\n<pre>helm list &#8211; all-namespaces<\/pre>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM.png\"><img class=\"post-img alignnone wp-image-8111 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM.png\" alt=\"AWS Karpenter\" width=\"2948\" height=\"148\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM.png 2948w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM-300x15.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM-1024x51.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM-768x39.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM-1536x77.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.15.59-AM-2048x103.png 2048w\" sizes=\"(max-width: 2948px) 100vw, 2948px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Deploying the Provisioner<\/h2>\n<p><strong>Provisioner\u00a0<\/strong>is to instruct the karpenter what type of machines to launch like <code>spot<\/code> or <code>on-demand<\/code> etc.<\/p>\n<p>Also to manage the Subnets and the security groups which are necessary for the karpenter to launch the nodes.<\/p>\n<p>A single Karpenter provisioner is capable of handling many different pod shapes. Karpenter makes scheduling and provisioning decisions based on pod attributes such as labels and affinity. In other words, Karpenter eliminates the need to manage many different node groups.<\/p>\n<p>We are going to create a default provisioner. This provisioner configures instances to connect to your cluster\u2019s endpoint and discovers resources like subnets and security groups using the cluster\u2019s name.<\/p>\n<p>We are going with a simple configuration for our provisioner but you can control or extend your provisioner configuration further. <a href=\"https:\/\/karpenter.sh\/v0.6.0\/provisioner\/\">refer provisioner api<\/a><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">cat &lt;&lt;EOF | kubectl apply -f -\r\napiVersion: karpenter.sh\/v1alpha5\r\nkind: Provisioner\r\nmetadata:\r\n  name: default\r\nspec:\r\n  requirements:\r\n    - key: karpenter.sh\/capacity-type\r\n      operator: In\r\n      values: [\"spot\"]\r\n  limits:\r\n    resources:\r\n      cpu: 1000\r\n  provider:\r\n    subnetSelector:\r\n      karpenter.sh\/discovery: ${CLUSTER_NAME}\r\n    securityGroupSelector:\r\n      karpenter.sh\/discovery: ${CLUSTER_NAME}\r\n  ttlSecondsAfterEmpty: 30\r\nEOF<\/pre>\n<p>You can execute this command in your current terminal and it would create a new provisioner and name it <code>default<\/code><\/p>\n<p>As you can see in the configuration, we are using <code>spot<\/code> instances for our capacity while you can change it to <code>on-demand<\/code> or use both.<\/p>\n<p>The <code>limits<\/code> instructs karpenter to create new nodes when the number of CPUs has reached <code>1000<\/code> this way you can set a max limit of nodes that can be created by Karpenter.<\/p>\n<p>Another important element is the <code>selector<\/code>this helps the newly added karpenter nodes to choose the right <code>subnets<\/code>and <code>security groups<\/code><\/p>\n<p>You need to handle this carefully if you are trying to set up Karpenter in your existing cluster. Sometimes instead of using selector by tags. you can simply go for defining the actual subnets and security groups yourself. ( its an option)<\/p>\n<p>in our case, we are going to choose the subnets and security groups by the tag<\/p>\n<pre> karpenter.sh\/discovery: ${CLUSTER_NAME}<\/pre>\n<p>These tags are defined by us in the <code>main.tf<\/code> file for the VPC and EKS configuration. You can go back and refer to confirm.<\/p>\n<p>&nbsp;<\/p>\n<h2>Listing the Subnets and Security Groups by Tag &#8211; to Validate<\/h2>\n<p>You can try to mimic this behaviour and try to list security groups and subnets having this tag using AWS CLI<\/p>\n<pre># To List Security Groups\r\naws ec2 describe-security-groups &#8211; query \"SecurityGroups[? Tags[? (Key=='karpenter.sh\/discovery') &amp;&amp; (Value=='$CLUSTER_NAME')]].GroupId\"\r\n\r\n# To list Subnets\r\naws ec2 describe-subnets &#8211; query \"Subnets[? Tags[? (Key=='karpenter.sh\/discovery') &amp;&amp; (Value=='$CLUSTER_NAME')]].SubnetId\"<\/pre>\n<p>Here is the output of these commands at my end<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM.png\"><img class=\"post-img alignnone wp-image-8113 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM.png\" alt=\"AWS Karpenter Terraform\" width=\"3424\" height=\"464\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM.png 3424w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM-300x41.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM-1024x139.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM-768x104.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM-1536x208.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-2.59.58-AM-2048x278.png 2048w\" sizes=\"(max-width: 3424px) 100vw, 3424px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Now deploy an application to EKS Cluster<\/h2>\n<p>Till there are no deployments in our cluster. So let us deploy something.<\/p>\n<p>we are going to deploy our famous <code>aksarav\/tomcat8<\/code> image<\/p>\n<p>This image is covered in detail in our previous articles<\/p>\n<ul>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/\">Deploying tomcat to Kubernetes<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-tomcat-example-dockerfile-sample\/\">Docker Tomcat Example<\/a><\/li>\n<\/ul>\n<p>Now let us deploy it.<\/p>\n<p>This single line command would do the deployment. ( you can create a deployment manifest too and use <code>kubectl apply -f<\/code>)<\/p>\n<pre>kubectl create deployment tomcatinfra &#8211; image=saravak\/tomcat8<\/pre>\n<p>Here is the quick terminal record<\/p>\n<p><script id=\"asciicast-Zbl6yocovyY5N5wKbXa1kOBck\" src=\"https:\/\/asciinema.org\/a\/Zbl6yocovyY5N5wKbXa1kOBck.js\" async><\/script><\/p>\n<p>As you might have seen in the terminal capture, we deployed and tested the EKS Cluster and tried to scale the deployment and everything works fine.<\/p>\n<p>Now it&#8217;s a time to test <code>Karpenter<\/code><\/p>\n<p>&nbsp;<\/p>\n<h2>Scale our Deployment and Test the Karpenter<\/h2>\n<p>Now it&#8217;s time to validate, If Karpenter is able to add nodes and auto-scale in case we have pods in <code>pending<\/code> state and not scheduled due to capacity<\/p>\n<p>Now we are going to scale our <code>tomcatinfra<\/code> deployment to higher levels to validate and see how <code>Karpenter<\/code> manages it<\/p>\n<p>After a short time, we will scale it down to see if it brings down the node count<\/p>\n<p>Here is the complete terminal record that shows the Karpenter doing its magic.<\/p>\n<p><script id=\"asciicast-6NDtOwQ6P4Q91c4sAmR4qI5sq\" src=\"https:\/\/asciinema.org\/a\/6NDtOwQ6P4Q91c4sAmR4qI5sq.js\" async><\/script><\/p>\n<p>As shown in the terminal record. You can see the Karpenter logs adding and removing nodes based on demand and need.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM.png\"><img class=\"post-img alignnone wp-image-8114 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM.png\" alt=\"EKS Karpenter Logs\" width=\"3802\" height=\"678\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM.png 3802w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM-300x53.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM-1024x183.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM-768x137.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM-1536x274.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/Screenshot-2022-02-07-at-3.38.55-AM-2048x365.png 2048w\" sizes=\"(max-width: 3802px) 100vw, 3802px\" \/><\/a><\/p>\n<p>You might find these kinds of logs during the even of <code>Scaling up Nodes<\/code><\/p>\n<pre>2022-02-06T21:58:32.568Z INFO controller.provisioning Batched 39 pods in 1.761625115s {\"commit\": \"62c4546\", \"provisioner\": \"default\"}\r\n2022-02-06T21:58:33.034Z INFO controller.provisioning Computed packing of 1 node(s) for 39 pod(s) with instance type option(s) [c4.xlarge c5.xlarge c5a.xlarge c6i.xlarge c5ad.xlarge c5d.xlarge c5n.xlarge m6i.xlarge m5.xlarge t3a.xlarge m5dn.xlarge t3.xlarge m5d.xlarge m4.xlarge m5zn.xlarge m5a.xlarge m5ad.xlarge m5n.xlarge i3.xlarge r4.xlarge] {\"commit\": \"62c4546\", \"provisioner\": \"default\"}\r\n2022-02-06T21:58:35.834Z INFO controller.provisioning Launched instance: i-0ad3abd70a5de2d2b, hostname: ip-10-0-3-218.us-east-2.compute.internal, type: c5.xlarge, zone: us-east-2c, capacityType: spot {\"commit\": \"62c4546\", \"provisioner\": \"default\"}\r\n2022-02-06T21:58:35.909Z INFO controller.provisioning Bound 39 pod(s) to node ip-10-0-3-218.us-east-2.compute.internal {\"commit\": \"62c4546\", \"provisioner\": \"default\"}<\/pre>\n<p>In case of\u00a0 <code>Scaling down<\/code> due to no usage on the node. you can find these kind log messages<\/p>\n<pre>2022-02-06T22:03:11.685Z INFO controller.node Added TTL to empty node {\"commit\": \"62c4546\", \"node\": \"ip-10-0-3-218.us-east-2.compute.internal\"}\r\n2022-02-06T22:03:41.699Z INFO controller.node Triggering termination after 30s for empty node {\"commit\": \"62c4546\", \"node\": \"ip-10-0-3-218.us-east-2.compute.internal\"}\r\n2022-02-06T22:03:41.725Z INFO controller.termination Cordoned node {\"commit\": \"62c4546\", \"node\": \"ip-10-0-3-218.us-east-2.compute.internal\"}\r\n2022-02-06T22:03:41.935Z INFO controller.termination Deleted node {\"commit\": \"62c4546\", \"node\": \"ip-10-0-3-218.us-east-2.compute.internal\"}<\/pre>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>Hope this article covers Everything you need to know about the Karpenter Setup on EKS.<\/p>\n<p>To Summarize this is what we did so far<\/p>\n<ul>\n<li>Created EKS Cluster and VPC using Terraform<\/li>\n<li>Instance Profile Creation and Policy Attachment<\/li>\n<li>Created IAM Roles for Karpenter to Assume roles using IARC<\/li>\n<li>Installed Karpenter with Helm release Terraform.<\/li>\n<li>Created and Deployed a Provisioner<\/li>\n<li>Deployed Sample Application to test EKS Cluster<\/li>\n<li>Scaled the Sample application up and down to validate if Karpenter add and remove nodes.<\/li>\n<\/ul>\n<p>So that&#8217;s all about it.<\/p>\n<p>Hope it helps. Let us know your feedback or queries on comments.<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577463\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"7891\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577463\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577463\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Kubernetes has been a disruptive change in IT Infrastructure. It had been widely adopted across the industry Managed Kubernetes are the best choice if you do not want to face the hurdles of setting up K8s from scratch Unless you want to deep learn Kubernetes. AWS a market leader in[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":8126,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[234,151],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Creating EKS Cluster with Karpenter Auto scaling - Terraform | Kubernetes<\/title>\n<meta name=\"description\" content=\"Creating EKS Cluster with Karpenter using Terraform. EKS Terraform example. Karpenter Auto ScalingExample. Installing Karpenter Auto Scaling to AWS EKS using Terraform.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Creating EKS Cluster with Karpenter Auto scaling - Terraform | Kubernetes\" \/>\n<meta property=\"og:description\" content=\"Creating EKS Cluster with Karpenter using Terraform. EKS Terraform example. Karpenter Auto ScalingExample. Installing Karpenter Auto Scaling to AWS EKS using Terraform.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2022-02-06T22:36:52+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-02T21:22:39+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/aws-eks-karpenter.jpg\",\"width\":1748,\"height\":1240,\"caption\":\"EKS Karpenter Example\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/\",\"name\":\"Creating EKS Cluster with Karpenter Auto scaling - Terraform | Kubernetes\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#primaryimage\"},\"datePublished\":\"2022-02-06T22:36:52+00:00\",\"dateModified\":\"2022-04-02T21:22:39+00:00\",\"description\":\"Creating EKS Cluster with Karpenter using Terraform. EKS Terraform example. Karpenter Auto ScalingExample. Installing Karpenter Auto Scaling to AWS EKS using Terraform.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Creating EKS Cluster with Karpenter Auto scaling &#8211; Terraform | Kubernetes\",\"datePublished\":\"2022-02-06T22:36:52+00:00\",\"dateModified\":\"2022-04-02T21:22:39+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#primaryimage\"},\"articleSection\":\"AWS,Kubernetes\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/creating-eks-cluster-with-karpenter-auto-scaling-terraform-kubernetes\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7891"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=7891"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7891\/revisions"}],"predecessor-version":[{"id":8275,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7891\/revisions\/8275"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/8126"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=7891"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=7891"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=7891"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}