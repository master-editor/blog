{"id":8203,"date":"2022-05-01T15:44:21","date_gmt":"2022-05-01T10:14:21","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=8203"},"modified":"2022-11-05T17:53:50","modified_gmt":"2022-11-05T12:23:50","slug":"ansible-retry-examples","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/","title":{"rendered":"Ansible Retry Examples &#8211; Retry a task until condition met |  DevopsJunction"},"content":{"rendered":"<p>in this article, we are going to see how to retry an ansible task until it meets a certain condition or validation.<\/p>\n<p>It is more like <code>do sometask until somecondition<\/code> kind of setup available in all the programming and scripting languages<\/p>\n<p>Ansible lets you execute a task until a condition is met or satisfied. using <code>retry until<\/code> specification.<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry.jpg\"><img class=\"post-img alignnone wp-image-8408 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry.jpg\" alt=\"Ansible retry\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry.jpg 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry-300x213.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry-1024x726.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry-768x545.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry-1536x1090.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry-90x65.jpg 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible Retry until file exists &#8211; A Quick example to Ansible Retry<\/h2>\n<p>In this quick example, you can see that we are trying to validate if the file is created at a certain path.<\/p>\n<p>You can think of it as a file watcher,<\/p>\n<p>Our Ansible task waits for the file to be created until it eventually times out. we can also define the number of retries and interval between each check<\/p>\n<p>If the file is not created before the retries the task would be marked as failed.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n- name: Retry until a file is available\r\n  hosts: localhost\r\n  tasks:\r\n    - name: Validate if the file is present\r\n      shell: ls -lrt \/tmp\/myprocess.pid\r\n      register: lsresult\r\n      until: \"lsresult is not failed\"\r\n      retries: 10\r\n      delay: 10<\/pre>\n<p>This is how it looks like when the file is not created even after 10 retries with a delay of 10 seconds.<\/p>\n<p>by default the value you are giving for <code>delay<\/code> would be considered in seconds.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM.png\"><img class=\"post-img alignnone wp-image-8323 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM.png\" alt=\"ansible retry until\" width=\"1652\" height=\"1206\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM.png 1652w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM-300x219.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM-1024x748.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM-768x561.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM-1536x1121.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-07-at-2.50.14-AM-90x65.png 90w\" sizes=\"(max-width: 1652px) 100vw, 1652px\" \/><\/a><\/p>\n<p>The task would be marked as <code>failed<\/code><\/p>\n<p>you can write your task with any module and make it retry until a certain condition is met.<\/p>\n<p>Here I have used <code>Shell<\/code> module of ansible and running <code>ls -lrt<\/code> command. you can do the same with <code>file<\/code> module too<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n- name: Retry until a file is available\r\n  hosts: localhost\r\n  tasks:\r\n    - name: Validate if the file is present\r\n      file:\r\n        path: \/tmp\/myprocess.pid\r\n        state: file\r\n      register: lsresult\r\n      until: \"lsresult is not failed\"\r\n      retries: 10\r\n      delay: 10<\/pre>\n<p>Here the <code>state: file<\/code> just returns the state of the path provided. So we are using it to validate the presence of the file here.<\/p>\n<p>&nbsp;<\/p>\n<h2>Where Ansible Retry until can be used?<\/h2>\n<p>As you can see we can use <strong>until,<\/strong>\u00a0<strong>retries\u00a0<\/strong>and <strong>delay <\/strong>keywords with any task and make it retry for no of times with a defined interval<\/p>\n<p>I cannot say this is an alternative to the typical loop that runs the job until the condition is met.<\/p>\n<p>As you might have already noticed<\/p>\n<blockquote><p>\u00a0Ansible <strong>Retry until<\/strong> can rerun the task only until the <strong>defined number of retries<\/strong>. It cannot run the task forever until the condition is met, like a typical loop.<\/p><\/blockquote>\n<p>So we cannot use ansible retry for tasks which we cannot foresee\/estimate how long it may take.<\/p>\n<p>So this is definitely not a replacement for our typical loop. But it solves a major problem of having an infinite loop by timing out the task after defined retries.<\/p>\n<p>But sometimes we might want a task to continue infinite times until a certain condition is met, Despite the no of retries it has to take.<\/p>\n<p>Is there a way to make ansible retry go infinite retries?<\/p>\n<p>Fortunately Yes, there is a way to make Ansible retry to go on an infinite loop. we will talk about it later.<\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible Retries without Until<\/h2>\n<div id=\"retrying-a-task-until-a-condition-is-met\" class=\"section\">\n<p>When you run a task with\u00a0<code class=\"docutils literal notranslate\"><span class=\"pre\">until<\/span><\/code> and register the result as a variable, the registered variable will include a key called \u201cattempts\u201d, which records the number of the retries for the task.<\/p>\n<div class=\"admonition note\">\n<p>You must set the\u00a0<code class=\"docutils literal notranslate\"><span class=\"pre\">until<\/span><\/code>\u00a0parameter if you want a task to retry.<\/p>\n<p>If\u00a0<code class=\"docutils literal notranslate\"><span class=\"pre\">until<\/span><\/code>\u00a0is not defined, the value for the\u00a0<code class=\"docutils literal notranslate\"><span class=\"pre\">retries<\/span><\/code> parameter is forced to 1. So it would not retry<\/p>\n<p>Let us take the same playbook we have been using so far, A File watcher.<\/p>\n<p>All I am going to do is to remove the <code>until<\/code> keyword but the retries are going to remain as 10 times.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n- name: Retry until a file is available\r\n  hosts: localhost\r\n  tasks:\r\n    - name: Validate if the file is present\r\n      file:\r\n        path: \/tmp\/myprocess.pid\r\n        state: file\r\n      register: lsresult\r\n      retries: 10\r\n      delay: 10\r\n\r\n<\/pre>\n<\/div>\n<\/div>\n<p>&nbsp;<\/p>\n<p>Here is the execution output of this playbook ( on the right)<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM.png\"><img class=\"post-img alignnone wp-image-8329 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM.png\" alt=\"Ansible Retry until\" width=\"3390\" height=\"988\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM.png 3390w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM-300x87.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM-1024x298.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM-768x224.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM-1536x448.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-17-at-1.07.55-AM-2048x597.png 2048w\" sizes=\"(max-width: 3390px) 100vw, 3390px\" \/><\/a><\/p>\n<p>You can see, Despite having the retries set to 10 the task did not re-run.\u00a0 this would be the result of using retries without until conditional validation<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Difference between Ansible Wait_for and Retry until<\/h2>\n<p>If you have been practising Ansible for some time then you might have got this question already in your mind.<\/p>\n<p>How it is different from the Ansible wait_for module.<\/p>\n<p>For those who do not know what is ansible wait_for please read our dedicated ansible wait_for article and return here<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"ISxTRBjvWn\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\">Ansible wait_for module examples &#8211; How to | Devops Junction<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Ansible wait_for module examples &#8211; How to | Devops Junction&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/embed\/#?secret=ISxTRBjvWn\" data-secret=\"ISxTRBjvWn\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>While ansible wait_for helps in a similar use case and makes the task wait until a certain condition is met.<\/p>\n<p>There are few major differences between ansible wait_for and ansible retry until<\/p>\n<p>Here I tried to summarize a few of them<\/p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\"><span style=\"color: #003366;\"><strong>Ansible wait_for<\/strong><\/span><\/td>\n<td style=\"width: 50%; height: 28px;\"><strong><span style=\"color: #003366;\">\u00a0Ansible Retry until<\/span><\/strong><\/td>\n<\/tr>\n<tr style=\"height: 54px;\">\n<td style=\"width: 50%; height: 54px;\">A limited number of use cases, cannot be used directly with any module as wait_for is a module itself.<\/td>\n<td style=\"width: 50%; height: 54px;\">Can rerun any module with Ansible retry, until<\/td>\n<\/tr>\n<tr style=\"height: 54px;\">\n<td style=\"width: 50%; height: 54px;\">It can work with Ports and network interfaces and can wait until a reboot is completed<\/td>\n<td style=\"width: 50%; height: 54px;\">Cannot work directly with Network interfaces or used for port, connection\u00a0 monitoring<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\">The customized failure message is possible<\/td>\n<td style=\"width: 50%; height: 28px;\">Since Ansible Retry is not a separate module but an addon to rerun any module. it cannot have a customized failure message<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\">Rerun the entire task as an attempt until the condition is met, so can track the no of attempts.<\/td>\n<td style=\"width: 50%; height: 28px;\">Rerun the condition only, cannot track the attempts made<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>So both of them have specific use cases. While some of them can be overlapping like a file watcher but we can choose to use the right fit for your job.<\/p>\n<p>In fact, the file watcher playbook we have been discussing in our article can be achieved through ansible wait_for too as I have mentioned.<\/p>\n<p>here is the ansible-playbook waits for the file to be created using <code>wait_for<\/code> module<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">- name: Wait for the file to be available\r\n  register: waitforfile\r\n  wait_for:\r\n    path: \/tmp\/myprocess.pid\r\n    delay: 10\r\n    timeout: 30\r\n    state: present\r\n    msg: \"Specified PID FILE is not present\"<\/pre>\n<p>The execution output of this playbook has been given below.<\/p>\n<p>As you can see,\u00a0 It simply waits for the condition in the background and once the timeout is elapsed it fails.<\/p>\n<p>So both ansible retries until and wait_for do their tasks in different manner\/approach.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM.png\"><img class=\"post-img alignnone wp-image-8330 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM.png\" alt=\"Ansible retry until \" width=\"3380\" height=\"1032\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM.png 3380w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM-300x92.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM-1024x313.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM-768x234.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM-1536x469.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-18-at-12.13.23-AM-2048x625.png 2048w\" sizes=\"(max-width: 3380px) 100vw, 3380px\" \/><\/a><\/p>\n<h2><\/h2>\n<p>Here are some more examples we collected about Ansible retries until.<\/p>\n<p>As we have already mentioned you can use retries with any module and make it retry until a certain condition is met<\/p>\n<h2><\/h2>\n<h2>Ansible Retry until the remote URL is returning a message &#8211; Ansible wait_for URL or website<\/h2>\n<p>Here is an example of Ansible retry being used with the URI module to continuously check the remote URL and retry until the URL returns a certain message or content<\/p>\n<p>In another word, we are waiting for the website or webpage to respond.<\/p>\n<p>In this example, we are trying to hit the locally hosted web application at <code>http:\/\/localhost:8080<\/code><\/p>\n<p>but in real use cases, it can be a remote URL<\/p>\n<p>here we are looking for a message <code>Completed<\/code> be present in the response. If the response is not <code>Completed<\/code><\/p>\n<p>or the site is not responding or returning some 5xx 4xx error. the job would simply retry 2 times with a delay of 10.<\/p>\n<p>You can increase the delay and retries as per your requirement.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n- name: Ansible Retry Examples\r\n  hosts: localhost\r\n  tasks:\r\n  - name: Job Status Check\r\n    uri:\r\n      url: http:\/\/localhost:8080\r\n      return_content: yes\r\n    register: result\r\n    until: \"'Completed' in result.content\"\r\n    ignore_errors: yes\r\n    retries: 2\r\n    delay: 10<\/pre>\n<p>Here is the execution result along with the simple server node js code I have used to setup my server which returns a message <code>Completed<\/code><\/p>\n<p>If the message is present. the job would immediately become successful at the first time as shown in the following snapshot<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM.png\"><img class=\"post-img alignnone wp-image-8389 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM.png\" alt=\"ansible retry\" width=\"3584\" height=\"1676\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM.png 3584w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM-300x140.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM-1024x479.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM-768x359.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM-1536x718.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.01.29-PM-2048x958.png 2048w\" sizes=\"(max-width: 3584px) 100vw, 3584px\" \/><\/a><\/p>\n<p>If the message is not present. the job would retry for the specified number of times before eventually failing.<\/p>\n<p>Refer to the following snapshot where we have changed the message in the server.js to <code>InProgress<\/code><\/p>\n<p>We have also changed the retries to <code>10<\/code> and as you can see on the right side. It fails after trying for 10 times.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM.png\"><img class=\"post-img alignnone wp-image-8390 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM.png\" alt=\"\" width=\"3584\" height=\"1694\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM.png 3584w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM-300x142.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM-1024x484.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM-768x363.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM-1536x726.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-28-at-8.47.59-PM-2048x968.png 2048w\" sizes=\"(max-width: 3584px) 100vw, 3584px\" \/><\/a><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Ansible Retry until with include_tasks<\/h2>\n<p>here is one more example where we are going to execute a couple of other ansible playbooks using <code>include_tasks<\/code> until the condition is satisfied<\/p>\n<p>It is similar to the same template we have been following. Instead of one task, we are going to invoke one\/multiple tasks using include_tasks<\/p>\n<p>now let us see an example where we are going to invoke two tasks<\/p>\n<ul>\n<li>The first task is to retry until the file exists<\/li>\n<li>Send Slack notification with the status of the file creation<\/li>\n<\/ul>\n<p>Both these tasks would be on the same file which would be called by include_tasks<\/p>\n<p>Since this is include_tasks, we are going to create two individual files.<\/p>\n<ul>\n<li>main.yml &#8211; the main playbook<\/li>\n<li>retry-until-file-create.yml &#8211; tasks file<\/li>\n<\/ul>\n<p>here is the <code>main.yml<\/code> file which invokes the other tasks using <code>include_tasks<\/code><\/p>\n<p><strong><span style=\"color: #003366;\">main.yml<\/span><\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n- name: Ansible Retry with include_tasks example\r\n  hosts: localhost\r\n  tasks:\r\n    - name: Executing the task\r\n      include_tasks:\r\n        file: retry-until-file-create.yaml\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p><strong><span style=\"color: #003366;\">retry-until-file-create.yaml<\/span><\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n  - name: Wait for the file to be available\r\n    register: fileexists\r\n    file:\r\n      path: \/tmp\/myprocess.pid\r\n      state: file\r\n    until: fileexists is not failed\r\n    retries: 5\r\n    delay: 10\r\n    ignore_errors: true\r\n  \r\n  - name: notify Slack that the job is failing\r\n    tags: slack\r\n    community.general.slack:\r\n      token: T02****8KPF\/*******\/WOa7r*****tXy7Ao0jnWn\r\n      msg: |\r\n          ### StatusUpdate ###\r\n          &#8211; ------------------------------------\r\n          ``\r\n          `Server`: {{ansible_host}}\r\n          `Status`: Ansible File Watcher Job failed\r\n          &#8211; ------------------------------------\r\n      channel: '#ansible'\r\n      color: good\r\n      username: 'Ansible on {{ inventory_hostname }}'\r\n      link_names: 0\r\n      parse: 'none'\r\n    when: fileexists is failed\r\n\r\n  - name: notify Slack that the job is Successful\r\n    tags: slack\r\n    community.general.slack:\r\n      token: T02****8KPF\/*******\/WOa7r*****tXy7Ao0jnWn\r\n      msg: |\r\n          ### StatusUpdate ###\r\n          &#8211; ------------------------------------\r\n          ``\r\n          `Server`: {{ansible_host}}\r\n          `Status`: Ansible File Watcher Job Successful.\r\n          &#8211; ------------------------------------\r\n      channel: '#ansible'\r\n      color: good\r\n      username: 'Ansible on {{ inventory_hostname }}'\r\n      link_names: 0\r\n      parse: 'none'\r\n    when: fileexists is not failed<\/pre>\n<p>that is a. quick example of using <code>incloude_tasks<\/code> with ansible retries<\/p>\n<p>The Main task would validate if the file exists for a defined period and fail, Since we have set <code>ignore_errors: true<\/code> it would not fail the entire playbook<\/p>\n<p>It will then move on the next stage of sending notification based on the status of the main task.<\/p>\n<p>If the file exists, the main task would be successful <code>not failed<\/code> and it would invoke the Successful message Slack notification<\/p>\n<p>In case of failure, it would invoke the failure notification message.<\/p>\n<p>Both are done using the <code>when: result is failed<\/code> or <code>not failed<\/code> validation<\/p>\n<p>Here is a simple Slack notification that has been generated and received in our slack channel.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM.png\"><img class=\"post-img alignnone wp-image-8406 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM.png\" alt=\"Ansible retry include_tasks\" width=\"2824\" height=\"652\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM.png 2824w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM-300x69.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM-1024x236.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM-768x177.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM-1536x355.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/04\/Screenshot-2022-04-30-at-11.41.18-PM-2048x473.png 2048w\" sizes=\"(max-width: 2824px) 100vw, 2824px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible Retry until with include_tasks &#8211; Ansible Infinite Retry<\/h2>\n<p>As I have mentioned earlier, there is a way to make ansible retry to go infinite<\/p>\n<p>Let&#8217;s see, How to make Ansible retry never end<\/p>\n<p>To make Ansible Retry go infinite and continue even after the retries timeout we have to use the same principle we used with import_tasks<\/p>\n<p>The first thing to make ansible retry go infinite is to split the task you want to execute and run it as part of <code>import_tasks<\/code><\/p>\n<ul>\n<li>main.yml &#8211; the main playbook<\/li>\n<li>retry-until-file-create.yml &#8211; tasks file<\/li>\n<\/ul>\n<p>In the previous example, we have seen how to create two playbooks one is a main playbook and the other contains the tasks<\/p>\n<p>The only difference between the previous example and the current one is one line.<\/p>\n<p>we are going to make the <code>retry-until-file-create.yml<\/code> to call itself once again using the <code>import_tasks<\/code><\/p>\n<blockquote><p>the task playbook would call itself once again ( restart) if the task is not successful<\/p><\/blockquote>\n<p>Here are the playbooks<\/p>\n<p><strong><span style=\"color: #003366;\">main.yml<\/span><\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n- name: Ansible Retry with include_tasks example\r\n  hosts: localhost\r\n  tasks:\r\n    - name: Executing the task\r\n      include_tasks:\r\n        file: retry-until-file-create.yaml\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p><strong><span style=\"color: #003366;\">retry-until-file-create.yaml<\/span><\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">---\r\n  - name: Wait for the file to be available\r\n    register: fileexists\r\n    file:\r\n      path: \/tmp\/myprocess.pid\r\n      state: file\r\n    until: fileexists is not failed\r\n    retries: 5\r\n    delay: 10\r\n    ignore_errors: true\r\n  \r\n  - name: notify Slack that the job is failing\r\n    tags: slack\r\n    community.general.slack:\r\n      token: T02****8KPF\/*******\/WOa7r*****tXy7Ao0jnWn\r\n      msg: |\r\n          ### StatusUpdate ###\r\n          &#8211; ------------------------------------\r\n          ``\r\n          `Server`: {{ansible_host}}\r\n          `Status`: Ansible File Watcher Job failed\r\n          &#8211; ------------------------------------\r\n      channel: '#ansible'\r\n      color: good\r\n      username: 'Ansible on {{ inventory_hostname }}'\r\n      link_names: 0\r\n      parse: 'none'\r\n    when: fileexists is failed\r\n    ignore_errors: true\r\n\r\n  - name: notify Slack that the job is Successful\r\n    tags: slack\r\n    community.general.slack:\r\n      token: T02****8KPF\/*******\/WOa7r*****tXy7Ao0jnWn\r\n      msg: |\r\n          ### StatusUpdate ###\r\n          &#8211; ------------------------------------\r\n          ``\r\n          `Server`: {{ansible_host}}\r\n          `Status`: Ansible File Watcher Job Successful.\r\n          &#8211; ------------------------------------\r\n      channel: '#ansible'\r\n      color: good\r\n      username: 'Ansible on {{ inventory_hostname }}'\r\n      link_names: 0\r\n      parse: 'none'\r\n    when: fileexists is not failed\r\n\r\n  - name: Re run the task if failed\r\n    include_tasks: retry-until-file-create.yaml\r\n    when: \"fileexists is failed\"<\/pre>\n<p>&nbsp;<\/p>\n<p>Here is the terminal recording of this playbook execution.<\/p>\n<p><script id=\"asciicast-CF45z2LpEpchmPEX0imQOpp18\" src=\"https:\/\/asciinema.org\/a\/CF45z2LpEpchmPEX0imQOpp18.js\" async><\/script><\/p>\n<p>As you can see the job is continuously retrying without ending when the main task is failing and stop automatically when the main task ( File existence) is successful.<\/p>\n<p>This is how we can make Ansible retry continue infinitely without timing out<\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>In this article, we have learnt about ansible retry until and how it differs from ansible wait module<\/p>\n<p>We also learnt the following key objectives.<\/p>\n<ul>\n<li>How to retry until a task is complete with Ansible<\/li>\n<li>How to retry until a file exists in Ansible<\/li>\n<li>Retrying with include_tasks<\/li>\n<li>How to send Slack notification when the job fails after retry<\/li>\n<li>How to make Ansible retry to run infinite without a timeout<\/li>\n<\/ul>\n<p>hope this helps.\u00a0 If you are looking for professional DevOps support for your company or individually do reach out to us at <a href=\"mailto:rumenlishkoff@gmail.com\">rumenlishkoff@gmail.com<\/a><\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670576899\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"8203\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670576899\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670576899\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>in this article, we are going to see how to retry an ansible task until it meets a certain condition or validation. It is more like do sometask until somecondition kind of setup available in all the programming and scripting languages Ansible lets you execute a task until a condition[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":8408,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible Retry Examples - Retry a task until condition met | DevopsJunction<\/title>\n<meta name=\"description\" content=\"Ansible retry examples. How to retry a task in ansible until a certain condition is met. Ansible retry until file exists. Ansible retry include_tasks. Ansible retry infinite without timeout.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible Retry Examples - Retry a task until condition met | DevopsJunction\" \/>\n<meta property=\"og:description\" content=\"Ansible retry examples. How to retry a task in ansible until a certain condition is met. Ansible retry until file exists. Ansible retry include_tasks. Ansible retry infinite without timeout.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2022-05-01T10:14:21+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-05T12:23:50+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/05\/ansible-retry.jpg\",\"width\":1748,\"height\":1240,\"caption\":\"Ansible retry\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/\",\"name\":\"Ansible Retry Examples - Retry a task until condition met | DevopsJunction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#primaryimage\"},\"datePublished\":\"2022-05-01T10:14:21+00:00\",\"dateModified\":\"2022-11-05T12:23:50+00:00\",\"description\":\"Ansible retry examples. How to retry a task in ansible until a certain condition is met. Ansible retry until file exists. Ansible retry include_tasks. Ansible retry infinite without timeout.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible Retry Examples &#8211; Retry a task until condition met | DevopsJunction\",\"datePublished\":\"2022-05-01T10:14:21+00:00\",\"dateModified\":\"2022-11-05T12:23:50+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#primaryimage\"},\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-retry-examples\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8203"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=8203"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8203\/revisions"}],"predecessor-version":[{"id":9231,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8203\/revisions\/9231"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/8408"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=8203"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=8203"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=8203"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}