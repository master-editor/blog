{"id":8080,"date":"2022-02-12T22:15:35","date_gmt":"2022-02-12T16:45:35","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=8080"},"modified":"2022-11-11T00:48:12","modified_gmt":"2022-11-10T19:18:12","slug":"terraform-for-each-examples","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/","title":{"rendered":"Terraform For Each Examples &#8211; How to use for_each | Devops Junction"},"content":{"rendered":"<p>In this post, we\u2019ll try to cover Terraform looping constructs.<\/p>\n<p>We\u2019ll cover the looping constructs that specifically work at the\u00a0<strong>resource<\/strong>\u00a0level. They handle resource creation itself.<\/p>\n<p>There are two Looping constructs.<\/p>\n<ol>\n<li><strong>count<\/strong>: This is often brought up when talking about looping with Terraform.<\/li>\n<li><strong>for_each<\/strong>: This technique is similar to the count method but has some advantages. It should be generally used overcount.<\/li>\n<\/ol>\n<p class=\"g-type-long-body\">The\u00a0<code>for_each<\/code>\u00a0argument will iterate over a data structure to configure resources or modules with each item in turn.<\/p>\n<p class=\"g-type-long-body\">It works best when the duplicate resources need to be configured differently but share the same lifecycle.<\/p>\n<p>It is more like any other <code>for_each<\/code> in any given programming language.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each.jpg\"><img class=\"alignnone size-full wp-image-8197\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each.jpg\" alt=\"\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each.jpg 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each-300x213.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each-1024x726.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each-768x545.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each-1536x1090.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each-90x65.jpg 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<h2>Terraform for each Simple List Example<\/h2>\n<div>\n<p>Let&#8217;s look at below simple example of Terraform for each. Here we have used terraform null_resource<\/p>\n<p>Create main.tf file with below contents<\/p>\n<\/div>\n<div><\/div>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">locals {\r\n  avengers = [\"ironman\", \"captain america\", \"thor\",\"doctor strange\",\"spider man\",\"hulk\",\"black panther\",\"black widow\"]\r\n}\r\nresource \"null_resource\" \"avengers\" {\r\n  for_each = toset(local.avengers)\r\n  triggers = {\r\n    name = each.value\r\n  }\r\n}\r\noutput \"avengers\" {\r\n  value = null_resource.avengers\r\n}\r\n<\/pre>\n<ul>\n<li>The\u00a0<code>null_resource<\/code> resource implements the standard resource lifecycle but takes no further action. The\u00a0<code>triggers<\/code> argument allows specifying a random set of values.\u00a0 These values when changed will cause the resource to be replaced.<\/li>\n<li>With\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each<\/code>, we must convert the List type to a Set with\u00a0<code class=\"language-plaintext highlighter-rouge\">toset(local.avengers)<\/code>. Note, we could have also used a variable with\u00a0<code class=\"language-plaintext highlighter-rouge\">type = set(string)<\/code>\u00a0instead of using the\u00a0<code class=\"language-plaintext highlighter-rouge\">toset<\/code> function.<\/li>\n<li>There\u2019s a special\u00a0<code class=\"language-plaintext highlighter-rouge\">each<\/code> object that is assigned by Terraform.\u00a0 The object has 2 attributes:\u00a0<code class=\"language-plaintext highlighter-rouge\">each.key<\/code>\u00a0and\u00a0<code class=\"language-plaintext highlighter-rouge\">.each.value<\/code><\/li>\n<\/ul>\n<h3 id=\"for-each-argument-requirements\"><\/h3>\n<p>In the previous example, we pointed out the conversion of the List to a Set with\u00a0<code class=\"language-plaintext highlighter-rouge\">toset(local.avengers)<\/code>. If we did not convert it and used this code instead:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">resource \"null_resource\" \"avengers\" {\r\n  for_each = local.avengers # instead of toset(local.avengers)\r\n  triggers = {\r\n    name = each.value\r\n  }\r\n}<\/pre>\n<p>Terraform would produce an error like this<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"typescript\" data-enlighter-theme=\"bootstrap4\">Error: Invalid for_each argument\r\n\r\n  on main.tf line 28, in resource \"null_resource\" \"avengers\":\r\n  28:   for_each = local.avengers\r\n\r\nThe given \"for_each\" argument value is unsuitable: the \"for_each\" argument\r\nmust be a map, or set of strings, and you have provided a value of type tuple.<\/pre>\n<p>As per the above error snippet, it is confirmed that <code class=\"language-plaintext highlighter-rouge\">for_each<\/code> can be assigned\u00a0 to the following items<\/p>\n<ol>\n<li>a Map<\/li>\n<li>Set of Strings<\/li>\n<\/ol>\n<p>To get more clarity on this topic, let\u2019s take a look at the difference between a Terraform List and a Set.<\/p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\">set = toset([\"w\", \"x\", \"x\"]) # =&gt; [\"w\", \"x\"] all elements are unique\r\nlist = [\"w\", \"x\", \"x\"] # =&gt; [\"w\", \"x\", \"x\"] the elements don't have to be unique\r\n<\/pre>\n<\/div>\n<\/div>\n<p>So the difference between a List and a Set is that Set values are all guaranteed to be unique. Also, Sets do not have any particular ordering.<\/p>\n<p>And map structure looks like this:<\/p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\">map = {w = 1, x = 2}\r\n<\/pre>\n<\/div>\n<\/div>\n<p>With a map, the key naturally provides uniqueness already.<\/p>\n<p>So Terraform\u2019s\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each<\/code>\u00a0type requirement stems from uniqueness.<\/p>\n<p>Each element in the iteration needs to have a unique key. Terraform did this by design. It allows us to reference resources by a unique identifier easily.<\/p>\n<p>Let&#8217;s apply changes with <code>terraform apply<\/code> command<\/p>\n<p>You should see output similar to below<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">Outputs:\r\n\r\navengers = {\r\n  \"balck panther\" = {\r\n    \"id\" = \"2802565293094280916\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"balck panther\"\r\n    })\r\n  }\r\n  \"black widow\" = {\r\n    \"id\" = \"6013354124200750553\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"black widow\"\r\n    })\r\n  }\r\n  \"captain america\" = {\r\n    \"id\" = \"5480470924120220280\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"captain america\"\r\n    })\r\n  }\r\n  \"doctor strange\" = {\r\n    \"id\" = \"4072771293727751674\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"doctor strange\"\r\n    })\r\n  }\r\n  \"hulk\" = {\r\n    \"id\" = \"7390401988508483769\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"hulk\"\r\n    })\r\n  }\r\n  \"ironman\" = {\r\n    \"id\" = \"3593363658702079486\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"ironman\"\r\n    })\r\n  }\r\n  \"spider man\" = {\r\n    \"id\" = \"3684530120944521232\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"spider man\"\r\n    })\r\n  }\r\n  \"thor\" = {\r\n    \"id\" = \"9185261633914444058\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"thor\"\r\n    })\r\n  }\r\n}\r\n<\/pre>\n<p>By looking at Terraform output, we can confirm that resulting resources created with the <code class=\"language-plaintext highlighter-rouge\">for_each<\/code> is a Map.<\/p>\n<p>The resulting object is a Map with unique keys that ties it back to the\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each<\/code>\u00a0assignment. This is why\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each<\/code> can only be assigned a Map or a Set of Strings: uniqueness<\/p>\n<p>&nbsp;<\/p>\n<h2>Terraform For Each with Map Example<\/h2>\n<p>The recommended way to use a\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each<\/code>\u00a0loop is with a Map value. It\u2019s a natural fit since we don\u2019t have to do any\u00a0<code class=\"language-plaintext highlighter-rouge\">toset<\/code>\u00a0conversion.<\/p>\n<p>Look at the below snippet.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">locals {\r\n  strengths = {\r\n    \"Ironman\"         = \"Artificial Intelligence\"\r\n    \"Captain America\" = \"Sheild\"\r\n    \"Hulk\"            = \"Muscle Power\"\r\n    \"Black widow\"     = \"Martial Arts\"\r\n    \"Thor\"            = \"Hammer\"\r\n    \"Spider Man\"      = \"Web\"\r\n    \"Black Panther\"   = \"Vibranium suit\"\r\n  }\r\n}\r\nresource \"null_resource\" \"strengths\" {\r\n  for_each = local.strengths\r\n  triggers = {\r\n    name  = each.key\r\n    power = each.value\r\n  }\r\n}\r\noutput \"strengths\" {\r\n  value = null_resource.strengths\r\n}\r\n<\/pre>\n<p>Here we are listing the name and power of marvel&#8217;s avengers in map format.<\/p>\n<p>This would result in the below output format<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">strengths = {\r\n  \"Black Panther\" = {\r\n    \"id\" = \"6089652037089638193\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Black Panther\"\r\n      \"power\" = \"Vibranium suit\"\r\n    })\r\n  }\r\n  \"Black widow\" = {\r\n    \"id\" = \"3853301065318607159\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Black widow\"\r\n      \"power\" = \"Martial Arts\"\r\n    })\r\n  }\r\n  \"Captain America\" = {\r\n    \"id\" = \"182468351001110290\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Captain America\"\r\n      \"power\" = \"Sheild\"\r\n    })\r\n  }\r\n  \"Hulk\" = {\r\n    \"id\" = \"7283220352459556352\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Hulk\"\r\n      \"power\" = \"Muscle Power\"\r\n    })\r\n  }\r\n  \"Ironman\" = {\r\n    \"id\" = \"4223635774718233881\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Ironman\"\r\n      \"power\" = \"Artificial Intelligence\"\r\n    })\r\n  }\r\n  \"Spider Man\" = {\r\n    \"id\" = \"3262424659295311455\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Spider Man\"\r\n      \"power\" = \"Web\"\r\n    })\r\n  }\r\n  \"Thor\" = {\r\n    \"id\" = \"4876955704767038788\"\r\n    \"triggers\" = tomap({\r\n      \"name\" = \"Thor\"\r\n      \"power\" = \"Hammer\"\r\n    })\r\n  }\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Terraform For Each Dynamic block example<\/h2>\n<p>Here, In this section, We are going to discuss terraform looping construct, the dynamic nested block. The dynamic nested block provides a way to build repeated nested configuration blocks. This construct works at the\u00a0<strong>attribute<\/strong>\u00a0level.<\/p>\n<p>Take a look at below example<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">resource \"aws_security_group\" \"foreachusecase\" {\r\n  name        = \"demo_for_foreach_usecase\"\r\n  description = \"demo_for_foreach_usecase\"\r\n\r\n  ingress {\r\n    description = \"rule for http\"\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0\/0\"]\r\n  }\r\n  ingress {\r\n    description = \"rule for ssh\"\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0\/0\"]\r\n  }\r\n}<\/pre>\n<p>Dynamic nested blocks can be used to assign multiple attributes. Now, the above code can be re-written as below<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">locals {\r\n  ports = [80, 22]\r\n}\r\nresource \"aws_security_group\" \"foreachusecase\" {\r\n  name        = \"demo_for_foreach_usecase\"\r\n  description = \"demo_for_foreach_usecase\"\r\n\r\n  dynamic \"ingress\" {\r\n    for_each = local.ports\r\n    content {\r\n      description = \"description ${ingress.key}\"\r\n      from_port   = ingress.value\r\n      to_port     = ingress.value\r\n      protocol    = \"tcp\"\r\n      cidr_blocks = [\"0.0.0.0\/0\"]\r\n    }\r\n  }\r\n}<\/pre>\n<p>In the above code,<\/p>\n<ul>\n<li>The dynamic argument is the original attribute we declared with a configuration block: \u201cingress\u201d<\/li>\n<li>A\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each<\/code>\u00a0assignment is used.<\/li>\n<li>The\u00a0<code class=\"language-plaintext highlighter-rouge\">content<\/code>\u00a0block contains the original \u201cingress\u201d block.<\/li>\n<li>Terraform implicitly provides an <code class=\"language-plaintext highlighter-rouge\">ingress<\/code>\u00a0object. The object name matches the dynamic argument \u201cingress\u201d.<\/li>\n<li>The\u00a0<code class=\"language-plaintext highlighter-rouge\">ingress<\/code>\u00a0object is a wrapper iterator object that contains info for each element that was assigned with\u00a0<code class=\"language-plaintext highlighter-rouge\">for_each = local.ports<\/code><\/li>\n<\/ul>\n<h3 id=\"for-each-map-example\">Dynamic block with map attributes<\/h3>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">locals {\r\n  map = {\r\n    \"http rule\" = {\r\n      port = 80\r\n      cidr_blocks = [\"0.0.0.0\/0\"],\r\n    }\r\n    \"ssh rule\" = {\r\n      port = 22\r\n      cidr_blocks = [\"0.0.0.0\/0\"],\r\n    }\r\n  }\r\n}\r\nresource \"aws_security_group\" \"foreachusecase\" {\r\n  name        = \"demo_for_foreach_usecase\"\r\n  description = \"demo_for_foreach_usecase\"\r\n\r\n  dynamic \"ingress\" {\r\n    for_each = local.map\r\n    content {\r\n      description = ingress.key # IE: \"demo_for_foreach_usecase\"\r\n      from_port   = ingress.value.port\r\n      to_port     = ingress.value.port\r\n      protocol    = \"tcp\"\r\n      cidr_blocks = ingress.value.cidr_blocks\r\n    }\r\n  }\r\n}\r\noutput \"map\" {\r\n  value = aws_security_group.foreachusecase\r\n}\r\n<\/pre>\n<p>Take a look at the below table, where each iteration is defined with proper values<\/p>\n<ul>\n<li>the\u00a0<code class=\"language-plaintext highlighter-rouge\">ingress<\/code>\u00a0object is a wrapper object<\/li>\n<li>the <code class=\"language-plaintext highlighter-rouge\">ingress.value<\/code> unravels the wrapper object and contains each element of the map<\/li>\n<li>the\u00a0<code class=\"language-plaintext highlighter-rouge\">ingress.key<\/code> is used because it contains the description (http rule and ssh rule)<\/li>\n<\/ul>\n<table style=\"border-collapse: collapse; width: 100%; height: 54px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 22px;\">\n<td style=\"width: 27.5904%; height: 22px; text-align: center;\"><strong>Iteration<\/strong><\/td>\n<td style=\"width: 72.4096%; height: 22px; text-align: center;\"><strong>Values<\/strong><\/td>\n<\/tr>\n<tr style=\"height: 54px;\">\n<td style=\"width: 27.5904%; text-align: center; height: 54px;\">1<\/td>\n<td style=\"width: 72.4096%; height: 54px;\"><code class=\"language-plaintext highlighter-rouge\">ingress.key = \"http rule\"<\/code>\u00a0and\u00a0<code class=\"language-plaintext highlighter-rouge\">ingress.value = {port = 80, cidr_blocks = [\"0.0.0.0\/0\"]<\/code><\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 27.5904%; height: 28px; text-align: center;\">2<\/td>\n<td style=\"width: 72.4096%; height: 28px;\"><code class=\"language-plaintext highlighter-rouge\">ingress.key = \"ssh rule\"<\/code>\u00a0and\u00a0<code class=\"language-plaintext highlighter-rouge\">ingress.value = {port = 22, cidr_blocks = [\"0.0.0.0\/0\"]<\/code><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<h2>Terraform For Each General AWS example<\/h2>\n<p>In this example, we shall see how we can create an auto-scaling group in AWS using terraform for_each capability.<\/p>\n<p>Let&#8217;s take a look at below example<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">terraform{\r\n  required_version = \"&gt;=0.12\"\r\n}\r\n\r\nprovider \"aws\"{\r\n  region = \"us-east-1\"\r\n}\r\n\r\ndata \"aws_availability_zones\" \"all\"{}\r\n\r\nresource \"aws_autoscaling_group\" \"asg\" {\r\n  launch_configuration = aws_launch_configuration.alc.id\r\n  availability_zones   = data.aws_availability_zones.all.names\r\n\r\n  min_size = 2\r\n  max_size = 2\r\n\r\n  # Use for_each to loop over var.custom_tags\r\n  dynamic \"tag\" {\r\n    for_each = var.custom_tags\r\n    content {\r\n      key                 = tag.key\r\n      value               = tag.value\r\n      propagate_at_launch = true\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_launch_configuration\" \"alc\" {\r\n  image_id        = \"ami-07ebfd5b3428b6f4d\"\r\n  instance_type   = \"t2.nano\"\r\n\r\n  lifecycle {\r\n    create_before_destroy = true\r\n  }\r\n}\r\n<\/pre>\n<p>If you look at the resource <code>aws_autoscaling_group<\/code>\u00a0 block, we have a dynamic block defined with &#8216;for_each&#8217; functionality.<\/p>\n<p>variable &#8216;custom_tag&#8217; is assigned to this for_each functionality.<\/p>\n<p>Now, take a look at the below <code>variables.tf<\/code> file contents<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">variable \"custom_tags\" {\r\n  description = \"Custom tags to set on the Instances in the ASG\"\r\n  type        = map(string)\r\n  default = {\r\n    \"AAA\" = \"King\"\r\n    \"ZZZ\" = \"Lion\"\r\n  }\r\n}\r\n<\/pre>\n<p>we have a default map with two keys namely <code>AAA<\/code> and <code>BBB<\/code> with values <code>King<\/code> and <code>Lion<\/code> respectively.<\/p>\n<p>Now, when we execute <code>main.tf<\/code> with <code>terraform apply<\/code> command, terraform will create ASG (Auto Scaling Group) in our AWS account with two tags namely<\/p>\n<pre>\"AAA\" = \"King\"\r\n\"ZZZ\" = \"Lion\"<\/pre>\n<p>Let&#8217;s run below terraform commands to see working in real action<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">terraform init\r\nterraform validate\r\nterraform plan\r\nterraform apply &#8211; auto-approve<\/pre>\n<p>you should see output similar to below<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">Plan: 2 to add, 0 to change, 0 to destroy.\r\naws_launch_configuration.alc: Creating...\r\naws_launch_configuration.alc: Creation complete after 5s [id=terraform-20220206141921193000000001]\r\naws_autoscaling_group.asg: Creating...\r\naws_autoscaling_group.asg: Still creating... [10s elapsed]\r\naws_autoscaling_group.asg: Still creating... [20s elapsed]\r\naws_autoscaling_group.asg: Still creating... [30s elapsed]\r\naws_autoscaling_group.asg: Still creating... [40s elapsed]\r\naws_autoscaling_group.asg: Still creating... [50s elapsed]\r\naws_autoscaling_group.asg: Still creating... [1m0s elapsed]\r\naws_autoscaling_group.asg: Still creating... [1m10s elapsed]\r\naws_autoscaling_group.asg: Creation complete after 1m13s [id=terraform-20220206141926079900000002]<\/pre>\n<p>Now we can confirm the same by logging into the AWS console. Please see the below screenshot for reference<\/p>\n<p style=\"text-align: left;\"><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01.png\"><img class=\"post-img alignleft wp-image-8100 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01.png\" alt=\"\" width=\"3248\" height=\"1016\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01.png 3248w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01-300x94.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01-1024x320.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01-768x240.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01-1536x480.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/ASG-01-2048x641.png 2048w\" sizes=\"(max-width: 3248px) 100vw, 3248px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>Terraform count and for_each together.<\/h2>\n<p>Sometimes you cannot just use <code>for_each<\/code> you might need a help of <code>count<\/code> too.<\/p>\n<p>But <code>count<\/code> and <code>for_each<\/code> are mutually exclusive and you cannot use them together but there is a way.<\/p>\n<p>we discussed the same in another article<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"FSHpVZAcwI\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\">Terraform Create Multiple EC2 with different Configs &#8211; for_each and count together<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Terraform Create Multiple EC2 with different Configs &#8211; for_each and count together&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/embed\/#?secret=FSHpVZAcwI\" data-secret=\"FSHpVZAcwI\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nTapan Hegde<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577312\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"8080\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577312\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577312\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>In this post, we\u2019ll try to cover Terraform looping constructs. We\u2019ll cover the looping constructs that specifically work at the\u00a0resource\u00a0level. They handle resource creation itself. There are two Looping constructs. count: This is often brought up when talking about looping with Terraform. for_each: This technique is similar to the count[&#8230;]<\/p>\n","protected":false},"author":271,"featured_media":8197,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[454,233],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Terraform For Each Examples - How to use for_each | Devops Junction<\/title>\n<meta name=\"description\" content=\"Terraform for each example. how to use for each with Terraform. Examples for Terraform for-each looping. How to use loop in Terraform. For each iteration example Terraform\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Terraform For Each Examples - How to use for_each | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Terraform for each example. how to use for each with Terraform. Examples for Terraform for-each looping. How to use loop in Terraform. For each iteration example Terraform\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2022-02-12T16:45:35+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:18:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/02\/terraform_for_each.jpg\",\"width\":1748,\"height\":1240},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/\",\"name\":\"Terraform For Each Examples - How to use for_each | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#primaryimage\"},\"datePublished\":\"2022-02-12T16:45:35+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"description\":\"Terraform for each example. how to use for each with Terraform. Examples for Terraform for-each looping. How to use loop in Terraform. For each iteration example Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/a3628fb28665348f6aab4f472ebf7837\"},\"headline\":\"Terraform For Each Examples &#8211; How to use for_each | Devops Junction\",\"datePublished\":\"2022-02-12T16:45:35+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#primaryimage\"},\"articleSection\":\"DevOps_Beginner,Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-for-each-examples\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/a3628fb28665348f6aab4f472ebf7837\",\"name\":\"Tapan Hegde\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/cc6f526212cdbf66b6a32db548fa54b8?s=96&d=mm&r=g\",\"caption\":\"Tapan Hegde\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8080"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/271"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=8080"}],"version-history":[{"count":6,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8080\/revisions"}],"predecessor-version":[{"id":8200,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8080\/revisions\/8200"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/8197"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=8080"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=8080"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=8080"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}