{"id":4709,"date":"2020-01-14T05:30:38","date_gmt":"2020-01-14T00:00:38","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=4709"},"modified":"2022-11-11T00:48:12","modified_gmt":"2022-11-10T19:18:12","slug":"terraform-aws-example-ec2","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/","title":{"rendered":"Terraform AWS Example &#8211; Create EC2 instance with Terraform"},"content":{"rendered":"<p>Terraform, An outstanding and innovative product from hashicorp and it is a leader in Infrastructure as Code tools Segment.\u00a0 Before I go any further, I think I should set the context.<\/p>\n<p>In this article, we are going to learn how to use Terraform to create AWS EC2 instance and create a Terraform AWS infrastructure.\u00a0 We will cover few basic elements like what is Infrastructure as code, What is Terraform etc and setup AWS API authentication and start creating Terraform configuration files for AWS provisioning<\/p>\n<h2>What is <span style=\"color: #e60b6e;\">Infrastructure as Code &#8211; Terraform<br \/>\n<\/span><\/h2>\n<p>Infrastructure as Code often referred to as IaC, is where the developer or system admins write code to achieve the end state of the infrastructure or server they desire. For example, Let&#8217;s suppose You want to create an infrastructure of LAMP (Linux Apache MySql PHP) along with some other Linux tools like <code>nc, curl, Openssl<\/code>\u00a0etc<\/p>\n<p>The traditional approach is to build the Virtual machine and install these tools one after another. While this sounds convenient. It takes hours of productivity and creates a huge delay for the server setup or provisioning<\/p>\n<p>While the world is moving towards containers and desired state and auto-scale. We need something powerful to help us create instances\/Infra in a single click.<\/p>\n<p>Thanks to IaC.!!\u00a0 it helps us set up even a complicated infrastructure in a short span of time.<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>What <span style=\"color: #e81067;\">tools<\/span> are used in <span style=\"color: #e81067;\">Infrastructure as Code<\/span><\/h2>\n<p>There are so many tools in the market helps you to achieve the IaC. Some of them are listed below.<\/p>\n<ul class=\"\">\n<li id=\"050f\" class=\"ih ii dt bg ij b ik il im in io ip iq ir is it iu jb jc jd\" data-selectable-paragraph=\"\">Chef<\/li>\n<li id=\"27c3\" class=\"ih ii dt bg ij b ik je im jf io jg iq jh is ji iu jb jc jd\" data-selectable-paragraph=\"\">Puppet<\/li>\n<li id=\"5e54\" class=\"ih ii dt bg ij b ik je im jf io jg iq jh is ji iu jb jc jd\" data-selectable-paragraph=\"\">Ansible<\/li>\n<li id=\"b842\" class=\"ih ii dt bg ij b ik je im jf io jg iq jh is ji iu jb jc jd\" data-selectable-paragraph=\"\">SaltStack<\/li>\n<li id=\"682e\" class=\"ih ii dt bg ij b ik je im jf io jg iq jh is ji iu jb jc jd\" data-selectable-paragraph=\"\">CloudFormation<\/li>\n<li id=\"71f7\" class=\"ih ii dt bg ij b ik je im jf io jg iq jh is ji iu jb jc jd\" data-selectable-paragraph=\"\">Terraform<\/li>\n<\/ul>\n<p>All of these can manage IaC and work with different cloud providers except Cloud Formation as it was limited only to AWS.\u00a0 Almost all of them are OpenSource as well backed by a large community. It is always a tough choice to choose the right product from this.<\/p>\n<p>While everything has its pros and cons. Terraform outruns them for the right reasons.<\/p>\n<p>&nbsp;<\/p>\n<h2><span style=\"color: #000000;\">What is<\/span>\u00a0<span style=\"color: #e81067;\">Terraform<\/span><\/h2>\n<p><strong>Terraform typically means transforming (a planet) so as to resemble the earth, especially so that it can support human life.<\/strong><\/p>\n<p>I would say they named this product right. Terraform. In a universe of various Cloud technologies (planets) like AWS, Azure, Digital Ocean etcetera,<\/p>\n<p>Terraform is an open-source\u00a0<strong>infrastructure as code<\/strong>\u00a0software tool created by HashiCorp. It enables users to define and provision a data center infrastructure using a high-level configuration language known as Hashicorp Configuration Language (HCL), or optionally JSON.<\/p>\n<p>Terraform supports a number of cloud infrastructure providers such as Amazon Web Services, IBM Cloud (formerly Bluemix), Google Cloud Platform, Linode, Microsoft Azure, Oracle Cloud Infrastructure, or VMware vSphere as well as OpenStack<\/p>\n<p>Since this is going to be the process of\u00a0\u00a0<strong>Infrastructure as a Code\u00a0<\/strong>paradigm. We need a API programmatic access for AWS.<\/p>\n<p>So we are going to programmatically create terraform ec2 instance. This article is going to all about Terraform AWS Example and how to Create EC2 instance with Terraform.<\/p>\n<p>&nbsp;<\/p>\n<blockquote><p>If you want to compare Terraform with other <strong>IaC<\/strong> products like Ansible, Cloudformation. Don&#8217;t worry!. Terraform (hashicorp) themselves have done that job for you\u00a0 on their <a href=\"https:\/\/www.terraform.io\/intro\/vs\/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">website<\/a><\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<h2>Terraform <span style=\"color: #e81546;\">AWS<\/span> Example<\/h2>\n<p>While AWS or Amazon web services being a leader in the cloud industry with a market share 70 percentage.\u00a0 I thought it would be wiser to choose AWS as our cloud provider for this post.<\/p>\n<p>This post is about Terraform AWS and how to create AWS resources like EC2 instance and SecurityGroup with Terraform. Let us call it a Terraform AWS example.<\/p>\n<p>Terraform and AWS go hand in hand and terraform has a lot of resources and configurations that support the entire AWS Infrastructure management tasks like AWS EC2 instance creation, Security Group creation, Virtual Private Cloud (VPC) Setup,\u00a0 Serverless set up, etc.<\/p>\n<p>So let us go and do some farming in the AWS planet.<\/p>\n<p>&nbsp;<\/p>\n<h2>Authentication with <span style=\"color: #eb0c69;\">AWS<\/span><\/h2>\n<p>In order to connect to AWS. Terraform has to successfully authenticate. It is done with the help of Programmatic API Keys (Access Key and Secret.)<\/p>\n<p>Some Sample usage of these API Keys in a terraform configuration.<\/p>\n<pre class=\"highlight hcl\"><span class=\"n\">provider<\/span> <span class=\"s2\">\"aws\"<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"n\">region<\/span>     <span class=\"o\">=<\/span> <span class=\"s2\">\"us-west-2\"<\/span>\r\n  <span class=\"n\">access_key<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">\"my-access-key\"<\/span>\r\n  <span class=\"n\">secret_key<\/span> <span class=\"o\">=<\/span> <span class=\"s2\">\"my-secret-key\"<\/span>\r\n<span class=\"p\">}<\/span><\/pre>\n<p>So now, we should go and create these access and secret keys for your AWS account.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Setup\u00a0<span style=\"color: #e60b6e;\"> Programmatic Access<\/span><\/h2>\n<div>Login to AWS Console, In the services, go to IAM and perform the following steps<\/div>\n<div><\/div>\n<p><strong>Step1: Add new user and key in the UserName\u00a0\u00a0<\/strong><\/p>\n<details>\n<summary>Click to view the image<\/summary>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1.png\"><img class=\"alignnone size-full wp-image-3920\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1.png\" sizes=\"(max-width: 1055px) 100vw, 1055px\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1.png 1055w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1-300x150.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1-768x384.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1-1024x512.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_UserCreation_Screen1-840x420.png 840w\" alt=\"\" width=\"1055\" height=\"528\" \/><\/a><\/p>\n<\/details>\n<p><strong>Step2: Attach Existing Policies and Select Admin<\/strong><\/p>\n<details>\n<summary>Click to view the image<\/summary>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_User_Creation_Screen2.png\"><img class=\"alignnone size-full wp-image-3921\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_User_Creation_Screen2.png\" sizes=\"(max-width: 1032px) 100vw, 1032px\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_User_Creation_Screen2.png 1032w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_User_Creation_Screen2-300x110.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_User_Creation_Screen2-768x281.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/06\/AWS_User_Creation_Screen2-1024x375.png 1024w\" alt=\"\" width=\"1032\" height=\"378\" \/><\/a><\/p>\n<\/details>\n<p>Let the Values be Default Click Next till you see the following Screen<\/p>\n<p><strong>Step3: Completion and Download<\/strong><\/p>\n<details>\n<summary>Click to view the image<\/summary>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM.png\"><img class=\"size-full wp-image-3140\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM.png\" sizes=\"(max-width: 996px) 100vw, 996px\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM.png 996w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM-300x116.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM-768x297.png 768w\" alt=\"\" width=\"996\" height=\"385\" \/><\/a><\/p>\n<figure id=\"attachment_3140\" class=\"wp-caption alignleft\"><figcaption class=\"wp-caption-text\">API key creation Successful Message Banner<\/figcaption><\/figure>\n<p>&nbsp;<\/p>\n<\/details>\n<p>&nbsp;<\/p>\n<blockquote><p><strong>Note*:<\/strong> Once the Access Key ID and Secret Access Key is created you can download and save them somewhere safe and if you lost it you cannot recover (or) re-download it.\u00a0 You would have to create a new API key.<\/p>\n<p>The best practice is to keep changing the API Access Key and recreating it. The older your API keys are the prone they are to Malicious attacks. So you should keep updating the API key and should not use the Same API key for a long period of time.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p>As you have downloaded the API Access and Secret keys. You need to save it right so that you can use it in terraform.<\/p>\n<p>Though terraform accepts the Access Key and Secret Key hardcoded with in the configuration file. It is not recommended.<\/p>\n<p>Either you should save these Keys as Environment variables (or) save it as a AWS Config profile.<\/p>\n<p>&nbsp;<\/p>\n<h3><strong>As Environment Variable<\/strong><\/h3>\n<p>In your terminal, you just have run these commands with your Access and Secret key.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #333333; background: #f8f8f8;\">$ <span class=\"hljs-built_in\" style=\"color: #0086b3;\">export<\/span> AWS_ACCESS_KEY_ID=AK************IEVXQ\r\n$ <span class=\"hljs-built_in\" style=\"color: #0086b3;\">export<\/span> AWS_SECRET_ACCESS_KEY=gbaIbK*********************iwN0dGfS<\/pre>\n<h3><strong>\u00a0As an AWS config Profile<\/strong><\/h3>\n<p>In order to do this, The Simplest way is to download and setup <code>AWS CLI<\/code><\/p>\n<p>You can <a href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-cli-ec2\/#install-cli\">refer to this document<\/a> how to setup AWS CLI<\/p>\n<p>&nbsp;<\/p>\n<h2><strong><span style=\"color: #000000;\">Download<\/span> and <span style=\"color: #e60b6e;\">Install<\/span> Terraform CLI<\/strong><\/h2>\n<p>Terraform is a Single file binary which you can download and run it without any additional installation.<\/p>\n<p>To make this precise and Short I have not added the installation instruction of Terraform. You can find the instructions here\u00a0<a href=\"https:\/\/learn.hashicorp.com\/terraform\/getting-started\/install\" rel=\"noopener\">Installing Terraform CLI<\/a><\/p>\n<p>Now Let me proceed further with an assumption that you have installed the Terraform CLI.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Terraform <span style=\"color: #de1256;\">Configuration<\/span> file &#8211; A Quick intro<\/h2>\n<p>The input file for terraform is known as Terraform Configuration. Terraform configuration is written in a specific language named\u00a0\u00a0Hashicorp Configuration Language\u00a0and it can optionally be written in JSON\u00a0as well.<\/p>\n<p>Here is the sample Terraform Configuration file saved with <code>*.tf<\/code> extension<\/p>\n<p>The following file presumes that you are using the AWS Config profile. So it refers to the <strong>profile: default<\/strong>\u00a0for the authentication.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #333333; background: #f8f8f8;\">provider <span class=\"hljs-string\" style=\"color: #dd1144;\">\"aws\"<\/span> {\r\n  <span class=\"hljs-attr\">profile<\/span>    = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"default\"<\/span>\r\n  <span class=\"hljs-attr\">region<\/span>     = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"us-east-1\"<\/span>\r\n}\r\n\r\nresource <span class=\"hljs-string\" style=\"color: #dd1144;\">\"aws_instance\"<\/span> <span class=\"hljs-string\" style=\"color: #dd1144;\">\"example\"<\/span> {\r\n  <span class=\"hljs-attr\">ami<\/span>           = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"ami-2757f631\"<\/span>\r\n  <span class=\"hljs-attr\">instance_type<\/span> = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"t2.micro\"<\/span>\r\n}<\/pre>\n<p>In case if you are using the Environment variables method. You can remove the profile line alone and that should be it.<\/p>\n<p>Terraform configuration file would ideally have lot of elements known as <code>blocks<\/code> such as provider\u00a0, resource\u00a0etcetera.<\/p>\n<p>This is a Syntax of how Terraform Configuration file block\u00a0is formatted<\/p>\n<pre class=\"highlight hcl\"><span class=\"n\">resource<\/span> <span class=\"s2\">\"aws_vpc\"<\/span> <span class=\"s2\">\"main\"<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"n\">cidr_block<\/span> <span class=\"o\">=<\/span> <span class=\"n\">var<\/span><span class=\"p\">.<\/span><span class=\"nf\">base_cidr_block<\/span>\r\n<span class=\"p\">}<\/span>\r\n\r\n<span class=\"o\">&lt;<\/span><span class=\"no\">BLOCK<\/span> <span class=\"no\">TYPE<\/span><span class=\"o\">&gt;<\/span> <span class=\"s2\">\"&lt;BLOCK NAME&gt;\"<\/span> <span class=\"s2\">\"&lt;BLOCK LABEL&gt;\"<\/span> <span class=\"p\">{<\/span>\r\n  <span class=\"c1\"># Block body<\/span>\r\n  <span class=\"o\">&lt;<\/span><span class=\"no\">IDENTIFIER<\/span><span class=\"o\">&gt;<\/span> <span class=\"o\">=<\/span> <span class=\"o\">&lt;<\/span><span class=\"no\">EXPRESSION<\/span><span class=\"o\">&gt;<\/span> <span class=\"c1\"># Argument<\/span>\r\n<span class=\"p\">}<\/span><\/pre>\n<p>There are ample amount of <code>BLOCK_TYPE<\/code>\u00a0available in Terraform and the <code>resource<\/code>\u00a0is primary and all others are to support building that specified resource.<\/p>\n<blockquote><p>Some of the Terraform blocks (elements) and their purpose is given below<\/p>\n<ul>\n<li>providers &#8211; the provider name aws, google, azure etc<\/li>\n<li>resources &#8211; a specific resource with in the provide such as aws_instance for aws<\/li>\n<li>variable &#8211; to declare input variables<\/li>\n<li>output &#8211; to declare output variables which would be retained the Terraform state file<\/li>\n<li>local &#8211; to assign value to an expression, these are local temporary variables work with in a module<\/li>\n<li>module &#8211; A\u00a0<em>module<\/em>\u00a0is a container for multiple resources that are used together.<\/li>\n<li>data &#8211; To Collect data from the remote provider and save it as a data source<\/li>\n<\/ul>\n<\/blockquote>\n<p>&nbsp;<\/p>\n<h2>Create <span style=\"color: #de1256;\">EC2<\/span> instance with Terraform &#8211; Terraform EC2<\/h2>\n<p>As we have crossed all the sections of basic and prerequisites. We are now ready to move forward to the practical application of Terraform and we are going to create an EC2 instance with terraform.<\/p>\n<p>These are the list of steps we are going to perform<\/p>\n<ol>\n<li>Create a Directory and Download the following file and save it as <code>main.tf<\/code><\/li>\n<li>Execute the command <code>terraform init<\/code>\u00a0to initialize<\/li>\n<li>Execute the command <code>terraform plan<\/code>\u00a0to check what change would be made. ( Should always do it)<\/li>\n<li>If you are happy with the changes it is claiming to make, then execute <code>terraform apply<\/code>\u00a0to commit and start the build<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h3>Step1: Creating a Configuration file for Terraform AWS<\/h3>\n<p>Copy the following content and save it as <code>main.tf<\/code>\u00a0 and make sure that the directory has no other <code>*.tf<\/code>\u00a0files present, as terraform\u00a0would consider all the files ending with <strong>.tf<\/strong>\u00a0extension<\/p>\n<p>I have given some explanation before each block on the configuration to explain the purpose of the block.<\/p>\n<p>In an overview, This is what we are doing in this configuration file.<\/p>\n<ul>\n<li>A Variable block where we define all the resource names that we are going to be using within the Terraform configuration<\/li>\n<li>The second block is to tell Terraform to choose the right provider, in our case it is <code>aws<\/code>\u00a0and we are also defining the region in this block on which our resources should be created<\/li>\n<li>Creating a Security Group with <strong>inbound<\/strong>\u00a0and <strong>outbound<\/strong>\u00a0rules. We have two inbound rules and one outbound rule. we use <strong>lifecycle<\/strong>\u00a0block to tell terraform to create the replacement resources first before destroying the live ones. this way we reduce downtime<\/li>\n<li>Creating an EC2 instance, The instance type would be picked up from the <strong>variables<\/strong>\u00a0block and we give some meaningful <code>tags<\/code>\u00a0for management and future identification<\/li>\n<li>Once the EC2 instance created, we would get the public IP of the instance. We are saving it as an output variable. The output variables would be saved locally and can be viewed anytime in the future with <code>terraform output<\/code>\u00a0command<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h3>The Terraform AWS Example configuration file<\/h3>\n<p>Here is the Terraform configuration file or manifest to create EC2 instance.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span style=\"color: #68e8dd;\">variable<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"awsprops\"<\/span> {\r\n    type = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"map\"<\/span>\r\n    default = {\r\n    region = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"us-east-1\"<\/span>\r\n    vpc = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"vpc-5234832d\"<\/span>\r\n    ami = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"ami-0c1bea58988a989155\"<\/span>\r\n    itype = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"t2.micro\"<\/span>\r\n    subnet = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"subnet-81896c8e\"<\/span>\r\n    publicip = true\r\n    keyname = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"myseckey\"<\/span>\r\n    secgroupname = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"IAC-Sec-Group\"<\/span>\r\n  }\r\n}\r\n\r\n<span style=\"color: #68e8dd;\">provider<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"aws\"<\/span> {\r\n  region = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"region\"<\/span>)\r\n}\r\n\r\n<span style=\"color: #68e8dd;\">resource<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"aws_security_group\"<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"project-iac-sg\"<\/span> {\r\n  name = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"secgroupname\"<\/span>)\r\n  description = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"secgroupname\"<\/span>)\r\n  vpc_id = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"vpc\"<\/span>)\r\n\r\n  \/\/ To Allow SSH Transport\r\n  ingress {\r\n    from_port = 22\r\n    protocol = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"tcp\"<\/span>\r\n    to_port = 22\r\n    cidr_blocks = [<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"0.0.0.0\/0\"<\/span>]\r\n  }\r\n\r\n  \/\/ To Allow Port <span class=\"hljs-number\" style=\"color: #a5c261;\">80<\/span> Transport\r\n  ingress {\r\n    from_port = 80\r\n    protocol = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"\"<\/span>\r\n    to_port = 80\r\n    cidr_blocks = [<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"0.0.0.0\/0\"<\/span>]\r\n  }\r\n\r\n  egress {\r\n    from_port       = 0\r\n    to_port         = 0\r\n    protocol        = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"-1\"<\/span>\r\n    cidr_blocks     = [<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"0.0.0.0\/0\"<\/span>]\r\n  }\r\n\r\n  lifecycle {\r\n    create_before_destroy = true\r\n  }\r\n}\r\n\r\n\r\n<span style=\"color: #68e8dd;\">resource<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"aws_instance\"<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"project-iac\"<\/span> {\r\n  ami = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"ami\"<\/span>)\r\n  instance_type = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"itype\"<\/span>)\r\n  subnet_id = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"subnet\"<\/span>) #FFXsubnet2\r\n  associate_public_ip_address = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"publicip\"<\/span>)\r\n  key_name = lookup(var.awsprops, <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"keyname\"<\/span>)\r\n\r\n\r\n  vpc_security_group_ids = [\r\n    aws_security_group.project-iac-sg.id\r\n  ]\r\n  root_block_device {\r\n    delete_on_termination = true\r\n    iops = 150\r\n    volume_size = 50\r\n    volume_type = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"gp2\"<\/span>\r\n  }\r\n  tags = {\r\n    Name =<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"SERVER01\"<\/span>\r\n    Environment = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"DEV\"<\/span>\r\n    OS = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"UBUNTU\"<\/span>\r\n    Managed = <span class=\"hljs-attr\" style=\"color: #6d9cbe;\">\"IAC\"<\/span>\r\n  }\r\n\r\n  depends_on = [ aws_security_group.project-iac-sg ]\r\n}\r\n\r\n\r\n<span style=\"color: #68e8dd;\">output<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"ec2instance\"<\/span> {\r\n  value = aws_instance.project-iac.public_ip\r\n}\r\n<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step2: Initialize Terraform<\/h3>\n<p>Once we have saved the File in the newly created directory, we need to initialize\u00a0terraform<\/p>\n<p>If you have used <code>Git<\/code>\u00a0this is similar to <code>git init<\/code>\u00a0 where we set up some local repository and initialize<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #333333; background: #f8f8f8;\">\u279c  <span style=\"color: #003366;\"><strong>terraform init<\/strong><\/span>\r\n\r\nInitializing the backend...\r\n\r\nInitializing provider plugins...\r\n- Checking <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">for<\/span> available provider plugins...\r\n- Downloading plugin <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">for<\/span> provider <span class=\"hljs-string\" style=\"color: #dd1144;\">\"aws\"<\/span> (hashicorp\/aws) 2.44.0...\r\n\r\nThe following providers <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">do<\/span> not have any version constraints <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">in<\/span> configuration,\r\nso the latest version was installed.\r\n\r\nTo prevent automatic upgrades to new major versions that may contain breaking\r\nchanges, it is recommended to add version = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"...\"<\/span> constraints to the\r\ncorresponding provider blocks <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">in<\/span> configuration, with the constraint strings\r\nsuggested below.\r\n\r\n* provider.aws: version = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"~&gt; 2.44\"<\/span>\r\n\r\nTerraform has been successfully initialized!\r\n\r\nYou may now begin working with Terraform. Try running <span class=\"hljs-string\" style=\"color: #dd1144;\">\"terraform plan\"<\/span> to see\r\nany changes that are required <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">for<\/span> your infrastructure. All Terraform commands\r\nshould now work.\r\n\r\nIf you ever <span class=\"hljs-built_in\" style=\"color: #0086b3;\">set<\/span> or change modules or backend configuration <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">for<\/span> Terraform,\r\nrerun this <span class=\"hljs-built_in\" style=\"color: #0086b3;\">command<\/span> to reinitialize your working directory. If you forget, other\r\ncommands will detect it and remind you to <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">do<\/span> so <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">if<\/span> necessary.\r\n\r\n<\/pre>\n<p>Once the Initialization completed. You can execute the <code>terraform plan<\/code>\u00a0command to see what changes are going to be made.<\/p>\n<p>&nbsp;<\/p>\n<h3>Step3: Pre-Validate the change &#8211; A pilot run<\/h3>\n<p>Execute the <code>terraform plan<\/code>\u00a0command and it would present some detailed info on what changes are going to be made into your AWS infra.<\/p>\n<p>the <code>-out tfplan<\/code>\u00a0is to save the result given by plan so that we can refer it later and apply it as it is without any modification.<\/p>\n<p>It also guarantees that what we see in the planning phase would be applied when we go for committing it.<\/p>\n<details>\n<summary>Click to expand<\/summary>\n<p>&nbsp;<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #333333; background: #f8f8f8;\">\u279c<\/pre>\n<p><strong><span style=\"color: #003366;\">terraform plan -out tfplan<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #333333; background: #f8f8f8;\">Refreshing Terraform state <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">in<\/span>-memory prior to plan...\r\nThe refreshed state will be used to calculate this plan, but will not be\r\npersisted to <span class=\"hljs-built_in\" style=\"color: #0086b3;\">local<\/span> or remote state storage.\r\n\r\n\r\n------------------------------------------------------------------------\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  <span class=\"hljs-comment\" style=\"color: #999988; font-style: italic;\"># aws_instance.project-iac will be created<\/span>\r\n  + resource <span class=\"hljs-string\" style=\"color: #dd1144;\">\"aws_instance\"<\/span> <span class=\"hljs-string\" style=\"color: #dd1144;\">\"project-iac\"<\/span> {\r\n      + ami                          = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"ami-0c1beas670a989155\"<\/span>\r\n      + arn                          = (known after apply)\r\n      + associate_public_ip_address  = <span class=\"hljs-literal\" style=\"color: teal;\">true<\/span>\r\n      + availability_zone            = (known after apply)\r\n      + cpu_core_count               = (known after apply)\r\n      + cpu_threads_per_core         = (known after apply)\r\n      + get_password_data            = <span class=\"hljs-literal\" style=\"color: teal;\">false<\/span>\r\n      + host_id                      = (known after apply)\r\n      + id                           = (known after apply)\r\n      + instance_state               = (known after apply)\r\n      + instance_<span class=\"hljs-built_in\" style=\"color: #0086b3;\">type<\/span>                = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"t2.micro\"<\/span>\r\n      + ipv6_address_count           = (known after apply)\r\n      + ipv6_addresses               = (known after apply)\r\n      + key_name                     = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"mysecurekey\"<\/span>\r\n      + network_interface_id         = (known after apply)\r\n      + password_data                = (known after apply)\r\n      + placement_group              = (known after apply)\r\n      + primary_network_interface_id = (known after apply)\r\n      + private_dns                  = (known after apply)\r\n      + private_ip                   = (known after apply)\r\n      + public_dns                   = (known after apply)\r\n      + public_ip                    = (known after apply)\r\n      + security_groups              = (known after apply)\r\n      + <span class=\"hljs-built_in\" style=\"color: #0086b3;\">source<\/span>_dest_check            = <span class=\"hljs-literal\" style=\"color: teal;\">true<\/span>\r\n      + subnet_id                    = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"subnet-81b8c8e\"<\/span>\r\n      + tags                         = {\r\n          + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"Environment\"<\/span> = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"DEV\"<\/span>\r\n          + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"Managed\"<\/span>     = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"IAC\"<\/span>\r\n          + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"Name\"<\/span>        = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"SERVER01\"<\/span>\r\n          + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"OS\"<\/span>          = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"UBUNTU\"<\/span>\r\n        }\r\n      + tenancy                      = (known after apply)\r\n      + volume_tags                  = (known after apply)\r\n      + vpc_security_group_ids       = (known after apply)\r\n\r\n      + ebs_block_device {\r\n          + delete_on_termination = (known after apply)\r\n          + device_name           = (known after apply)\r\n          + encrypted             = (known after apply)\r\n          + iops                  = (known after apply)\r\n          + kms_key_id            = (known after apply)\r\n          + snapshot_id           = (known after apply)\r\n          + volume_id             = (known after apply)\r\n          + volume_size           = (known after apply)\r\n          + volume_<span class=\"hljs-built_in\" style=\"color: #0086b3;\">type<\/span>           = (known after apply)\r\n        }\r\n\r\n      + ephemeral_block_device {\r\n          + device_name  = (known after apply)\r\n          + no_device    = (known after apply)\r\n          + virtual_name = (known after apply)\r\n        }\r\n\r\n      + network_interface {\r\n          + delete_on_termination = (known after apply)\r\n          + device_index          = (known after apply)\r\n          + network_interface_id  = (known after apply)\r\n        }\r\n\r\n      + root_block_device {\r\n          + delete_on_termination = <span class=\"hljs-literal\" style=\"color: teal;\">true<\/span>\r\n          + encrypted             = (known after apply)\r\n          + iops                  = (known after apply)\r\n          + kms_key_id            = (known after apply)\r\n          + volume_id             = (known after apply)\r\n          + volume_size           = 50\r\n          + volume_<span class=\"hljs-built_in\" style=\"color: #0086b3;\">type<\/span>           = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"gp2\"<\/span>\r\n        }\r\n    }\r\n\r\n  <span class=\"hljs-comment\" style=\"color: #999988; font-style: italic;\"># aws_security_group.project-iac-sg will be created<\/span>\r\n  + resource <span class=\"hljs-string\" style=\"color: #dd1144;\">\"aws_security_group\"<\/span> <span class=\"hljs-string\" style=\"color: #dd1144;\">\"project-iac-sg\"<\/span> {\r\n      + arn                    = (known after apply)\r\n      + description            = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"IAC-Sec-Group\"<\/span>\r\n      + egress                 = [\r\n          + {\r\n              + cidr_blocks      = [\r\n                  + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"0.0.0.0\/0\"<\/span>,\r\n                ]\r\n              + description      = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"\"<\/span>\r\n              + from_port        = 0\r\n              + ipv6_cidr_blocks = []\r\n              + prefix_list_ids  = []\r\n              + protocol         = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"-1\"<\/span>\r\n              + security_groups  = []\r\n              + self             = <span class=\"hljs-literal\" style=\"color: teal;\">false<\/span>\r\n              + to_port          = 0\r\n            },\r\n        ]\r\n      + id                     = (known after apply)\r\n      + ingress                = [\r\n          + {\r\n              + cidr_blocks      = [\r\n                  + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"0.0.0.0\/0\"<\/span>,\r\n                ]\r\n              + description      = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"\"<\/span>\r\n              + from_port        = 22\r\n              + ipv6_cidr_blocks = []\r\n              + prefix_list_ids  = []\r\n              + protocol         = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"tcp\"<\/span>\r\n              + security_groups  = []\r\n              + self             = <span class=\"hljs-literal\" style=\"color: teal;\">false<\/span>\r\n              + to_port          = 22\r\n            },\r\n          + {\r\n              + cidr_blocks      = [\r\n                  + <span class=\"hljs-string\" style=\"color: #dd1144;\">\"0.0.0.0\/0\"<\/span>,\r\n                ]\r\n              + description      = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"\"<\/span>\r\n              + from_port        = 80\r\n              + ipv6_cidr_blocks = []\r\n              + prefix_list_ids  = []\r\n              + protocol         = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"\"<\/span>\r\n              + security_groups  = []\r\n              + self             = <span class=\"hljs-literal\" style=\"color: teal;\">false<\/span>\r\n              + to_port          = 80\r\n            },\r\n        ]\r\n      + name                   = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"IAC-Sec-Group\"<\/span>\r\n      + owner_id               = (known after apply)\r\n      + revoke_rules_on_delete = <span class=\"hljs-literal\" style=\"color: teal;\">false<\/span>\r\n      + vpc_id                 = <span class=\"hljs-string\" style=\"color: #dd1144;\">\"vpc-5629832d\"<\/span>\r\n    }\r\n<span style=\"color: #008080;\">\r\nPlan: 2 to add, 0 to change, 0 to destroy.<\/span>\r\n\r\n------------------------------------------------------------------------\r\n\r\nThis plan was saved to: tfplan\r\n\r\nTo perform exactly these actions, run the following command to apply:\r\n    terraform apply \"tfplan\"\r\n\r\n<\/pre>\n<\/details>\n<p>You can verify the outputs shown and what resources are going to be created or destroyed. Sometimes while doing a modification to the existing resources, Terraform would have to destroy the resource first and recreate it. in such cases, It would mention that it is going to destroy.<\/p>\n<p>You should always look for the <code>+<\/code> and <code>-<\/code>\u00a0signs on the <code>terraform plan<\/code>\u00a0output.<\/p>\n<p>Besides that, you should also monitor this line every time you run this command to make sure that no unintended result happen<\/p>\n<pre><span style=\"color: #000000;\">Plan: 2 to add, 0 to change, 0 to destroy.\r\n<\/span><\/pre>\n<p>&nbsp;<\/p>\n<h3>Step4:\u00a0 \u00a0Go ahead and Apply it with Terraform apply<\/h3>\n<p>When you execute the <code>terraform apply<\/code>\u00a0command the changes would be applied to the AWS Infra.<\/p>\n<p>If <code>terraform plan<\/code>\u00a0is a trial run and test.\u00a0 <code>terraform apply<\/code> is real-time and production.<\/p>\n<p>Since we have saved the plan output to a file named <code>tfplan<\/code>\u00a0to guarantee the changes. we need to use this file as an input while running the <code>apply<\/code>\u00a0command<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #333333; background: #f8f8f8;\">\u279c  <span style=\"color: #800000;\">terraform apply <span class=\"hljs-string\">\"tfplan\"<\/span><\/span>\r\naws_security_group.project-iac-sg: Creating...\r\naws_security_group.project-iac-sg: Still creating... [<span class=\"hljs-number\" style=\"color: teal;\">10<\/span>s elapsed]\r\naws_security_group.project-iac-sg: Creation complete after <span class=\"hljs-number\" style=\"color: teal;\">15<\/span>s [id=sg-<span class=\"hljs-number\" style=\"color: teal;\">0<\/span>fd7db3ea267c2527]\r\naws_instance.project-iac: Creating...\r\naws_instance.project-iac: Still creating... [<span class=\"hljs-number\" style=\"color: teal;\">10<\/span>s elapsed]\r\naws_instance.project-iac: Still creating... [<span class=\"hljs-number\" style=\"color: teal;\">20<\/span>s elapsed]\r\naws_instance.project-iac: Still creating... [<span class=\"hljs-number\" style=\"color: teal;\">30<\/span>s elapsed]\r\naws_instance.project-iac: Creation complete after <span class=\"hljs-number\" style=\"color: teal;\">31<\/span>s [id=i-<span class=\"hljs-number\" style=\"color: teal;\">0<\/span>d93c366fb2c4a3eb]\r\n\r\nApply complete! Resources: <span class=\"hljs-number\" style=\"color: teal;\">2<\/span> added, <span class=\"hljs-number\" style=\"color: teal;\">0<\/span> changed, <span class=\"hljs-number\" style=\"color: teal;\">0<\/span> destroyed.\r\n\r\nThe <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">state<\/span> of your infrastructure has been saved <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">to<\/span> the path\r\nbelow. This <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">state<\/span> is required <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">to<\/span> modify and destroy your\r\ninfrastructure, so <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">keep<\/span> it safe. To inspect the complete <span class=\"hljs-keyword\" style=\"color: #333333; font-weight: bold;\">state<\/span>\r\nuse the `terraform show` command.\r\n\r\nState path: terraform.tfstate\r\n\r\nOutputs:\r\n\r\nec2instance = <span class=\"hljs-number\" style=\"color: teal;\">18.207<\/span>.<span class=\"hljs-number\" style=\"color: teal;\">239.217<\/span><\/pre>\n<p>From the preceding output, you can see the instance creation took only 31 seconds and it completed and gave us the <code>public ip<\/code>\u00a0as an output<\/p>\n<p>Whenever we want this IP, we can come to this directory and execute <code>terraform output<\/code>\u00a0to get it.<\/p>\n<p>Refer the following snapshot where I have successfully <code>SSHed<\/code>\u00a0to the server using\u00a0 the <code>public IP<\/code><\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-13-at-7.48.24-PM.png\"><img class=\"alignnone size-full wp-image-4717\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-13-at-7.48.24-PM.png\" alt=\"\" width=\"1948\" height=\"2100\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-13-at-7.48.24-PM.png 1948w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-13-at-7.48.24-PM-278x300.png 278w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-13-at-7.48.24-PM-768x828.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-13-at-7.48.24-PM-950x1024.png 950w\" sizes=\"(max-width: 1948px) 100vw, 1948px\" \/><\/a><\/p>\n<p>So we have Successfully created an EC2 instance and a Security Group and logged into the Server.<\/p>\n<p>Since this is a test instance, I want to destroy the resources I have created and I can do it by executing <code>terraform destroy<\/code>\u00a0command.<\/p>\n<p>Hope this article helps you understand, How Terraform AWS or Terraform EC2 instance creation works in real-time.<\/p>\n<p>&nbsp;<\/p>\n<h2>How to Create <span style=\"color: #e31966;\">EC2 instance with user_data<\/span> &#8211; Custom Startup Script<\/h2>\n<p>So far we have seen all the basics of Terraform and how to create our first EC2 instance with Terraform.<\/p>\n<p>In real time, we might need more than just creating a single instance. we might want to run some custom startup shell scripts and do some installations etc.<\/p>\n<p>In such cases, we can use EC2 <code>user_data<\/code> feature and define a set of commands or scripts that needs to be executed during the server initialization.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\">we have a dedicated article<\/a> that talks about this in detail. Please read the same <a href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\">here<\/a><\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"UqwWQiMqDg\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/\">Terraform AWS EC2 user_data example &#8211; aws_instance| Devops Junction<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Terraform AWS EC2 user_data example &#8211; aws_instance| Devops Junction&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-ec2-user_data-example\/embed\/#?secret=UqwWQiMqDg\" data-secret=\"UqwWQiMqDg\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<div class=\"c-message_actions__group\" role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\"><\/div>\n<div role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\"><\/div>\n<div role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\">\n<h2>How to Create Multiple <span style=\"color: #e31966;\">EC2 instances with different Configuration<\/span><\/h2>\n<p>Now you have learnt how to create EC2 instance with Terraform and with <code>user_data<\/code> as well.<\/p>\n<p>In real-time use cases you would not be created just once EC2 instance but many at once.<\/p>\n<p>To address the same I have written an article to cover how to create multiple Ec2 instances with different instance types and configuration<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"igqvB1FSgW\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/\">Terraform Create Multiple EC2 with different Configs &#8211; for_each and count together<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Terraform Create Multiple EC2 with different Configs &#8211; for_each and count together&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-create-multiple-ec2-different-config\/embed\/#?secret=igqvB1FSgW\" data-secret=\"igqvB1FSgW\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<\/div>\n<div role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\"><\/div>\n<div role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\"><\/div>\n<h2 role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\">Our Other Terraform Articles<\/h2>\n<p>We have various articles on Terraform that covers basic to advanced topics of Terraform.<\/p>\n<p>If you in the learning path. <a href=\"https:\/\/www.middlewareinventory.com\/blog\/category\/terraform\/\">please do take a look by following this link<\/a><\/p>\n<p>&nbsp;<\/p>\n<div role=\"group\" aria-label=\"Message shortcuts\" data-qa=\"message-actions\"><\/div>\n<h2>Further reads<\/h2>\n<p>If you would like to give a chance to Terraform and want to learn all the bits and pieces of it. Read this book and I highly recommend it<\/p>\n<p>Click anywhere on the image to buy it on <a href=\"https:\/\/www.amazon.in\/gp\/product\/1492046906\/ref=as_li_tl?ie=UTF8&amp;camp=3638&amp;creative=24630&amp;creativeASIN=1492046906&amp;linkCode=as2&amp;tag=saravak-21&amp;linkId=8f2214a0bbd598ee035cee0bd9be0366\">amazon<\/a>.<\/p>\n<figure style=\"width: 191px\" class=\"wp-caption alignnone\"><a href=\"https:\/\/www.amazon.in\/gp\/product\/1492046906\/ref=as_li_tl?ie=UTF8&amp;camp=3638&amp;creative=24630&amp;creativeASIN=1492046906&amp;linkCode=as2&amp;tag=saravak-21&amp;linkId=8f2214a0bbd598ee035cee0bd9be0366\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"\/\/ws-in.amazon-adsystem.com\/widgets\/q?_encoding=UTF8&amp;MarketPlace=IN&amp;ASIN=1492046906&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=saravak-21\" alt=\"\" width=\"191\" height=\"250\" border=\"0\" \/><\/a><figcaption class=\"wp-caption-text\">Terraform UP &amp; Running Second Edition<\/figcaption><\/figure>\n<p>&nbsp;<\/p>\n<p>Hope this article is helpful, If you have any feedback or issues please let me know on the comments section.<\/p>\n<p>Rate this article [ratings]<\/p>\n<p>Cheers<br \/>\nSarav<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577338\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"4709\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577338\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577338\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Terraform, An outstanding and innovative product from hashicorp and it is a leader in Infrastructure as Code tools Segment.\u00a0 Before I go any further, I think I should set the context. In this article, we are going to learn how to use Terraform to create AWS EC2 instance and create[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":4741,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[454,233],"tags":[386,384,235,385,383,387],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Terraform AWS Example - Create EC2 instance with Terraform | DevOps Junction<\/title>\n<meta name=\"description\" content=\"Terraform AWS Example. Create EC2 instance with Terraform. Terraform AWS example on how to create AWS resources with Terraform. Create a Security Group using Terraform. Infrastructure as Code Example. Terraform aws Configuration file example and terraform plan and terraform apply command real-time usage and examples.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Terraform AWS Example - Create EC2 instance with Terraform | DevOps Junction\" \/>\n<meta property=\"og:description\" content=\"Terraform AWS Example. Create EC2 instance with Terraform. Terraform AWS example on how to create AWS resources with Terraform. Create a Security Group using Terraform. Infrastructure as Code Example. Terraform aws Configuration file example and terraform plan and terraform apply command real-time usage and examples.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2020-01-14T00:00:38+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:18:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/TerraformAWS-1.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1747\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/TerraformAWS-1.png\",\"width\":1747,\"height\":1240},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/\",\"name\":\"Terraform AWS Example - Create EC2 instance with Terraform | DevOps Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#primaryimage\"},\"datePublished\":\"2020-01-14T00:00:38+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"description\":\"Terraform AWS Example. Create EC2 instance with Terraform. Terraform AWS example on how to create AWS resources with Terraform. Create a Security Group using Terraform. Infrastructure as Code Example. Terraform aws Configuration file example and terraform plan and terraform apply command real-time usage and examples.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Terraform AWS Example &#8211; Create EC2 instance with Terraform\",\"datePublished\":\"2020-01-14T00:00:38+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#primaryimage\"},\"keywords\":\"Terraform Apply example,Terraform AWS,Terraform AWS example,Terraform config file example,Terraform example,Terraform Plan example\",\"articleSection\":\"DevOps_Beginner,Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-aws-example-ec2\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4709"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=4709"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4709\/revisions"}],"predecessor-version":[{"id":8248,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4709\/revisions\/8248"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/4741"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=4709"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=4709"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=4709"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}