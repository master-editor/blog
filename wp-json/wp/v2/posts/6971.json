{"id":6971,"date":"2021-05-29T20:40:47","date_gmt":"2021-05-29T15:10:47","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=6971"},"modified":"2022-11-27T23:19:42","modified_gmt":"2022-11-27T17:49:42","slug":"aws-boto-script-list-all-elb-with-targetgroup-and-instance-health","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/","title":{"rendered":"AWS &#8211; List All ELB, NLB and CLB with Target and Target Groups  | Python Boto"},"content":{"rendered":"<p>In this article, we are presenting an AWS\u00a0 Boto Python script that lists all load balancers and their Target group along with the Instances associated and their health check status<\/p>\n<p>This script helps you in various ways<\/p>\n<ul>\n<li>Get the list of load balancers and their target group and instance mapping along with their health<\/li>\n<li>Find out the load balancers with no backend target group or listeners which can simply be removed for cost saving<\/li>\n<li>Find how many Elastic Load balancer or Target groups, a Specific instance is associated with and receive traffic from<\/li>\n<li>Instance to ELB Mapping auditing &#8211; helping to remove unwanted instances<\/li>\n<li>A Health Check and Monitoring script for your entire Elastic Load Balancers and Target Groups, and Instances.<\/li>\n<li>This script helps you to find Unused Elastic Load Balancers ALBs and ELBs.<\/li>\n<\/ul>\n<p>As you know there are three major types of load balances in AWS ELB. such as<\/p>\n<ul>\n<li>Classic Load Balancer<\/li>\n<li>Application Load Balancer<\/li>\n<li>Network Load Balancer<\/li>\n<\/ul>\n<p>While Classic Load Balancer and Application Load Balancer are widely used and they differ in the way they are configured\/designed.<\/p>\n<p>I had to create two scripts one for each of them.<\/p>\n<ul>\n<li><strong>clb-list.py<\/strong> &#8211; For Classic Load Balancer<\/li>\n<li><strong>alb-list.py<\/strong> &#8211; For Application Load Balancer &amp; Network Load Balancer<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<blockquote><p>\u00a0 We have update our scripts with JSON output format. Check it out.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM.png\"><img class=\"alignnone size-full wp-image-6974\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM.png\" alt=\"AWS ELB Boto\" width=\"2290\" height=\"1348\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM.png 2290w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM-300x177.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM-1024x603.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM-768x452.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM-1536x904.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/Screenshot-2021-05-29-at-8.39.01-PM-2048x1206.png 2048w\" sizes=\"(max-width: 2290px) 100vw, 2290px\" \/><\/a><\/p>\n<h2>Prerequisites<\/h2>\n<ul>\n<li>AWS CLI must be installed and configured with API Key and Secret<\/li>\n<li>Named Profile (Optional) or use <code>default<\/code> as profile name in the script<\/li>\n<li>Boto3 must be installed<\/li>\n<\/ul>\n<p>If you are new to AWS CLI <a href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-cli-ec2\/\" target=\"_blank\" rel=\"noopener noreferrer\">refer to our previous article<\/a> before proceeding<\/p>\n<p>Wondering what is <code>Named Profile<\/code> in AWS, <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-configure-profiles.html\" target=\"_blank\" rel=\"noopener noreferrer\">refer to this article from AWS here<\/a><\/p>\n<p>Besides that, you must have proper IAM permissions for you to be able to list these resources and configurations. You can try with Administrator Access IAM role if possible.<\/p>\n<p>You can simply install boto3 by executing <code>pip install boto3<\/code> Refer to <a href=\"https:\/\/pypi.org\/project\/boto3\/\">this article for more details<\/a><\/p>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>To List <span style=\"color: #eb2886;\">Classic Load Balancer<\/span> Configuration and Instances<\/h2>\n<p>This is a <code>named profile<\/code> based script where I have used <code>prod<\/code> as my profile name, you can refer to the previous article and use named profiles for managing multiple AWS accounts.<\/p>\n<p>Update the script <code>profile=default<\/code> instead of PROD, If you are <strong>not<\/strong> using Named Profile,<\/p>\n<p>For the Named Profile setup, you have to update this <code>profile<\/code> variable anyway with your profile name before executing.<\/p>\n<p>Also the <code>region_name<\/code> must be updated in both cases.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>clb-list.py<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">import boto3\r\nimport pprint\r\nregion_name = \"us-east-1\"\r\nprofile = \"prod\"\r\nsession = boto3.session.Session(profile_name=profile)\r\nelb = session.client('elb')\r\nec2 = session.client('ec2')\r\n\r\n\r\ndef getinstancename(instanceid):\r\n    instances=ec2.describe_instances(Filters=[\r\n        {\r\n            'Name': 'instance-id',\r\n            'Values': [\r\n                instanceid\r\n            ]\r\n        },\r\n    ],)\r\n\r\n    resultset = {}    \r\n    for instance in instances[\"Reservations\"]:\r\n        for inst in instance[\"Instances\"]:\r\n            resultset[\"State\"]=inst[\"State\"][\"Name\"]    \r\n            for tag in inst[\"Tags\"]:\r\n                if tag['Key'] == 'Name':\r\n                    resultset[\"Name\"]=tag['Value']\r\n    # print (resultset)  \r\n    return resultset\r\n             \r\n\r\ndef getinstancehealth(lbname,instanceid):\r\n    instancestate=elb.describe_instance_health(\r\n            LoadBalancerName=lbname,\r\n            Instances = [{\r\n                'InstanceId' : instanceid\r\n            }]\r\n            )\r\n    return instancestate['InstanceStates'][0]['State']\r\n\r\nlbs = elb.describe_load_balancers(PageSize=400)\r\n\r\nfor lb in lbs[\"LoadBalancerDescriptions\"]:\r\n    print(\"\\n\"*2)\r\n    print (\"-\"*6)\r\n    print(\"Name:\",lb[\"LoadBalancerName\"])\r\n    print(\"HealthCheck:\",lb[\"HealthCheck\"])\r\n    print(\"Instance Info:\")\r\n    if len(lb[\"Instances\"]) &gt; 0:\r\n        for instance in lb[\"Instances\"]:\r\n            instance.update(getinstancename(instance[\"InstanceId\"]))\r\n            instance['Health']=getinstancehealth(lb[\"LoadBalancerName\"], instance[\"InstanceId\"])\r\n            print (instance)\r\n    else:\r\n        print(\"Instance List is Empty, Or no Instance is mapped\")\r\n<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p><strong>Sample Output<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">------\r\nName: test-elb\r\nHealthCheck: {'Target': 'HTTP:80\/index.html', 'Interval': 30, 'Timeout': 5, 'UnhealthyThreshold': 2, 'HealthyThreshold': 10}\r\nInstance Info:\r\n{'InstanceId': 'i-somestring', 'State': 'running', 'Name': 'test.gritfy.io', 'Health': 'InService'}\r\n\r\n\r\n\r\n------\r\nName: service-elb\r\nHealthCheck: {'Target': 'HTTP:80\/index.html', 'Interval': 30, 'Timeout': 5, 'UnhealthyThreshold': 2, 'HealthyThreshold': 5}\r\nInstance Info:\r\n{'InstanceId': 'i-somestring', 'Health': 'OutOfService'}\r\n{'InstanceId': 'i-somestring', 'State': 'running', 'Name': 'service.gritfy.io', 'Health': 'InService'}\r\n\r\n\r\n\r\n------\r\nName: beta-elb\r\nHealthCheck: {'Target': 'HTTP:80\/beta\/health\/', 'Interval': 10, 'Timeout': 5, 'UnhealthyThreshold': 2, 'HealthyThreshold': 2}\r\nInstance Info:\r\nInstance List is Empty, Or not Instance is mapped<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>To List <span style=\"color: #eb2886;\">Application Load Balancer<\/span> Configuration and Instances<\/h2>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">import boto3\r\nimport pprint\r\nregion_name = \"us-east-1\"\r\nprofile = \"prod\"\r\nsession = boto3.session.Session(profile_name=profile)\r\nelb = session.client('elbv2')\r\nec2 = session.client('ec2')\r\n\r\n\r\ndef gettargetgroups(arn):\r\n    tgs=elb.describe_target_groups(LoadBalancerArn=arn)\r\n    tgstring=[]\r\n    for tg in tgs[\"TargetGroups\"]:\r\n        tgstring.append(tg[\"TargetGroupName\"])\r\n    return tgstring\r\n\r\ndef gettargetgrouparns(arn):\r\n    tgs=elb.describe_target_groups(LoadBalancerArn=arn)\r\n    tgarns=[]\r\n    for tg in tgs[\"TargetGroups\"]:\r\n        tgarns.append(tg[\"TargetGroupArn\"])\r\n    return tgarns\r\n\r\ndef getinstancename(instanceid):\r\n    instances=ec2.describe_instances(Filters=[\r\n        {\r\n            'Name': 'instance-id',\r\n            'Values': [\r\n                instanceid\r\n            ]\r\n        },\r\n    ],)\r\n    for instance in instances[\"Reservations\"]:\r\n        for inst in instance[\"Instances\"]:\r\n            for tag in inst[\"Tags\"]:\r\n                if tag['Key'] == 'Name':\r\n                    return (tag['Value'])\r\n\r\n    \r\ndef gettargethealth(arn):\r\n    inss=elb.describe_target_health(TargetGroupArn=arn)\r\n    instanceids=[]\r\n    for ins in inss[\"TargetHealthDescriptions\"]:\r\n        ins[\"Name\"]=getinstancename(ins['Target']['Id'])\r\n        instanceids.append(ins['Target']['Id'])\r\n        print (ins)\r\n\r\n\r\nlbs = elb.describe_load_balancers(PageSize=400)\r\n\r\n\r\nfor lb in lbs[\"LoadBalancers\"]:\r\n    print(\"\\n\"*2)\r\n    print (\"-\"*6)\r\n    print(\"Name:\",lb[\"LoadBalancerName\"])\r\n    print(\"Type:\",lb[\"Type\"])\r\n    print(\"TargetGroups:\",str(gettargetgroups(lb[\"LoadBalancerArn\"])))\r\n\r\n    for tgs in gettargetgrouparns(lb[\"LoadBalancerArn\"]):\r\n        gettargethealth(tgs)\r\n    \r\n\r\n<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p><strong>Sample output<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">------\r\nName: iaas-elb\r\nType: application\r\nTargetGroups: ['iaas-tg']\r\n{'Target': {'Id': 'i-somestring', 'Port': 80}, 'HealthCheckPort': '80', 'TargetHealth': {'State': 'healthy'}, 'Name': 'iaas01.gritfy.io'}\r\n{'Target': {'Id': 'i-somestring', 'Port': 80}, 'HealthCheckPort': '80', 'TargetHealth': {'State': 'healthy'}, 'Name': 'iaas02.gritfy.io'}\r\n\r\n\r\n\r\n------\r\nName: saas-elb\r\nType: application\r\nTargetGroups: ['saas-tg']\r\n{'Target': {'Id': 'i-somestring', 'Port': 80}, 'HealthCheckPort': '80', 'TargetHealth': {'State': 'healthy'}, 'Name': 'saas.gritfy.io'}\r\n\r\n\r\n\r\n------\r\nName: app-saas\r\nType: application\r\nTargetGroups: ['app-saas-TG']\r\n{'Target': {'Id': 'i-somestring', 'Port': 80}, 'HealthCheckPort': '80', 'TargetHealth': {'State': 'unused', 'Reason': 'Target.InvalidState', 'Description': 'Target is in the stopped state'}, 'Name': None}\r\n\r\n\r\n\r\n------\r\nName: service-elb\r\nType: application\r\nTargetGroups: []<\/pre>\n<p>&nbsp;<\/p>\n<h2><strong>Updated script with <span style=\"color: #eb1750;\">JSON Output<\/span> format<\/strong><\/h2>\n<p>The previous scripts you have seen return the response in simple Text format.<\/p>\n<p>It served the purpose. but now for further customisations and advancement, we have updated the script output to JSON format.<\/p>\n<p>Now as a new version, I have updated the code to return the response in JSON format<\/p>\n<p>here are the updated scripts<\/p>\n<p>&nbsp;<\/p>\n<h3>List Application Load Balancer and Network Load Balancer with Target Group<\/h3>\n<p>This python script is designed to accept the <strong>region<\/strong> and the <strong>profile<\/strong> <strong>name<\/strong> as a startup argument<\/p>\n<p>Copy the following code and save it as <code>clb-list-json.py<\/code><\/p>\n<p>Here is the command example you can use. make sure to update the profile name and the region_name.<\/p>\n<p>If you do not have any named profile on AWS CLI. just type default.<\/p>\n<pre>python3 alb-list-json.py us-east-1 default<\/pre>\n<p>here is the source code<\/p>\n<p>&nbsp;<\/p>\n<p><strong>alb-list-json.py<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">import boto3\r\nimport pprint\r\nimport sys\r\nimport json\r\n\r\ndef gettargetgroups(arn):\r\n    tgs=elb.describe_target_groups(LoadBalancerArn=arn)\r\n    tgstring=[]\r\n    for tg in tgs[\"TargetGroups\"]:\r\n        tgstring.append(tg[\"TargetGroupName\"])\r\n    return tgstring\r\n\r\ndef gettargetgrouparns(arn):\r\n    tgs=elb.describe_target_groups(LoadBalancerArn=arn)\r\n    tgarns=[]\r\n    for tg in tgs[\"TargetGroups\"]:\r\n        tgarns.append(tg[\"TargetGroupArn\"])\r\n    return tgarns\r\n\r\ndef getinstancename(instanceid):\r\n    instances=ec2.describe_instances(Filters=[\r\n        {\r\n            'Name': 'instance-id',\r\n            'Values': [\r\n                instanceid\r\n            ]\r\n        },\r\n    ],)\r\n    for instance in instances[\"Reservations\"]:\r\n        for inst in instance[\"Instances\"]:\r\n            for tag in inst[\"Tags\"]:\r\n                if tag['Key'] == 'Name':\r\n                    return (tag['Value'])\r\n\r\n    \r\ndef gettargethealth(arn):\r\n    # print(\"arn\",arn)\r\n    inss=elb.describe_target_health(TargetGroupArn=arn)\r\n    instanceids=[]\r\n    result=[]\r\n    for ins in inss[\"TargetHealthDescriptions\"]:\r\n        ins[\"Name\"]=getinstancename(ins['Target']['Id'])\r\n        instanceids.append(ins['Target']['Id'])\r\n        result.append(ins)\r\n    return result\r\n\r\ndef describelbs():\r\n    lbs = elb.describe_load_balancers(PageSize=400)\r\n    for lb in lbs[\"LoadBalancers\"]:\r\n        lbjson={}\r\n        lbjson['Name']=lb[\"LoadBalancerName\"]\r\n        lbjson['Type']=lb[\"Type\"]\r\n        lbjson['TG']=gettargetgrouparns(lb[\"LoadBalancerArn\"])\r\n        lbjson['TGData']=[]\r\n\r\n        TGLIST=[]\r\n        if len(lbjson[\"TG\"]) &gt; 0:\r\n            for tgs in lbjson['TG']:\r\n                TGD={}\r\n                TGD['Name']=tgs.split(\"\/\")[1]\r\n                tgh=gettargethealth(tgs)\r\n                if len(tgh) &gt; 0:\r\n                    TGD['Instances']=tgh\r\n                else:\r\n                    TGD['Instances']=\"\"\r\n                TGLIST.append(TGD)\r\n                \r\n            lbjson['TGData'] = TGLIST\r\n        \r\n        print(\"\\n\",json.dumps(lbjson, indent=4, sort_keys=True))        \r\n\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) &lt; 3:\r\n        print(\" &#8211; Region Name and the Profile name is mandatory &#8211; \")\r\n        print(\" Syntax: python3 clb-list-json.py us-east-1 default\")\r\n        exit()\r\n    region_name = sys.argv[1]\r\n    profile = sys.argv[2]\r\n    session = boto3.session.Session(profile_name=profile)\r\n    elb = session.client('elbv2')\r\n    ec2 = session.client('ec2')\r\n    describelbs()<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3><strong>List Classic Load Balancer with Target instances<\/strong><\/h3>\n<p>This python script is designed to accept the region and the profile name as a startup argument<\/p>\n<p>Copy the following code and save it as <code>clb-list-json.py<\/code><\/p>\n<p>Here is the command example you can use. make sure to update the profile name and the region_name<\/p>\n<pre>python3 clb-list-json.py us-east-1 default<\/pre>\n<p>&nbsp;<\/p>\n<p><strong>clb-list-json.py<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">import boto3\r\nimport pprint\r\nimport json\r\nimport sys\r\n\r\n\r\ndef getinstancename(instanceid):\r\n    instances=ec2.describe_instances(Filters=[\r\n        {\r\n            'Name': 'instance-id',\r\n            'Values': [\r\n                instanceid\r\n            ]\r\n        },\r\n    ],)\r\n\r\n    resultset = {}    \r\n    for instance in instances[\"Reservations\"]:\r\n        for inst in instance[\"Instances\"]:\r\n            resultset[\"State\"]=inst[\"State\"][\"Name\"]    \r\n            for tag in inst[\"Tags\"]:\r\n                if tag['Key'] == 'Name':\r\n                    resultset[\"Name\"]=tag['Value']\r\n    # print (resultset)  \r\n    return resultset\r\n             \r\n\r\ndef getinstancehealth(lbname,instanceid):\r\n    instancestate=elb.describe_instance_health(\r\n            LoadBalancerName=lbname,\r\n            Instances = [{\r\n                'InstanceId' : instanceid\r\n            }]\r\n            )\r\n    \r\n    return instancestate['InstanceStates'][0]['State']\r\n\r\ndef describelbs():\r\n    \r\n    lbs = elb.describe_load_balancers(PageSize=400)\r\n\r\n    for lb in lbs[\"LoadBalancerDescriptions\"]:\r\n        lbjson={}\r\n        lbjson['Name']=lb[\"LoadBalancerName\"]\r\n        lbjson['HealthCheck']=lb[\"HealthCheck\"]\r\n        lbjson['Instances']=[]\r\n\r\n        if len(lb[\"Instances\"]) &gt; 0:\r\n            InstanceList=[]\r\n            for instance in lb[\"Instances\"]:\r\n                instance.update(getinstancename(instance[\"InstanceId\"]))\r\n                instance['Health']=getinstancehealth(lb[\"LoadBalancerName\"], instance[\"InstanceId\"])\r\n                InstanceList.append(instance)\r\n            \r\n            lbjson['Instances']=InstanceList\r\n\r\n        print(\"\\n\",json.dumps(lbjson, indent=4, sort_keys=True))        \r\n    \r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) &lt; 3:\r\n        print(\" &#8211; Region Name and the Profile name is mandatory &#8211; \")\r\n        print(\" Syntax: python3 clb-list-json.py us-east-1 default\")\r\n        exit()\r\n    region_name = sys.argv[1]\r\n    profile = sys.argv[2]\r\n    print(\"profilename selected:\",profile)\r\n    print(\"regionname selected: \",region_name)\r\n    session = boto3.session.Session(profile_name=profile)\r\n    elb = session.client('elb')\r\n    ec2 = session.client('ec2')\r\n    describelbs()<\/pre>\n<p>&nbsp;<\/p>\n<p>Here is the <strong>output<\/strong> as JSON while I have run the script on my end<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">\u26a1 \u21d2 python3 clb-list-json.py us-east-1 prod\r\n{\r\n  \"HealthCheck\": {\r\n    \"HealthyThreshold\": 10,\r\n    \"Interval\": 30,\r\n    \"Target\": \"HTTP:80\/index.html\",\r\n    \"Timeout\": 5,\r\n    \"UnhealthyThreshold\": 2\r\n  },\r\n  \"Instances\": [\r\n    {\r\n      \"Health\": \"InService\",\r\n      \"InstanceId\": \"i-06e3361ac9fe29d5a\",\r\n      \"Name\": \"test-01.gritfy.io-UB20\",\r\n      \"State\": \"running\"\r\n    },\r\n    {\r\n        \"Health\": \"InService\",\r\n        \"InstanceId\": \"i-06e3361ac9fe29d5a\",\r\n        \"Name\": \"push-01.gritfy.io-UB20\",\r\n        \"State\": \"running\"\r\n    }\r\n  ],\r\n  \"Name\": \"gritfy-elb\"\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2><strong>Github repo<\/strong><\/h2>\n<p>That&#8217;s the Github link you can Star and follow for further updates.<\/p>\n<p><a href=\"https:\/\/github.com\/AKSarav\/BotoScripts\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/github.com\/AKSarav\/BotoScripts<\/a><\/p>\n<p>&nbsp;<\/p>\n<h2><strong>List ALB and Target Groups as a Diagram\u00a0<\/strong><\/h2>\n<p>I have upgraded this script to the next level and now you can list your Application and Classic Load Balancers and their associated targets and target groups as a Diagram<\/p>\n<p>Yes. I have added the python Diagram module to this existing code and made it possible.<\/p>\n<p>you can create diagrams of all your Load Balancer in AWS using this<\/p>\n<p>Here is the a glimpse of what it can do.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg\"><img class=\"post-img alignnone wp-image-8980 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg\" alt=\"AWS ELB flowchart\" width=\"2560\" height=\"1440\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg 2560w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-300x169.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-1024x576.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-768x432.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-1536x864.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-2048x1152.jpg 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-1080x608.jpg 1080w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" \/><\/a><\/p>\n<p>I have written an exclusive article on the same with the source code attached. Hope you might like it.<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"j0kHve84XI\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/\">Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/embed\/#?secret=j0kHve84XI\" data-secret=\"j0kHve84XI\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>Hope this AWS Boto script helps you with your Administration and AWS Management.\u00a0 you can feel free to contribute and upgrade this script<\/p>\n<p>You can contribute to DevopsJunction by submitting an Article or the creative Devops work that you would like to share with the world.<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577898\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"6971\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577898\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577898\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>In this article, we are presenting an AWS\u00a0 Boto Python script that lists all load balancers and their Target group along with the Instances associated and their health check status This script helps you in various ways Get the list of load balancers and their target group and instance mapping[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":8976,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[234,426],"tags":[439],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>AWS - List All ELB, NLB and CLB with Target and Target Groups | Python Boto<\/title>\n<meta name=\"description\" content=\"AWS Boto script to get a list of ELB(ALB\/CLB) and Target group configuration along with Instance Health . AWS Boto ELB monitoring script. Find Unused Load Balancers ALB\/ELB in AWS with Boto.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"AWS - List All ELB, NLB and CLB with Target and Target Groups | Python Boto\" \/>\n<meta property=\"og:description\" content=\"AWS Boto script to get a list of ELB(ALB\/CLB) and Target group configuration along with Instance Health . AWS Boto ELB monitoring script. Find Unused Load Balancers ALB\/ELB in AWS with Boto.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2021-05-29T15:10:47+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-27T17:49:42+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/mwi-4.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/05\/mwi-4.png\",\"width\":1748,\"height\":1240,\"caption\":\"AWS ELB List boto\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/\",\"name\":\"AWS - List All ELB, NLB and CLB with Target and Target Groups | Python Boto\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#primaryimage\"},\"datePublished\":\"2021-05-29T15:10:47+00:00\",\"dateModified\":\"2022-11-27T17:49:42+00:00\",\"description\":\"AWS Boto script to get a list of ELB(ALB\/CLB) and Target group configuration along with Instance Health . AWS Boto ELB monitoring script. Find Unused Load Balancers ALB\/ELB in AWS with Boto.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"AWS &#8211; List All ELB, NLB and CLB with Target and Target Groups | Python Boto\",\"datePublished\":\"2021-05-29T15:10:47+00:00\",\"dateModified\":\"2022-11-27T17:49:42+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#primaryimage\"},\"keywords\":\"Find Unused ALBs AWS\",\"articleSection\":\"AWS,Boto\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/6971"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=6971"}],"version-history":[{"count":6,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/6971\/revisions"}],"predecessor-version":[{"id":9378,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/6971\/revisions\/9378"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/8976"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=6971"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=6971"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=6971"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}