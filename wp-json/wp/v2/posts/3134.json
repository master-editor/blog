{"id":3134,"date":"2019-03-31T02:40:16","date_gmt":"2019-03-30T21:10:16","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=3134"},"modified":"2022-11-11T00:48:12","modified_gmt":"2022-11-10T19:18:12","slug":"packer-aws-terraform-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/","title":{"rendered":"Packer AWS Example with Terraform"},"content":{"rendered":"<p>In this article, we are going to see a quick packer aws example setup and provide the steps to create an AWS Image (AMI) using Packer and we are also going to Create Amazon EC2 Instance ( Elastic Bean Stack &#8211; EBS)\u00a0 from the same AMI Image we have created, using Terraform,<\/p>\r\n<p>we are going to use three different products or technologies together such as <code>\u00a0Packer, aws Terraform.<\/code><\/p>\r\n<p><code><\/code> <a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud.jpeg\"><img class=\"alignnone size-full wp-image-3138\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud.jpeg\" alt=\"\" width=\"1050\" height=\"700\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud.jpeg 1050w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-300x200.jpeg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-768x512.jpeg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-1024x683.jpeg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-840x560.jpeg 840w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-120x80.jpeg 120w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-360x240.jpeg 360w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-600x400.jpeg 600w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud-480x320.jpeg 480w\" sizes=\"(max-width: 1050px) 100vw, 1050px\" \/><\/a> Let us see some Quick Overview of Packer and Terraform before we proceed further<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>What is Packer?<\/h2>\r\n<p>Packer is an OpenSource Image Provisioning tool developed by Hashicorp.<\/p>\r\n<p>It creates machine images and makes the Configuration Management and Server provisioning an easy Job.<\/p>\r\n<p>It can create Images for multiple platforms like Docker, AWS, Oracle Virtual Box, Digital Ocean, OpenStack, Linode, Azure etc.<\/p>\r\n<p>you can write the Instructions to the packer as JSON files they are called as\u00a0 <code>Templates<\/code> in Packer Parlance.<\/p>\r\n<p>The technology Packer facilitates is widely known Infrastructure as a Code\u00a0 (IOC)<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>What is Terraform?<\/h2>\r\n<p>Terraform is an open-source <strong>infrastructure as code<\/strong> software tool created by HashiCorp.<\/p>\r\n<p>It enables users to define and provision a datacenter infrastructure using a high-level configuration language known as Hashicorp Configuration Language (HCL), or optionally JSON.<\/p>\r\n<p>Terraform supports a number of cloud infrastructure providers such as<\/p>\r\n<ul>\r\n<li>Amazon Web Services<\/li>\r\n<li>IBM Cloud (formerly Bluemix)<\/li>\r\n<li>Google Cloud Platform<\/li>\r\n<li>Linode<\/li>\r\n<li>Microsoft Azure<\/li>\r\n<li>Oracle Cloud Infrastructure<\/li>\r\n<li>VMware vSphere<\/li>\r\n<li>OpenStack \u00a0<\/li>\r\n<\/ul>\r\n<p>Simply put, the Machine Images we create using Packer can be used by Terraform to build the infrastructures.<\/p>\r\n<p>Since this is going to be the process of\u00a0 <strong>Infrastructure as a Code <\/strong>paradigm.<\/p>\r\n<p>We need a API programmatic access for AWS.<\/p>\r\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n<p>&nbsp;<\/p>\r\n<h2>Steps to Create Packer Image and Create EC2 with Terraform<\/h2>\r\n<p>These are the steps we are going to perform to create a packer image which install <code>apache<\/code>\u00a0httpd webserver using a shell provisioner and prepare the image.<\/p>\r\n<p>Once the image is ready we are going to use Terraform create an instance based on the AMI or the image we have created using packer. \u00a0<\/p>\r\n<h3>Step0: Get your Programmatic Access \/ Create Access Key and Secret from AWS<\/h3>\r\n<ol>\r\n<li>\r\n<div>Login to AWS Console<\/div>\r\n<\/li>\r\n<li>\r\n<div>In the services go to IAM<\/div>\r\n<\/li>\r\n<li>\r\n<div>Create a User and Click on map existing Policies<\/div>\r\n<\/li>\r\n<li>\r\n<div>Choose UserName and Select the Policy (Administrator Access Policy)<\/div>\r\n<\/li>\r\n<li>\r\n<div>Create user<\/div>\r\n<\/li>\r\n<li>\r\n<div>Final Stage would present the AccessKEY and Secret Access like given below.<\/div>\r\n<\/li>\r\n<\/ol>\r\n<figure id=\"attachment_3140\" aria-describedby=\"caption-attachment-3140\" style=\"width: 996px\" class=\"wp-caption alignleft\"><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM.png\"><img class=\"size-full wp-image-3140\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM.png\" alt=\"\" width=\"996\" height=\"385\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM.png 996w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM-300x116.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/Screen-Shot-2019-03-31-at-2.20.07-AM-768x297.png 768w\" sizes=\"(max-width: 996px) 100vw, 996px\" \/><\/a><figcaption id=\"caption-attachment-3140\" class=\"wp-caption-text\">API key creation Successful Message Banner<\/figcaption><\/figure>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3>Step1: Install and Setup Packer<\/h3>\r\n<ol>\r\n<li>\r\n<div>Download Packer\u00a0<a href=\"https:\/\/www.packer.io\/downloads.html\">https:\/\/www.packer.io\/downloads.html<\/a><\/div>\r\n<\/li>\r\n<li>\r\n<div>Unzip the downloaded file and there will be a Single File named packer<\/div>\r\n<\/li>\r\n<li>I have installed the packer in <code>\/apps\/packer<\/code><\/li>\r\n<li>Let us add this path into the<code> $PATH<\/code> variable and <code>BASH_PROFILE<\/code> file as well for better convenience and to call packer any location without having to refer the full path of the packer.<\/li>\r\n<li>Add the \/apps\/packer at the end of the <code>export PATH=*<\/code> line\r\n<pre><span class=\"s1\">export<\/span><span class=\"s2\"><b> PATH=<\/b><\/span><span class=\"s3\">\/usr\/<\/span><span class=\"s1\">local<\/span><span class=\"s3\">\/Cellar\/openssl\/<\/span><span class=\"s4\">1<\/span><span class=\"s3\">.<\/span><span class=\"s4\">0<\/span><span class=\"s3\">.2p\/bin:<\/span><span class=\"s5\">$PATH<span class=\"s3\">:\/apps\/packer\/<\/span><\/span><\/pre>\r\n<\/li>\r\n<li>To validate if it is working just type <code>packer -version<\/code><\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>\r\n<p><span style=\"font-size: 18pt;\"><strong>What is a Packer Template file and\u00a0 How to Write a Packer Template?<\/strong><\/span><\/p>\r\n<p>The Packer template file uses JSON format and it consists of three parts<\/p>\r\n<ul>\r\n<li>Builders<\/li>\r\n<li>provisioners<\/li>\r\n<li>Post-Processors<\/li>\r\n<\/ul>\r\n<p>Along with this, There is a dedicated section for variables and we will start from there. <strong><span style=\"font-size: 14pt;\"><code>Variables<\/code> &#8211;<\/span>\u00a0<\/strong>This Section would contain the list of variables you need to use or need across other sections on the Packer Template JSON file.<\/p>\r\n<p>It is always a Good practice to use variables and referring the variable name across the builders and provisioners as using a variable would make your Packer Template easy to understand and to modify\/update in future for new requirements.<\/p>\r\n<p>In our case, we have set our\u00a0 AWS Access ID and\u00a0\u00a0Secure Key as the variable and we have defined it to be taken from the Environment variable for additional security. \u00a0\u00a0<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong><span style=\"font-size: 14pt;\"><code>builders<\/code> &#8211;\u00a0<\/span>\u00a0<\/strong>Here we define what image we are going to create and for which technology\/platform we are going to create an image for like <code>AWS, DOCKER, VirtualBox, OpenStack etc.<\/code><\/p>\r\n<p>Based on the Builders the configuration elements we use in this section would vary. Packer support various builders like EC2, Vmware, Virtual box etc.. and it can be expanded to various other new products and technologies. \u00a0<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><span style=\"font-size: 14pt;\"><strong><code>Provisioners<\/code> &#8211;\u00a0 <\/strong><\/span>These are the list of built-in or external configuration on management tools like<code> Shell, Ansible, Chef, PowerShell etc..<\/code><\/p>\r\n<p>Here we define what must the image be build with, like a software product, Certain Usernames, Directories, Patch Version, Kernal Version,\u00a0 Environmental specific configuration etc.<\/p>\r\n<p>Provisioners let you design your image and make it more meaningful by adding a necessary software\/programs to it, Without it, the image we create is a simple OS kernel base image otherwise Some Use Cases of Provisioners<\/p>\r\n<ul>\r\n<li>Installing Packages\/Softwares<\/li>\r\n<li>Creating a username and Configuration<\/li>\r\n<li>Run Some Custom Scripts to make Environment required changes<\/li>\r\n<li>Configure File System \/ NFS \/ Storage etc<\/li>\r\n<li>Security Setup \/ Configuration<\/li>\r\n<li>downloading necessary code files etc.<\/li>\r\n<li>patching the kernel<\/li>\r\n<li>Configuring the Packages\/Softwares the way you want ( Apache\/NGINX\/Tomcat\/mysql) etc<\/li>\r\n<\/ul>\r\n<p>Basically, provisioners are doing the main job here and making the image as ready to use<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong><span style=\"font-size: 14pt;\"><code>Post Processors<\/code> (Optional):<\/span> <\/strong>Post-processors comes into the picture after the image is Successfully built or created by the builder and provisioned by the provisioner(s).<\/p>\r\n<p>Post-processors are optional, and they can be used to upload artefacts, re-package, create tags, Publish to clouds like <code>hub.docker.com<\/code> and <code>vagrant cloud<\/code> etc Some of the Popular Post processors are<\/p>\r\n<ul>\r\n<li>Docker Push<\/li>\r\n<li>Docker Tag<\/li>\r\n<li>Vagrant<\/li>\r\n<li>Vagrant cloud<\/li>\r\n<li>Vsphere Template<\/li>\r\n<li>Amazon Import<\/li>\r\n<li>DigitalOcean import etc<\/li>\r\n<\/ul>\r\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n<p>&nbsp;<\/p>\r\n<h3>Step2:\u00a0 Create a WorkSpace to place Scripts and Packer Template<\/h3>\r\n<p>Let us create a new directory and call it as a workspace where our Template and other files required for the Packer must be present, By files,\u00a0 I meant any provisioners script like <code>Shell Script, Ansible playbook etc.\u00a0<\/code><\/p>\r\n<p>Which you want to execute during the provisioning to configure your image in the way you want. Here are the steps as they are executed.<\/p>\r\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"># Create a Directory or Work Space\r\naksarav@middlewareinventory:\/apps\/packer$ pwd\r\n\/apps\/packer\r\naksarav@middlewareinventory:\/apps\/packer$ mkdir awsimages\r\naksarav@middlewareinventory:\/apps\/packer$ cd awsimages\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ ls -rlt\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ pwd\r\n\/apps\/packer\/awsimages\r\n\r\n\r\n# Create a New test file named welcomefile with a Single Line of Welcome Message\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ cat &gt; welcomefile\r\nWELCOME TO PACKER SARAV!..  \r\n\r\n# Create a Simple Script named setup.sh to install Apache2                     \r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ cat &gt; setup.sh\r\necho \"Hello Sarav, How are you doing\"\r\necho \"Installing Apache2\"\r\napt-get update\r\napt-get -y install apache2\r\n\r\n\r\n# Validate if they are created\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ ls -rlt\r\ntotal 16\r\n-rw-r--r &#8211;  1 aksarav  wheel    27B Mar  2 12:13 welcomefile\r\n-rw-r--r &#8211;  1 aksarav  wheel    38B Mar  2 12:13 setup.sh\r\n\r\n# Make the Script Executable\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ chmod a+x setup.sh \r\n\r\n# Set your AWS ACCESS KEY and SECRET KEY as an environment variable for additional security [ Some characters are masked for Obvious reasons ]\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ export AWS_ACCESS_KEY_ID=AK************IEVXQ\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ export AWS_SECRET_ACCESS_KEY=gbaIbK*********************iwN0dGfS\r\n\r\n# Create a New template file and paste the below content\r\naksarav@middlewareinventory:\/apps\/packer\/awsimages$ cat &gt; ebs.json<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>Having learnt the basics of Packer file creation, Now let us see our Sample template JSON file the for packer.<\/p>\r\n<p>&nbsp;<\/p>\r\n\r\n<h3>The Sample Template file for packer<\/h3>\r\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">{\r\n    \"variables\": {\r\n        \"aws_access_key\": \"{{env `AWS_ACCESS_KEY_ID`}}\",\r\n        \"aws_secret_key\": \"{{env `AWS_SECRET_ACCESS_KEY`}}\",\r\n        \"region\":         \"us-east-1\"\r\n    },\r\n    \"builders\": [\r\n        {\r\n            \"access_key\": \"{{user `aws_access_key`}}\",\r\n            \"ami_name\": \"packer-linux-aws-demo-{{timestamp}}\",\r\n            \"instance_type\": \"t3.micro\",\r\n            \"region\": \"ap-south-1\",\r\n            \"secret_key\": \"{{user `aws_secret_key`}}\",\r\n            \"source_ami_filter\": {\r\n              \"filters\": {\r\n              \"virtualization-type\": \"hvm\",\r\n              \"name\": \"ubuntu\/images\/*ubuntu-xenial-16.04-amd64-server-*\",\r\n              \"root-device-type\": \"ebs\"\r\n              },\r\n              \"owners\": [\"099720109477\"],\r\n              \"most_recent\": true\r\n            },\r\n            \"ssh_username\": \"ubuntu\",\r\n            \"type\": \"amazon-ebs\"\r\n        }\r\n    ],\r\n    \"provisioners\": [\r\n        {\r\n            \"type\": \"file\",\r\n            \"source\": \".\/welcomefile\",\r\n            \"destination\": \"\/home\/ubuntu\/\"\r\n        },\r\n        {\r\n            \"type\": \"shell\",\r\n            \"inline\":[\r\n                \"ls -al \/home\/ubuntu\",\r\n                \"cat \/home\/ubuntu\/welcomefile\"\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"shell\",\r\n            \"script\": \".\/setup.sh\"\r\n        }\r\n    ]\r\n}<\/pre>\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<p>Once you have saved the preceding Template JSON content in the workspace. [ in my case the file name is <code>ebs.json<\/code> ] Now it is a time to validate and execute.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong><span style=\"font-size: 18pt;\">How to validate the Packer Image?<\/span><\/strong><\/p>\r\n<p>To validate the packer image file ( JSON ) we have created,\u00a0 we can use the <code>packer validate<\/code> command<\/p>\r\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-linenumbers=\"false\">$ packer validate ebs.json \r\nTemplate validated successfully.<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>If you get <code>Template validated Successfully<\/code> message. Then you are Good.<\/p>\r\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n<p>&nbsp;<\/p>\r\n<h3>Step3: Build an Image using Packer from the Template JSON file<\/h3>\r\n<p>Now it is a time to build the Image from the Template we have created already.\u00a0 We should use <code>packer build<\/code> command followed by the JSON file name to build the image<\/p>\r\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ packer build ebs.json \r\namazon-ebs output will be in this color.\r\n==&gt; amazon-ebs: Prevalidating AMI Name: packer-linux-aws-demo-1551511502\r\n    amazon-ebs: Found Image ID: ami-0a574895390037a62\r\n==&gt; amazon-ebs: Creating temporary keypair: packer_5c7a2fcf-66e5-01d5-b774-fcc0ddcfc2c5\r\n==&gt; amazon-ebs: Creating temporary security group for this instance: packer_5c7a2fd1-2ab9-8f5a-e3c6-d33e5ce49bee\r\n==&gt; amazon-ebs: Authorizing access to port 22 from 0.0.0.0\/0 in the temporary security group...\r\n==&gt; amazon-ebs: Launching a source AWS instance...\r\n==&gt; amazon-ebs: Adding tags to source instance\r\n    amazon-ebs: Adding tag: \"Name\": \"Packer Builder\"\r\n    amazon-ebs: Instance ID: i-09510a5b2434d64b2\r\n==&gt; amazon-ebs: Waiting for instance (i-09510a5b2434d64b2) to become ready...\r\n==&gt; amazon-ebs: Using ssh communicator to connect: 13.232.19.83\r\n==&gt; amazon-ebs: Waiting for SSH to become available...\r\n==&gt; amazon-ebs: Connected to SSH!\r\n==&gt; amazon-ebs: Uploading .\/welcomefile =&gt; \/home\/ubuntu\/\r\n1 items:  27 B \/ 27 B [===================================================================================================================================] 0s\r\n==&gt; amazon-ebs: Provisioning with shell script: \/var\/folders\/gy\/_pnf5jtn711fcqn8v2j54tcm0000gn\/T\/packer-shell531024437\r\n    amazon-ebs: total 32\r\n    amazon-ebs: drwxr-xr-x 4 ubuntu ubuntu 4096 Mar  2 07:25 .\r\n    amazon-ebs: drwxr-xr-x 3 root   root   4096 Mar  2 07:25 ..\r\n    amazon-ebs: -rw-r--r &#8211; 1 ubuntu ubuntu  220 Aug 31  2015 .bash_logout\r\n    amazon-ebs: -rw-r--r &#8211; 1 ubuntu ubuntu 3771 Aug 31  2015 .bashrc\r\n    amazon-ebs: drwx---- &#8211; 2 ubuntu ubuntu 4096 Mar  2 07:25 .cache\r\n    amazon-ebs: -rw-r--r &#8211; 1 ubuntu ubuntu  655 May 16  2017 .profile\r\n    amazon-ebs: drwx---- &#8211; 2 ubuntu ubuntu 4096 Mar  2 07:25 .ssh\r\n    amazon-ebs: -rw-r--r &#8211; 1 ubuntu ubuntu   27 Mar  2 07:25 welcomefile\r\n    amazon-ebs: WELCOME TO PACKER SARAV!..\r\n==&gt; amazon-ebs: Provisioning with shell script: .\/setup.sh\r\n    amazon-ebs: Hello Sarav, How are you doing\r\n    amazon-ebs: Installing Apache2\r\n==&gt; amazon-ebs: Stopping the source instance...\r\n    amazon-ebs: Stopping instance, attempt 1\r\n==&gt; amazon-ebs: Waiting for the instance to stop...\r\n==&gt; amazon-ebs: Creating unencrypted AMI packer-linux-aws-demo-1551511502 from instance i-09510a5b2434d64b2\r\n    amazon-ebs: AMI: ami-0ba13714603920d0e\r\n==&gt; amazon-ebs: Waiting for AMI to become ready...\r\n==&gt; amazon-ebs: Terminating the source AWS instance...\r\n==&gt; amazon-ebs: Cleaning up any extra volumes...\r\n==&gt; amazon-ebs: No volumes to clean up, skipping\r\n==&gt; amazon-ebs: Deleting temporary security group...\r\n==&gt; amazon-ebs: Deleting temporary keypair...\r\nBuild 'amazon-ebs' finished.\r\n==&gt; Builds finished. The artifacts of successful builds are:\r\n--&gt; amazon-ebs: AMIs were created:\r\nap-south-1: ami-0ba13714603920d0e<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>In the preceding Execution Output, If you look at the Texts highlighted in Yellow,\u00a0 You can understand, The Provisioner Scripts we have defined to be executed has Successfully launched during the Image Creation and Succeeded.<\/p>\r\n<p>It has also installed the <code>Apache2<\/code> httpd inside the newly created image and we can expect apache2 httpd server be present whenever we create an instance out of this newly created AMI or Amazon Machine Image.<\/p>\r\n<p>Here the last line would give you the AMI Image ID\u00a0<code>ami-0ba13714603920d0e<\/code> which would vary for everyone.<\/p>\r\n<p>So you must copy yours and keep it safe as we will need for Terraform<\/p>\r\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\r\n<p>&nbsp;<\/p>\r\n<h3>Step4: Building AWS EC2 Instance using Terraform and AMI<\/h3>\r\n<p>Now we have created the AWS Machine Image using Packer. By now, you can actually see your images in the AMI section on the AWS Management console.<\/p>\r\n<p>Now let us see how to Create an EC2 instance using Terraform To make this precise and Short I have not added the installation instruction of Terraform.<\/p>\r\n<p>You can find the instructions here <a href=\"https:\/\/learn.hashicorp.com\/terraform\/getting-started\/install\" target=\"_blank\" rel=\"noopener noreferrer\">Installing Terraform<\/a> Now Let me proceed further with an assumption that you have installed the Terraform.<\/p>\r\n<p>In the workspace, Create a new file named\u00a0<code><span class=\"s1\">BuildEC2.tf<\/span><\/code> with the following content and make sure that your Environment variables are set properly and machine ID is updated<\/p>\r\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">provider \"aws\" {\r\n  region = \"ap-south-1\"\r\n}\r\n\r\nresource \"aws_instance\" \"web\" {\r\n  ami           = \"UPDATE YOUR AMI MACHINE ID\"\r\n  instance_type = \"t2.micro\"\r\n\r\n  tags = {\r\n    Name = \"HelloWorld\"\r\n  }\r\n}\r\n<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>These are the commands to build AWS EC2 instance using terraform, in the same order it was executed<\/p>\r\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"># Make Sure the Terraform Template\/Instruction file is present\r\naksarav@middlewareinventory:\/apps\/terraform$ ls -rlt\r\ntotal 8\r\n-rw-r--r &#8211;  1 aksarav  wheel   189B Mar  2 13:51 BuildEC2.tf\r\n\r\n# Init terraform\r\naksarav@middlewareinventory:\/apps\/terraform$ terraform init\r\nInitializing provider plugins...\r\n- Checking for available provider plugins on https:\/\/releases.hashicorp.com...\r\n- Downloading plugin for provider \"aws\" (2.0.0)...\r\nThe following providers do not have any version constraints in configuration,\r\nso the latest version was installed.\r\nTo prevent automatic upgrades to new major versions that may contain breaking\r\nchanges, it is recommended to add version = \"...\" constraints to the\r\ncorresponding provider blocks in configuration, with the constraint strings\r\nsuggested below.\r\n* provider.aws: version = \"~&gt; 2.0\"\r\nTerraform has been successfully initialized!\r\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\r\nany changes that are required for your infrastructure. All Terraform commands\r\nshould now work.\r\nIf you ever set or change modules or backend configuration for Terraform,\r\nrerun this command to reinitialize your working directory. If you forget, other\r\ncommands will detect it and remind you to do so if necessary.\r\n\r\n# Apply Terraform to build the EC2 instance\r\naksarav@middlewareinventory:\/apps\/terraform$ terraform apply\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\nTerraform will perform the following actions:\r\n  + aws_instance.web\r\n      id:                           &lt;computed&gt;\r\n      ami:                          \"ami-0ba13714603920d0e\"\r\n      arn:                          &lt;computed&gt;\r\n      associate_public_ip_address:  &lt;computed&gt;\r\n      availability_zone:            &lt;computed&gt;\r\n      cpu_core_count:               &lt;computed&gt;\r\n      cpu_threads_per_core:         &lt;computed&gt;\r\n      ebs_block_device.#:           &lt;computed&gt;\r\n      ephemeral_block_device.#:     &lt;computed&gt;\r\n      get_password_data:            \"false\"\r\n      host_id:                      &lt;computed&gt;\r\n      instance_state:               &lt;computed&gt;\r\n      instance_type:                \"t2.micro\"\r\n      ipv6_address_count:           &lt;computed&gt;\r\n      ipv6_addresses.#:             &lt;computed&gt;\r\n      key_name:                     &lt;computed&gt;\r\n      network_interface.#:          &lt;computed&gt;\r\n      network_interface_id:         &lt;computed&gt;\r\n      password_data:                &lt;computed&gt;\r\n      placement_group:              &lt;computed&gt;\r\n      primary_network_interface_id: &lt;computed&gt;\r\n      private_dns:                  &lt;computed&gt;\r\n      private_ip:                   &lt;computed&gt;\r\n      public_dns:                   &lt;computed&gt;\r\n      public_ip:                    &lt;computed&gt;\r\n      root_block_device.#:          &lt;computed&gt;\r\n      security_groups.#:            &lt;computed&gt;\r\n      source_dest_check:            \"true\"\r\n      subnet_id:                    &lt;computed&gt;\r\n      tags.%:                       \"1\"\r\n      tags.Name:                    \"HelloWorld\"\r\n      tenancy:                      &lt;computed&gt;\r\n      volume_tags.%:                &lt;computed&gt;\r\n      vpc_security_group_ids.#:     &lt;computed&gt;\r\nPlan: 1 to add, 0 to change, 0 to destroy.\r\nDo you want to perform these actions?\r\n  Terraform will perform the actions described above.\r\n  Only 'yes' will be accepted to approve.\r\n  Enter a value: yes\r\naws_instance.web: Creating...\r\n  ami:                          \"\" =&gt; \"ami-0ba13714603920d0e\"\r\n  arn:                          \"\" =&gt; \"&lt;computed&gt;\"\r\n  associate_public_ip_address:  \"\" =&gt; \"&lt;computed&gt;\"\r\n  availability_zone:            \"\" =&gt; \"&lt;computed&gt;\"\r\n  cpu_core_count:               \"\" =&gt; \"&lt;computed&gt;\"\r\n  cpu_threads_per_core:         \"\" =&gt; \"&lt;computed&gt;\"\r\n  ebs_block_device.#:           \"\" =&gt; \"&lt;computed&gt;\"\r\n  ephemeral_block_device.#:     \"\" =&gt; \"&lt;computed&gt;\"\r\n  get_password_data:            \"\" =&gt; \"false\"\r\n  host_id:                      \"\" =&gt; \"&lt;computed&gt;\"\r\n  instance_state:               \"\" =&gt; \"&lt;computed&gt;\"\r\n  instance_type:                \"\" =&gt; \"t2.micro\"\r\n  ipv6_address_count:           \"\" =&gt; \"&lt;computed&gt;\"\r\n  ipv6_addresses.#:             \"\" =&gt; \"&lt;computed&gt;\"\r\n  key_name:                     \"\" =&gt; \"&lt;computed&gt;\"\r\n  network_interface.#:          \"\" =&gt; \"&lt;computed&gt;\"\r\n  network_interface_id:         \"\" =&gt; \"&lt;computed&gt;\"\r\n  password_data:                \"\" =&gt; \"&lt;computed&gt;\"\r\n  placement_group:              \"\" =&gt; \"&lt;computed&gt;\"\r\n  primary_network_interface_id: \"\" =&gt; \"&lt;computed&gt;\"\r\n  private_dns:                  \"\" =&gt; \"&lt;computed&gt;\"\r\n  private_ip:                   \"\" =&gt; \"&lt;computed&gt;\"\r\n  public_dns:                   \"\" =&gt; \"&lt;computed&gt;\"\r\n  public_ip:                    \"\" =&gt; \"&lt;computed&gt;\"\r\n  root_block_device.#:          \"\" =&gt; \"&lt;computed&gt;\"\r\n  security_groups.#:            \"\" =&gt; \"&lt;computed&gt;\"\r\n  source_dest_check:            \"\" =&gt; \"true\"\r\n  subnet_id:                    \"\" =&gt; \"&lt;computed&gt;\"\r\n  tags.%:                       \"\" =&gt; \"1\"\r\n  tags.Name:                    \"\" =&gt; \"HelloWorld\"\r\n  tenancy:                      \"\" =&gt; \"&lt;computed&gt;\"\r\n  volume_tags.%:                \"\" =&gt; \"&lt;computed&gt;\"\r\n  vpc_security_group_ids.#:     \"\" =&gt; \"&lt;computed&gt;\"\r\naws_instance.web: Still creating... (10s elapsed)\r\naws_instance.web: Creation complete after 15s (ID: i-06987184944fa33cf)\r\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Now you can see the EC2 instance created successfully on AWS. you can cross verify the same on the console.<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3>Some Quick Caveats<\/h3>\r\n<ul>\r\n<li>\u00a0Make sure the region you select for the Image creation at Packer and the Terraform Region matches.\u00a0 <code>as AMI ID is region Specific<\/code><\/li>\r\n<li>Make Sure you use the valid AWS Key and Secret<\/li>\r\n<li><span style=\"color: #000000;\">Last but not least, Make sure you shut down the EC2 instances and Remove the AMI images if you are on Free tier. You would be charged otherwise.<\/span><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<h2>Conclusion<\/h2>\r\n<p>This is a quick introduction for Packer and Terraform and there are numerous and advanced use cases for Terraform and it is widely used on the industry right now for the IAC.<\/p>\r\n<p>Hope this give some basic Idea on the Terraform and Packer.<\/p>\r\n<p>You can checkout our other articles in Terraform here and keep learning<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Cheers<\/p>\r\n<p>Rumen Lishkov<\/p>\r\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577359\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"3134\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577359\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577359\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\r\n","protected":false},"excerpt":{"rendered":"<p>In this article, we are going to see a quick packer aws example setup and provide the steps to create an AWS Image (AMI) using Packer and we are also going to Create Amazon EC2 Instance ( Elastic Bean Stack &#8211; EBS)\u00a0 from the same AMI Image we have created,[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":3138,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[234,454,232,233],"tags":[240,241,238,242,237,239,236,243,235],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Packer AWS Example with Terraform - DevOps Junction<\/title>\n<meta name=\"description\" content=\"Packer aws example with terraform example, How to create a Packer AWS Machine Image for EC2, Packer with AWS and build machine images for AWS and deploy the Machine Images AMIs to EC2 using Terraform. Infrastructure automation with Packer and Terraform. Create Machine Images AMIs with Packer and Deploy to AWS.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Packer AWS Example with Terraform - DevOps Junction\" \/>\n<meta property=\"og:description\" content=\"Packer aws example with terraform example, How to create a Packer AWS Machine Image for EC2, Packer with AWS and build machine images for AWS and deploy the Machine Images AMIs to EC2 using Terraform. Infrastructure automation with Packer and Terraform. Create Machine Images AMIs with Packer and Deploy to AWS.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-03-30T21:10:16+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:18:12+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud.jpeg\" \/>\n\t<meta property=\"og:image:width\" content=\"1050\" \/>\n\t<meta property=\"og:image:height\" content=\"700\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/cloud.jpeg\",\"width\":1050,\"height\":700},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/\",\"name\":\"Packer AWS Example with Terraform - DevOps Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#primaryimage\"},\"datePublished\":\"2019-03-30T21:10:16+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"description\":\"Packer aws example with terraform example, How to create a Packer AWS Machine Image for EC2, Packer with AWS and build machine images for AWS and deploy the Machine Images AMIs to EC2 using Terraform. Infrastructure automation with Packer and Terraform. Create Machine Images AMIs with Packer and Deploy to AWS.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Packer AWS Example with Terraform\",\"datePublished\":\"2019-03-30T21:10:16+00:00\",\"dateModified\":\"2022-11-10T19:18:12+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#primaryimage\"},\"keywords\":\"aws machine creation example,Infrastructure as code example,packer and terraform,packer aws,packer aws ebs,packer aws ebs example,Packer AWS example,packer terraform,Terraform AWS example\",\"articleSection\":\"AWS,DevOps_Beginner,Packer,Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/packer-aws-terraform-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/3134"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=3134"}],"version-history":[{"count":26,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/3134\/revisions"}],"predecessor-version":[{"id":6987,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/3134\/revisions\/6987"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/3138"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=3134"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=3134"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=3134"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}