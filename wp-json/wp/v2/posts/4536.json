{"id":4536,"date":"2019-11-30T22:30:12","date_gmt":"2019-11-30T17:00:12","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=4536"},"modified":"2022-06-22T00:48:10","modified_gmt":"2022-06-21T19:18:10","slug":"ansible-async","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/","title":{"rendered":"Ansible Async Poll Examples &#8211; Ansible nohup, task in background"},"content":{"rendered":"<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM.png\"><img class=\"alignnone size-full wp-image-4559\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM.png\" alt=\"\" width=\"1419\" height=\"755\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM.png 1419w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM-300x160.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM-768x409.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM-1024x545.png 1024w\" sizes=\"(max-width: 1419px) 100vw, 1419px\" \/><\/a><\/p>\n<p>Not all the tasks we run in our playbook are short and sweet. Some of them would take a long time but we cannot afford to sit tight and watch the screen. We got better things to do.<\/p>\n<p>Some of the long-running tasks could be<\/p>\n<ul>\n<li>Downloading a Big File from URL<\/li>\n<li>Running a Script known to run for a long time<\/li>\n<li>Rebooting the remote server and waiting for it to comeback<\/li>\n<\/ul>\n<p>These are only few I got in my head as I write this but there could be more scenarios.<\/p>\n<p>In those cases where you want to run a long-running task with Ansible. You can consider running them with <code>async<\/code> keyword in your playbook.<\/p>\n<p>Especially when you are running a time taking playbook with <code>parallism<\/code> and a lot of <code>forks<\/code> you can simply start the long-running task and poll its status later,\u00a0 instead of blocking the entire playbook and other succeeding tasks.<\/p>\n<p>So how to use this Ansible Async and Poll in our playbooks and our ad hoc commands.<\/p>\n<p>That&#8217;s the objective of this post.<\/p>\n<p>&nbsp;<\/p>\n<h3>Some Long Running Script<\/h3>\n<p>For better understanding, I have created some funny Script to run long time.\u00a0 It would simply sleep for the instructed time ( obviously sleeping is also a Job )<\/p>\n<p>here is the script<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0 none repeat scroll 0% 0%; color: #444444;\"><span class=\"hljs-meta\" style=\"color: #1f7199;\">#!\/bin\/bash<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #397300;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #880000;\">\"Long Running Job is beginning\"<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #397300;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #880000;\">\"My Job is to Sleep\"<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #397300;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #880000;\">\"Now am going to Sleep for <span class=\"hljs-variable\" style=\"color: #bc6060;\">$1<\/span> Seconds\"<\/span>\r\nsleep <span class=\"hljs-variable\" style=\"color: #bc6060;\">$1<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #397300;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #880000;\">\"Huuuhhh!!.. What time is It?\"<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #397300;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #880000;\">\"Can I get some Bed Coffee please\"<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #397300;\">exit<\/span><\/pre>\n<p>so it would run {sleep} as long as we set it to.<\/p>\n<p>This is the script we are going to use in our examples<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>What does this async do in Ansible<\/h3>\n<div class=\"page\" title=\"Page 308\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>The ansible async keyword triggers Ansible to run the task in the background which can be checked (or) followed up later, and its value will be the maximum time that Ansible will wait for that particular Job (or) task to complete before it eventually times out or complete.<\/p>\n<p>So async keyword can tell Ansible <strong>how long the task should be allowed to run<\/strong> before Ansible gives it up and time out.<\/p>\n<p>But How would ansible track the status of this job invoked in the background?\u00a0 How frequent it would check if the task is completed or not.<\/p>\n<p>That&#8217;s where the <code>poll<\/code> keyword is coming into the picture<\/p>\n<\/div>\n<\/div>\n<\/div>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Ansible Poll Keyword with Ansible async<\/h3>\n<p>The Poll keyword is auto-enabled whenever you use <code>async<\/code> and it has a default value as <code>10 seconds<\/code><\/p>\n<p>Which means If you are not defining the poll keyword with customized time period. By default Ansible would track the status of the <code>async<\/code> task every 10 seconds.<\/p>\n<p>If you think <code>10 seconds<\/code> polling is too frequent and you want Ansible to test the status of the job every <code>60 seconds<\/code> It is possible.<\/p>\n<p>The <code>poll<\/code> keyword accepts a numeric value to know how many seconds it should wait before polling or following up with the long-running asynchronous task.<\/p>\n<div class=\"page\" title=\"Page 308\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>In other words, The value of the poll indicates how often to poll and check if the tasks are completed. <strong>The default poll value is 10 seconds.<\/strong><\/p>\n<\/div>\n<\/div>\n<\/div>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>A quick example of Ansible Async<\/h3>\n<p>Good learning is doing it practically so let us get our hands dirty and execute the following playbook to see how <code>async<\/code> and <code>poll<\/code> works<\/p>\n<p>The following playbook has three tasks<\/p>\n<ul>\n<li>Copy the script to the remote server<\/li>\n<li>Run the script<\/li>\n<li>Display the Output of Script with Debug<\/li>\n<\/ul>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">- name:<\/span> A Playbook to test Async and Poll\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  hosts:<\/span> appservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  remote_user:<\/span> centos\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Copy the script \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      copy:<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        src:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"longrunningscript.sh\"<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># the file is present on the same directory<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        dest:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/tmp\"<\/span>\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Execute the script\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n        <span class=\"hljs-string\" style=\"color: #a5c261;\">\"chmod a+x \/tmp\/longrunningscript.sh &amp;&amp;  <span class=\"hljs-string\">\/tmp\/longrunningscript.sh<\/span> 60\"<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Run for 60 seconds <\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">120<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Maximum allowed time in Seconds<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">05<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Polling Interval in Seconds<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> scrout\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Some task just to debug\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      debug:<\/span> var=scrout.stdout_lines<\/pre>\n<p>&nbsp;<\/p>\n<p>Though our script is going to run only for 60 seconds. we have given a room for it to run longer. In realtime scenarios, you would not know how long the script would run, so use your best judgement when you are setting the value of <code>async<\/code><\/p>\n<p>Let us run this playbook quickly and observe the results.<\/p>\n<p><script id=\"asciicast-D12IkgVMFvIEL6cwdoFc1wEVR\" src=\"https:\/\/asciinema.org\/a\/D12IkgVMFvIEL6cwdoFc1wEVR.js\" async><\/script><\/p>\n<p>Did you notice that the second task of executing the script was waiting as long as the script is completing and blocking the succedding tasks.<\/p>\n<p>we will discuss how to solve this in upcoming sections.<\/p>\n<p>But there is a one more question You might <strong>ask what if I give less async time than the required time for the script. <\/strong>Cause we cannot judge how long the script may run in real time scnarios.<\/p>\n<p><script id=\"asciicast-kiP7ytl0LZy3AVere2DVZJeBQ\" src=\"https:\/\/asciinema.org\/a\/kiP7ytl0LZy3AVere2DVZJeBQ.js\" async><\/script><\/p>\n<p>The answer is the playbook would fail if the given async time is not suffcient and print the following timeout message<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-4.20.45-PM.png\"><img class=\"alignnone size-full wp-image-4542\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-4.20.45-PM.png\" alt=\"\" width=\"938\" height=\"127\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-4.20.45-PM.png 938w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-4.20.45-PM-300x41.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-4.20.45-PM-768x104.png 768w\" sizes=\"(max-width: 938px) 100vw, 938px\" \/><\/a><\/p>\n<p>Now you might ask me, Is this really asynchronous? <strong>I had to wait anyway for the task to complete.<\/strong><\/p>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<div class=\"page\" title=\"Page 308\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h3>So how to run the job actually in the background with Concurrency<\/h3>\n<p>If you do not want Ansible to track the status of the long running asynchronous task or job. You can tell ansible to just fire it and forget it. by setting the poll to 0 seconds<\/p>\n<p>As a user, If you want to track the status of that job later. you can use the JOB ID given by ansible during the invocation to track it.<\/p>\n<p>This is useful in many cases and especially when you want to start some services like weblogic, tomcat, haproxy etc using a script at the remote server and let it run<\/p>\n<\/div>\n<\/div>\n<\/div>\n<p>To me, if you ask. This is the actual Asynchronous approach.<\/p>\n<p>If we want to track the status of this job, we can go ahead and use <code>async_status<\/code> keyword along with the job ID being returned when we run the job.<\/p>\n<blockquote>\n<p class=\"first admonition-title\"><strong>Note*<\/strong><\/p>\n<p>Not all Jobs and modules can be run in background with poll 0<\/p>\n<p class=\"last\">You shouldn\u2019t attempt to run a task asynchronously by specifying a poll value of 0 with operations that require exclusive locks (such as yum transactions) or if you expect to run other commands later in the playbook against those same resources.<\/p>\n<p>&nbsp;<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>An example Playbook with Poll 0 &#8211; A real concurrency<\/h3>\n<p>Now let us use the same playbook we used earlier with the modified Poll. You just have to update the Poll to 0 seconds and re-execute it.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">- name:<\/span> Test Playbook to test Async and Poll\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  hosts:<\/span> appservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  remote_user:<\/span> centos\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Copy the script \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      copy:<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        src:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"longrunningscript.sh\"<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># the file is present on the same directory<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        dest:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/tmp\"<\/span>\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Execute the script\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n        <span class=\"hljs-string\" style=\"color: #a5c261;\">\"chmod a+x \/tmp\/longrunningscript.sh &amp;&amp;  \/tmp\/longrunningscript.sh 120\"<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Run for 60 seconds <\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">180<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Maximum allowed time in Seconds<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Polling Interval in Seconds<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> scrout\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Some Other Non Dependent task\r\n      shell :\r\n        <span class=\"hljs-string\" style=\"color: #a5c261;\">\" ls -lrt \/tmp\"<\/span><\/pre>\n<p>now execute this playbook with at least one <code>-v<\/code> so that you would be able to see the JOB ID which you can use to test the status with <code>async_status<\/code><\/p>\n<p><script id=\"asciicast-5ZFXyCPpxzdhjyglwM4LHLrxj\" src=\"https:\/\/asciinema.org\/a\/5ZFXyCPpxzdhjyglwM4LHLrxj.js\" async><\/script><\/p>\n<p>in the preceding screen recording, you can see how the playbook is invoked with <code>poll 0<\/code> and\u00a0 tracking the job status using\u00a0 <code>async_status<\/code> module in <strong>AD-HOC<\/strong><\/p>\n<p><code>aync_status<\/code> can be used within the playbook as well..<\/p>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Ansible Async_status within the playbook<\/h3>\n<p>You can also use the <code>async_status<\/code> module with in the playbook as shown below.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">- name:<\/span> Test Playbook to test Async and Poll\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  hosts:<\/span> appservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  remote_user:<\/span> centos\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Copy the script \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      copy:<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        src:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"longrunningscript.sh\"<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># the file is present on the same directory<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        dest:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/tmp\"<\/span>\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Execute the script\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n        <span class=\"hljs-string\" style=\"color: #a5c261;\">\"chmod a+x \/tmp\/longrunningscript.sh &amp;&amp;  \/tmp\/longrunningscript.sh 120\"<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Run for 60 seconds <\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">180<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Maximum allowed time in Seconds<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Polling Interval in Seconds<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> scrout\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Some Other Non Dependent task\r\n      shell :\r\n        <span class=\"hljs-string\" style=\"color: #a5c261;\">\" ls -lrt \/tmp\"<\/span>\r\n      \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Checking the Job Status\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async_status:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        jid:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{ scrout.ansible_job_id }}<\/span>\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> job_result\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      until:<\/span> job_result.finished\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      retries:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">30<\/span>\r\n  \r\n<\/pre>\n<p>Here is the screen record of running this playbook.<\/p>\n<p><script id=\"asciicast-8phbVaLrHuQUyBvvjsJiKH2VR\" src=\"https:\/\/asciinema.org\/a\/8phbVaLrHuQUyBvvjsJiKH2VR.js\" async><\/script><\/p>\n<p>&nbsp;<\/p>\n<p>Not Just <code>async_status<\/code> you can use <code>wait_for<\/code> module with different strategies to check whether the job is completed or not.<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Another way to determine job completion with ansible wait_for<\/h3>\n<p>Consider the following playbook written to perform Server Patching and reboot.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Patch the server and Reboot\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> app\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> Patch the server\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> Patch\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        shell:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"yum -y update\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> patchresult\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> Reboot the server\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> reboot\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        shell:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"sleep 5 &amp;&amp; reboot\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">1<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span>\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> Wait for the reboot and reconnect \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          port:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">22<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          host:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">'<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}<\/span>'<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          search_regex:<\/span> OpenSSH\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          delay:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          timeout:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">60<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        connection:<\/span> local\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> Check the Uptime of the servers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        shell:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"uptime\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> Uptime\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - debug:<\/span> var=Uptime<\/pre>\n<p>At task no 2 we are rebooting the server with the same poll value 0 ( fire and forget) but instead of tracking the job status at next step we use <code>wait_for<\/code> module to make sure that the server comes back by constantly checking the <code>ssh<\/code> port of the remote server.<\/p>\n<p>So you can use <code>wait_for<\/code> module as another way to track the status of the job.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>to <strong>learn more about the ansible wait_for module<\/strong><\/h3>\n<blockquote class=\"wp-embedded-content\" data-secret=\"zanJWkzdKH\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/\">Ansible wait_for module examples &#8211; How to | Devops Junction<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Ansible wait_for module examples &#8211; How to | Devops Junction&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-wait_for-examples\/embed\/#?secret=zanJWkzdKH\" data-secret=\"zanJWkzdKH\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<h3>to <strong>learn more about how to perform a reboot of the server with Async and pool<\/strong><\/h3>\n<blockquote class=\"wp-embedded-content\" data-secret=\"6iasXWpWps\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible_wait_for_reboot_to_complete\/\">Ansible Reboot system and wait_for reboot to complete<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Ansible Reboot system and wait_for reboot to complete&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/ansible_wait_for_reboot_to_complete\/embed\/#?secret=6iasXWpWps\" data-secret=\"6iasXWpWps\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>Hope this article helps.<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670578259\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"4536\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670578259\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670578259\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Not all the tasks we run in our playbook are short and sweet. Some of them would take a long time but we cannot afford to sit tight and watch the screen. We got better things to do. Some of the long-running tasks could be Downloading a Big File from[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":4559,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[365,368,367,366],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible Async Poll Examples - Ansible nohup, task in background<\/title>\n<meta name=\"description\" content=\"Ansible Async and poll. How to run Ansible tasks in the background asynchronously and poll for its status. ansible nohup. how to use async poll in Ansible playbooks and get the ansible job status with async_status module with example playbooks. How to run a long-running script in background ansible and wait for it to complete.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible Async Poll Examples - Ansible nohup, task in background\" \/>\n<meta property=\"og:description\" content=\"Ansible Async and poll. How to run Ansible tasks in the background asynchronously and poll for its status. ansible nohup. how to use async poll in Ansible playbooks and get the ansible job status with async_status module with example playbooks. How to run a long-running script in background ansible and wait for it to complete.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-11-30T17:00:12+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-06-21T19:18:10+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1419\" \/>\n\t<meta property=\"og:image:height\" content=\"755\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/11\/Screenshot-2019-11-30-at-10.45.07-PM.png\",\"width\":1419,\"height\":755},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/\",\"name\":\"Ansible Async Poll Examples - Ansible nohup, task in background\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#primaryimage\"},\"datePublished\":\"2019-11-30T17:00:12+00:00\",\"dateModified\":\"2022-06-21T19:18:10+00:00\",\"description\":\"Ansible Async and poll. How to run Ansible tasks in the background asynchronously and poll for its status. ansible nohup. how to use async poll in Ansible playbooks and get the ansible job status with async_status module with example playbooks. How to run a long-running script in background ansible and wait for it to complete.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible Async Poll Examples &#8211; Ansible nohup, task in background\",\"datePublished\":\"2019-11-30T17:00:12+00:00\",\"dateModified\":\"2022-06-21T19:18:10+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#primaryimage\"},\"keywords\":\"Ansible Async,ansible async and poll,ansible background script,Run Tasks Asynchronously ansible\",\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4536"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=4536"}],"version-history":[{"count":6,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4536\/revisions"}],"predecessor-version":[{"id":8739,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4536\/revisions\/8739"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/4559"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=4536"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=4536"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=4536"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}