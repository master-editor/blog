{"id":1342,"date":"2018-06-12T07:30:35","date_gmt":"2018-06-12T02:00:35","guid":{"rendered":"http:\/\/www.middlewareinventory.com\/?p=1342"},"modified":"2018-07-21T01:05:30","modified_gmt":"2018-07-20T19:35:30","slug":"websphere-connection-pool-monitoring-wsadmin-python-scrip","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/","title":{"rendered":"Websphere Connection Pool Monitoring &#8211; wsadmin script"},"content":{"rendered":"<div><span style=\"color: #000000;\">In this post we are providing WebSphere\u00a0connection pool monitoring &#8211; wsadmin script.\u00a0 Its written in Python\/Jython\u00a0and can be used for WebSphere application server 6+ versions<\/span><\/div>\n<div><\/div>\n<h3><span style=\"color: #000000;\"><strong>How the script is designed<\/strong><\/span><\/h3>\n<div><\/div>\n<div>\n<ol>\n<li><span style=\"color: #000000;\">It will find all the running server instances registered with Websphere Application server <strong>DMGR<\/strong> (cell) and take a list of running connection pools targeted on those servers.<\/span><\/li>\n<li><span style=\"color: #000000;\">It will automatically set 80 percent of the connection max_limit as a threshold.<\/span><\/li>\n<li><span style=\"color: #000000;\">It will print an alert message, in case of possible connection pool overflow. When the current connection limit reaches the threshold.<\/span><\/li>\n<\/ol>\n<\/div>\n<h3><\/h3>\n<h3><span style=\"color: #000000;\"><strong>Version compatibility<\/strong><\/span><\/h3>\n<div><span style=\"color: #000000;\">Websphere Application Server 6.1 and above ( for was 6 there is little bit modification required)<\/span><\/div>\n<div>\n<p>&nbsp;<\/p>\n<h3><span style=\"color: #000000;\"><strong>The Sourcecode<\/strong><\/span><\/h3>\n<\/div>\n<div>\n<pre class=\"brush: python; title: ; notranslate\" title=\"\">\r\nimport re\r\nRunning_JVMS=AdminControl.queryNames(&quot;*:type=Server,*&quot;).split(java.lang.System.getProperty(&quot;line.separator&quot;))\r\nignorelist=['nodeagent','dmgr']\r\nTMPFILE='\/tmp\/PoolContents.tmp'\r\nglobal current_conn\r\nfor JVM in Running_JVMS:\r\n        ServerName=AdminControl.invoke(JVM ,&quot;getName()&quot;)\r\n        if ServerName not in ignorelist:\r\n                DS=AdminControl.queryNames('*:process='+ServerName+',type=DataSource,*').split(java.lang.System.getProperty(&quot;line.separator&quot;))\r\n                for entry in DS:\r\n                        if AdminControl.invoke(entry, &quot;getStatus()&quot;) != '99':\r\n                                print &quot;============================================&quot;\r\n                                print &quot;ServerName    :&quot;, ServerName\r\n                                DSN=AdminControl.invoke(entry, &quot;getName()&quot;)\r\n                                print &quot;DataSourceName:&quot;, DSN\r\n                                JNDN=AdminControl.invoke(entry, &quot;getJndiName()&quot;)\r\n                                print &quot;JNDIName      :&quot;, JNDN\r\n                                MaxConn=AdminControl.invoke(entry, &quot;getMaxConnections()&quot;)\r\n                                print &quot;MaxConnections:&quot;, MaxConn\r\n                                print &quot;StatusCode    :&quot;, AdminControl.invoke(entry, &quot;getStatus()&quot;)\r\n                                ##########################\r\n                                fout=open(TMPFILE, 'w')\r\n                                data=AdminControl.invoke(entry, &quot;showPoolContents&quot;)\r\n                                fout.write(data)\r\n                                fout.close()\r\n                                percent=0.8\r\n                                threshold=int(MaxConn)*float(percent)\r\n                                print &quot;Threshold     :&quot;, threshold\r\n                                try:\r\n                                        fin=open(TMPFILE)\r\n                                        filedata=fin.readlines()\r\n                                        for line in filedata:\r\n                                                #match 1= re.search(r'\\:\\s\\d', line)\r\n                                                #matchstr=re.search(r'Total number of connection in shared pool', line)\r\n                                                matchstr=re.search('(.....\\s......\\s..\\s..........\\s..\\s......\\s....):(\\s\\d)', line)\r\n                                                if matchstr:\r\n                                                        #current_conn=match.group().split(&quot;:&quot;)[1].strip(&quot; &quot;)\r\n                                                        current_conn=matchstr.group(2)\r\n                                                        if int(current_conn) &gt;= int(threshold):\r\n                                                                ALERT='YES'\r\n                                                                ALERTSTRING='Connection Pool %r reached 80 percent of its max_limit on Server %r'%(DSN,ServerName)\r\n                                                                print ALERTSTRING\r\n                                                        else:\r\n                                                                ALERT='NO'\r\n                                                        break\r\n\r\n                                                else:\r\n                                                        current_conn=0\r\n\r\n\r\n                                        fin.close()\r\n                                        print &quot;Currently used:&quot;, current_conn\r\n                                        print &quot;============================================&quot;\r\n                                except IOError:\r\n                                        print  'Something went Wrong.'<\/pre>\n<p>&nbsp;<\/p>\n<\/div>\n<p><span style=\"color: #000000;\"><strong>how to execute this script?<\/strong><\/span><br \/>\n<span style=\"color: #000000;\"><i><br \/>\n<\/i>Save the above code with &#8220;.py&#8221; extension and run it <\/span>with <span style=\"color: #000000;\"><code>wsadmin<\/code><\/span>.<span style=\"color: #000000;\">For example<\/span><\/p>\n<div>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">wsadmin.sh -lang jython -username &lt;username&gt; -password &lt;password&gt; -lang jython -f &lt;saved py file name&gt;<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>Hope it helps<\/p>\n<p>For more exclusive posts like this in web and middleware technologies. Leave your\u00a0name and mail id. Trust us, we hate spam like you do.<\/p>\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577100\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"0\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"1342\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577100\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577100\"><\/span>\n\t\t<\/div>\n\n\t\t\n<p>Thanks<\/p>\n<p>A K S A R A V<\/p>\n<p>Write to us at\u00a0<a href=\"mailto:aksarav@mwinventory.in\">aksarav@mwinventory.in<\/a><\/p>\n<p><i class=\"fa fa-facebook\"><\/i>\u00a0Follow us on\u00a0<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a>\u00a0or\u00a0<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a><\/p>\n<p><i class=\"fa fa-whatsapp\"><\/i>\u00a0To Join our\u00a0Community in\u00a0<a href=\"https:\/\/chat.whatsapp.com\/7Wn9PyXGw7GI3MMmFux6kU\">Whatsapp \u2013 Click here\u00a0<\/a><\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this post we are providing WebSphere\u00a0connection pool monitoring &#8211; wsadmin script.\u00a0 Its written in Python\/Jython\u00a0and can be used for WebSphere application server 6+ versions How the script is designed It will find all the running server instances registered with Websphere Application server DMGR (cell) and take a list of[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":1343,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[92,4],"tags":[93,94],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Websphere Connection Pool Monitoring - wsadmin script<\/title>\n<meta name=\"description\" content=\"Websphere application server (or) Websphere connection pool monitoring - wsadmin script. This python(wsadmin) script is designed to automatically monitor connection pool and print the alert message if the 80% of connection limit reached. This script should be run with WebSphere (or) WAS&#039;s wsadmin tool.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Websphere Connection Pool Monitoring - wsadmin script\" \/>\n<meta property=\"og:description\" content=\"Websphere application server (or) Websphere connection pool monitoring - wsadmin script. This python(wsadmin) script is designed to automatically monitor connection pool and print the alert message if the 80% of connection limit reached. This script should be run with WebSphere (or) WAS&#039;s wsadmin tool.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2018-06-12T02:00:35+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2018-07-20T19:35:30+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/06\/websphere-application-server.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"450\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2018\/06\/websphere-application-server.jpg\",\"width\":600,\"height\":450},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/\",\"name\":\"Websphere Connection Pool Monitoring - wsadmin script\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#primaryimage\"},\"datePublished\":\"2018-06-12T02:00:35+00:00\",\"dateModified\":\"2018-07-20T19:35:30+00:00\",\"description\":\"Websphere application server (or) Websphere connection pool monitoring - wsadmin script. This python(wsadmin) script is designed to automatically monitor connection pool and print the alert message if the 80% of connection limit reached. This script should be run with WebSphere (or) WAS's wsadmin tool.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Websphere Connection Pool Monitoring &#8211; wsadmin script\",\"datePublished\":\"2018-06-12T02:00:35+00:00\",\"dateModified\":\"2018-07-20T19:35:30+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#primaryimage\"},\"keywords\":\"WAS Connection pool monitoring,Websphere application server monitoring scripts\",\"articleSection\":\"Websphere,wsadmin scripts\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/websphere-connection-pool-monitoring-wsadmin-python-scrip\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/1342"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=1342"}],"version-history":[{"count":2,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/1342\/revisions"}],"predecessor-version":[{"id":1345,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/1342\/revisions\/1345"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/1343"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=1342"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=1342"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=1342"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}