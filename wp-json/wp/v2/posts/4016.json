{"id":4016,"date":"2019-07-14T13:32:41","date_gmt":"2019-07-14T08:02:41","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=4016"},"modified":"2022-06-06T00:31:47","modified_gmt":"2022-06-05T19:01:47","slug":"docker-reverse-proxy-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/","title":{"rendered":"Docker Reverse Proxy &#8211; Docker httpd apache example"},"content":{"rendered":"<h2>Introduction:<\/h2>\n<p>In this post, we are going to see how to use docker httpd image and extend it to suit our needs and run the Apache web server as a Docker container.<\/p>\n<p>We are also going to implement a docker reverse proxy as an additional example<\/p>\n<p>Since we have targeted this post for Docker and Apache Installation and Configuration. We did not cover the fundamentals and basic components about Reverse Proxy but you can read,\u00a0 what is reverse proxy and how it is being configured in Traditional Apache Webserver <a href=\"https:\/\/www.middlewareinventory.com\/blog\/apache-reverse-proxy-what-how-to-configure-setup-reverse-proxy\/\">in this link<\/a><\/p>\n<p>I presume now you have understood what is Reverse Proxy and How it is working and configured in Traditonal and Normal Apache HTTPD Server environment.<\/p>\n<p>Now let us move forward to the Docker Apache Image Creation and Reverse Proxy setup.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM.png\"><img class=\"alignnone size-full wp-image-4027\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM.png\" alt=\"Docker HTTPD\" width=\"1225\" height=\"716\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM.png 1225w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM-300x175.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM-768x449.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM-1024x599.png 1024w\" sizes=\"(max-width: 1225px) 100vw, 1225px\" \/><\/a><\/p>\n<h2>Steps Index:<\/h2>\n<ol>\n<li>Choose the HTTPD Image from DockerHub (or) Optionally Download the image to Local<\/li>\n<li>Write Dockerfile and Use the Standard HTTPD image then Expand and Customize it.\n<ol style=\"list-style-type: lower-alpha;\">\n<li>Create a Local httpd.conf file and Enable the modules you need<\/li>\n<\/ol>\n<\/li>\n<li>Build and Create an Image using the Dockerfile<\/li>\n<li>Create Configuration and HTML files to feed the Container\n<ol style=\"list-style-type: lower-alpha;\">\n<li>\u00a0Create a WorkSpace<\/li>\n<li>\u00a0Create two Directories named <code>sites<\/code> and <code>htmlfiles<\/code> to have conf and html files respectively<\/li>\n<li>\u00a0Create Virtual Host configuration file\u00a0 <code>*.conf<\/code>\u00a0under <code>sites<\/code> directory<\/li>\n<li>\u00a0Create Html files under <code>htmlfiles<\/code> directory<\/li>\n<\/ol>\n<\/li>\n<li>Start the Container from your Apache HTTPD Docker Image with Necassary Volumes and Port forwarding.<\/li>\n<li>Access the URL and Validate the Reverse Proxy<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h3>Step1: Choose the HTTPD Image from DockerHub (Download the Image)<\/h3>\n<p>Let us choose the Official Apache HTTPD Latest image and also download it to local using <code>docker pull<\/code>\u00a0CLI command<\/p>\n<p>in your master server where you are running the <code>Docker Container Engine (CE)<\/code>\u00a0use the docker pull command like this<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"hljs-attribute\" style=\"color: #ffeead;\">docker<\/span> pull httpd:latest<\/pre>\n<p>In fact, you do not have to explicitely mention the word <code>latest<\/code> here. If you just mention <code>httpd<\/code> the latest image would be picked up.<\/p>\n<p>Note*: You can make sure the image is downloaded or not using the <code>docker images<\/code> CLI command<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step2: Dockerfile to Create a Customized HTTPD Image<\/h3>\n<p>Now there might be a question, Why can&#8217;t we use the httpd image as it is ?<\/p>\n<p>The Answer is, The downloaded standard <code>httpd<\/code> image would have very minimal number of modules enabled.\u00a0 In order to implement reverse proxy we need to enable few modules like <em>mod_proxy<\/em>, <em>mod_slotmem_shm<\/em>, <em>mod_watchdog<\/em> etc.<\/p>\n<p>Also, we need to enable the Support for our customized Virtual Host file and HTML files in the Container before we create it,\u00a0 Later during the startup time we can supply these (conf,html) files to the container<\/p>\n<p>Here is the Docker file with self-descriptive comments for each line.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: #7285b7;\"># The Base Image used to create this Image<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #ffff00;\">FROM<\/span> httpd:latest\r\n\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># Just my name who wrote this file<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #ffff00;\">MAINTAINER<\/span> SaravAK (aksarav@middlewareinventory.com)\r\n\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># to Copy a file named httpd.conf from present working directory to the \/usr\/local\/apache2\/conf inside the container<\/span>\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># I have taken the Standard httpd.conf file and enabled the necassary modules and adding Support for an additional Directory<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #ffff00;\">COPY<\/span> <span class=\"bash\">httpd.conf \/usr\/<span class=\"hljs-built_in\" style=\"color: #ffc58f;\">local<\/span>\/apache2\/conf\/httpd.conf\r\n<\/span>\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># This is the Additional Directory where we are going to keep our Virtualhost configuraiton files<\/span>\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># You can use the image to create N number of different virtual hosts<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #ffff00;\">RUN<\/span> <span class=\"bash\">mkdir -p \/usr\/<span class=\"hljs-built_in\" style=\"color: #ffc58f;\">local<\/span>\/apache2\/conf\/sites\/\r\n<\/span>\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># To tell docker to expose this port<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #ffff00;\">EXPOSE<\/span> <span class=\"hljs-number\" style=\"color: #ffc58f;\">80<\/span>\r\n\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># The Base command, This command should be used to start the container<\/span>\r\n<span class=\"hljs-comment\" style=\"color: #7285b7;\"># Remember, A Container is a Process.As long as the base process (started by base cmd) is live the Container will be ALIVE.<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #ebbbff;\">CMD<\/span> <span class=\"bash\">[<span class=\"hljs-string\" style=\"color: #d1f1a9;\">\"httpd\"<\/span>, <span class=\"hljs-string\" style=\"color: #d1f1a9;\">\"-D\"<\/span>, <span class=\"hljs-string\" style=\"color: #d1f1a9;\">\"FOREGROUND\"<\/span>]<\/span><\/pre>\n<p>&nbsp;<\/p>\n<h3>Step2a:\u00a0 Take the Standard httpd.conf file for apache2 and enable the modules you need<\/h3>\n<p>I have downloaded the standard <code>httpd.conf<\/code> file and enabled the necassary modules like <code>mod_proxy<\/code>, <code>mod_ssl<\/code> etc.<\/p>\n<p><a href=\"https:\/\/github.com\/AKSarav\/Docker-Httpd-Reverseproxy\/blob\/master\/httpd.conf\"><span style=\"color: #ff0000;\"><strong>Download the httpd.conf file from here.<\/strong><\/span><\/a><\/p>\n<p>Copy the Content from the aforementioned link and create a file named <code>httpd.conf<\/code>\u00a0 in the same Directory where the <code>Dockerfile<\/code> is located.<\/p>\n<p>If you look at our customized\u00a0<code>httpd.conf<\/code> we have also added a Directive named <code>IncludeOptional<\/code> to add a directory of configuration where our Virtual Host conf files can be placed.<\/p>\n<p>Any <code>*.conf<\/code> files placed in this directory would be considered by Apache HTTPD<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"hljs-attribute\" style=\"color: #ffeead;\">IncludeOptional<\/span> conf\/sites\/<span class=\"hljs-regexp\" style=\"color: #ff9da4;\">*.conf<\/span><\/pre>\n<p>If you scroll back and look at our Dockerfile once again you can see that we are creating this directory<\/p>\n<p><strong><span class=\"hljs-keyword\" style=\"color: #ebbbff;\">RUN<\/span><\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"> <span class=\"bash\">mkdir -p \/usr\/<span class=\"hljs-built_in\" style=\"color: #ffc58f;\">local<\/span>\/apache2\/conf\/sites\/<\/span><\/pre>\n<p>So this <code>sites<\/code> directory is our Dedicated configuration files location where we can place our Virtual Host conf files<\/p>\n<p>&nbsp;<\/p>\n<h3>Step3: Build and Create an Image from the Dockerfile<\/h3>\n<p>In the Same Directory where our Dockerfile and httpd.conf file is present. Execute the following command<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"hljs-symbol\" style=\"color: #d1f1a9;\">docker<\/span> <span class=\"hljs-keyword\" style=\"color: #ebbbff;\">build <\/span>-t httpd-proxyenabled .<\/pre>\n<p>Now the Image is ready and available in your Local Images Repository\u00a0 and the image name is\u00a0\u00a0<code>httpd-proxyenabled<\/code><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step4:\u00a0 Create the Configuration files and Directories( Virtual Host and Html files)<\/h3>\n<p>Now we are going to create our Virtual Host (A WebSite) configuration file and it will be loaded into the container when it is being started.<\/p>\n<p>It is not recommended to Share a Single file between Container and the Local Server. You always can share a Directory as a volume between a Container and a Host.<\/p>\n<p>So we are going to create two new directories to keep our HTML and Conf files respectively and we are going to mount these directories as a Volume inside the container.<\/p>\n<p>We will see how to do that in a minute.<\/p>\n<h3><strong>Step 4a: Create a WorkSpace<\/strong><\/h3>\n<p>Now choose some directory in your local system ( Mac\/Windows) where Docker Container Engine is running and Let us call it as a workspace in my case it is\u00a0\u00a0<strong><span class=\"s1\">\/apps\/docker\/apacheconf<\/span><\/strong><\/p>\n<p>&nbsp;<\/p>\n<h3><strong>Step 4b: Create two Directories to place html and conf files<\/strong><\/h3>\n<p>Create two Directories under the workspace to keep the virtualhost conf and html files.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\">mkdir -p \/apps\/docker\/apacheconf\/sites\r\nmkdir -p \/apps\/docker\/apacheconf\/htmlfiles<\/pre>\n<h3><strong>Step 4c:\u00a0 Create Virtual Host configuration file under sites directory<\/strong><\/h3>\n<p>Now go inside the sites directory and Create a Virtualhost configuration file ( A WebSite). If you have a Virtualhost file of your choice please use that or if you are following along, Please copy the following content and Save it as <code>techolaf.conf<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"> <span class=\"hljs-section\" style=\"color: #bbdaff;\">&lt;VirtualHost *:80&gt;<\/span>\r\n\t\r\n\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\"><span class=\"hljs-nomarkup\">ServerName<\/span><\/span> techolaf.com\r\n\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\">ServerAlias<\/span> www.techolaf.com\r\n\r\n\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\">ServerAdmin<\/span> admin@techolaf.com\r\n\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\"><span class=\"hljs-nomarkup\">DocumentRoot<\/span><\/span> \/usr\/local\/apache2\/techolaf\r\n\t\r\n\t<span class=\"hljs-section\" style=\"color: #bbdaff;\">&lt;Directory \"\/usr\/local\/apache2\/techolaf\"&gt;<\/span>\r\n\t\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\"><span class=\"hljs-nomarkup\">Order<\/span><\/span> allow,deny\r\n\t\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\">AllowOverride<\/span> <span class=\"hljs-literal\" style=\"color: #ffc58f;\">All<\/span>\r\n\t\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\"><span class=\"hljs-nomarkup\">Allow<\/span><\/span> from <span class=\"hljs-literal\" style=\"color: #ffc58f;\">all<\/span>\r\n\t\t<span class=\"hljs-attribute\" style=\"color: #ffeead;\">Require<\/span> <span class=\"hljs-literal\" style=\"color: #ffc58f;\">all<\/span> granted\r\n\t<span class=\"hljs-section\" style=\"color: #bbdaff;\">&lt;\/Directory&gt;<\/span>\r\n\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\">#Load the SSL module that is needed to terminate SSL on Apache<\/span>\r\n    <span class=\"hljs-attribute\" style=\"color: #ffeead;\"><span class=\"hljs-nomarkup\">LoadModule<\/span><\/span> ssl_module modules\/mod_ssl.so\r\n\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\">#This directive toggles the usage of the SSL\/TLS Protocol Engine for proxy. Without this you cannot use HTTPS URL as your Origin Server<\/span>\r\n    <span class=\"hljs-attribute\" style=\"color: #ffeead;\">SSLProxyEngine<\/span> <span class=\"hljs-literal\" style=\"color: #ffc58f;\">on<\/span>\r\n\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\"># To prevent SSL Offloading<\/span>\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\"># Set the X-Forwarded-Proto to be https for your Origin Server to understand that this request is made over HTTPS #https:\/\/httpd.apache.org\/docs\/2.2\/mod\/mod_headers.html#requestheader.<\/span>\r\n    <span class=\"hljs-attribute\" style=\"color: #ffeead;\">RequestHeader<\/span> set X-Forwarded-Proto \u201chttps\u201d\r\n    <span class=\"hljs-attribute\" style=\"color: #ffeead;\">RequestHeader<\/span> set X-Forwarded-Port \u201c443\u201d\t\r\n\r\n<span class=\"hljs-attribute\" style=\"color: #ffeead;\">    ErrorLog<\/span> logs\/techolaf-error.log\r\n<span class=\"hljs-attribute\" style=\"color: #ffeead;\">    CustomLog<\/span> logs\/techolaf-access.log combined\r\n\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\"># The ProxyPass directive specifies the mapping of incoming requests to the backend server (or a cluster of servers known as a Balancer group).<\/span>\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\"># It proxies the requests only with matching URI \u201c\/blog\u201d<\/span>\r\n\r\n    <span class=\"hljs-attribute\" style=\"color: #ffeead;\">ProxyPass<\/span> \/mwi https:\/\/www.middlewareinventory.com\r\n\r\n    <span class=\"hljs-comment\" style=\"color: #7285b7;\">#To ensure that and Location: headers generated from the backend are modified to point to the reverse proxy, instead of back to itself, #the ProxyPassReverse directive is most often required:<\/span>\r\n\r\n    <span class=\"hljs-attribute\" style=\"color: #ffeead;\">ProxyPassReverse<\/span> \/mwi https:\/\/www.middlewareinventory.com\r\n\t\r\n<span class=\"hljs-section\" style=\"color: #bbdaff;\">&lt;\/VirtualHost&gt;<\/span><\/pre>\n<p>&nbsp;<\/p>\n<h3><strong>Step 4d:\u00a0 Create the html file under htmlfiles directory<\/strong><\/h3>\n<p>Save the following content into a file named index.html under the htmlfiles directory<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;<span class=\"hljs-name\" style=\"color: #ff9da4;\">html<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;<span class=\"hljs-name\" style=\"color: #ff9da4;\">head<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;<span class=\"hljs-name\" style=\"color: #ff9da4;\">title<\/span>&gt;<\/span>TechOlaf Home Page<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;\/<span class=\"hljs-name\" style=\"color: #ff9da4;\">title<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;\/<span class=\"hljs-name\" style=\"color: #ff9da4;\">head<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;<span class=\"hljs-name\" style=\"color: #ff9da4;\">body<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;<span class=\"hljs-name\" style=\"color: #ff9da4;\">h2<\/span>&gt;<\/span> Welcome to TechOlaf <span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;\/<span class=\"hljs-name\" style=\"color: #ff9da4;\">h2<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;\/<span class=\"hljs-name\" style=\"color: #ff9da4;\">body<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\" style=\"color: #ff9da4;\">&lt;\/<span class=\"hljs-name\" style=\"color: #ff9da4;\">html<\/span>&gt;<\/span><\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step5:\u00a0 Start the docker httpd Container with Volumes and Port Forwarding<\/h3>\n<p><strong>Volumes<\/strong> &#8211; is a Docker terminology, It helps you Mount the local file system [directory] inside the container as a volume<\/p>\n<p><strong>PortForwarding<\/strong> &#8211; Forward the Container Port to host<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; background: #002451; color: #ffffff; padding: 0.5em;\"><span class=\"xml\"><span style=\"color: #ffcc00;\">docker<\/span> container run \\\r\n<span style=\"color: #ccffcc;\">--publish<\/span> 90:80 \\\r\n<span style=\"color: #ccffcc;\">-d &#8211; name<\/span> apacheserver \\\r\n<span style=\"color: #ccffcc;\">-v<\/span> \/apps\/docker\/apacheconf\/sites:\/usr\/local\/apache2\/conf\/sites \\\r\n<span style=\"color: #ccffcc;\">-v<\/span> \/apps\/docker\/apacheconf\/htmlfiles:\/usr\/local\/apache2\/techolaf \\\r\n<span style=\"color: #ffcc00;\">httpd-proxyenabled<\/span><\/span><\/pre>\n<p>Here<\/p>\n<p><code>--publish<\/code> :\u00a0 to forward the container port 80 to Mac\/Windows host&#8217;s port 90<\/p>\n<p><code>-d<\/code> : to run the container in background, Detached mode<\/p>\n<p><code>--name<\/code>: Name the container as apache server<\/p>\n<p><code>-v<\/code> :\u00a0 The Volume Mapping. Mounting the Host&#8217;s\u00a0<span class=\"xml\"><code>\/apps\/docker\/apacheconf\/sites<\/code> as\u00a0<code>\/usr\/local\/apache2\/conf\/sites<\/code> inside the container<\/span><\/p>\n<p>Now you can understand, that the directories we have created in local workspace are mounted inside the container and being used<\/p>\n<p>In fact the Html and the configuration files we have placed in <code>sites<\/code> and <code>htmlfiles<\/code> directory on the local are now being used by the container and our website <code>techolaf.com<\/code> is ready<\/p>\n<blockquote><p>Note*: Before validating the Site. You need to be aware the ServerName specified in the configuration file is techolaf.com and Apache would look for this name on the Address bar when you try to reach the website.<\/p>\n<p>In enterprise these things are managed with internal DNS servers. For testing you can use your \/etc\/hosts file<\/p>\n<p>Make an entry in your <strong>\/etc\/hosts<\/strong> file like shown below<\/p>\n<p><strong>127.0.0.1\u00a0 \u00a0www.techolaf.com<\/strong><\/p>\n<p>Now you are all set!.<\/p><\/blockquote>\n<h3>Step6: Validate the Reverse Proxy<\/h3>\n<p>I hope you have your DNS records corrected.<\/p>\n<p>With that assumption, let us go and hit the url<\/p>\n<p><code>http:\/\/www.techolaf.com:90\/<\/code> and\u00a0<code>http:\/\/www.techolaf.com:90\/mwi<\/code><\/p>\n<blockquote><p>The Configured and Desired result is when you try with no URI (or) the Home URL you should get the welcome html page you have created and when you are using the URI <code>mwi<\/code> it should load the content of our <code>www.middlewareinventory.com<\/code> website home page.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p><strong>The Home Page [ Welcome html ]<\/strong><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.09.18-AM.png\"><img class=\"alignnone size-full wp-image-4023\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.09.18-AM.png\" alt=\"Docker HTTPD\" width=\"744\" height=\"272\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.09.18-AM.png 744w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.09.18-AM-300x110.png 300w\" sizes=\"(max-width: 744px) 100vw, 744px\" \/><\/a><\/p>\n<p><strong>The Reverse proxy Page with URI<\/strong><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.10.47-AM.png\"><img class=\"alignnone size-full wp-image-4024\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.10.47-AM.png\" alt=\"Docker Apache Reverse proxy\" width=\"997\" height=\"622\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.10.47-AM.png 997w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.10.47-AM-300x187.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-3.10.47-AM-768x479.png 768w\" sizes=\"(max-width: 997px) 100vw, 997px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p><strong>Mission Accomplished!<\/strong><\/p>\n<p>&nbsp;<\/p>\n<p>I know there are lot of steps in here. But if you follow along you can get it done very easily.<\/p>\n<p>Try it and let me know if you get any issues and feel free to comment for any help or support<\/p>\n<p>Rate this article [ratings]<\/p>\n<p>&nbsp;<\/p>\n<p>Cheers,<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577206\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"4016\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577206\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577206\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Introduction: In this post, we are going to see how to use docker httpd image and extend it to suit our needs and run the Apache web server as a Docker container. We are also going to implement a docker reverse proxy as an additional example Since we have targeted[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":4027,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[10,152],"tags":[300,252,301,302],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Docker Reverse Proxy - Docker httpd apache example<\/title>\n<meta name=\"description\" content=\"Docker HTTPD container creation and configuration. Create a Docker HTTPD Container and configure Docker Reverse proxy with Apache HTTPD web server. Docker Apache Dockerfile example. How to Install Apache HTTPD webserver in docker container and how to setup a Reverse Proxy in Apache HTTPD Docker Container. Example\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Docker Reverse Proxy - Docker httpd apache example\" \/>\n<meta property=\"og:description\" content=\"Docker HTTPD container creation and configuration. Create a Docker HTTPD Container and configure Docker Reverse proxy with Apache HTTPD web server. Docker Apache Dockerfile example. How to Install Apache HTTPD webserver in docker container and how to setup a Reverse Proxy in Apache HTTPD Docker Container. Example\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-07-14T08:02:41+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-06-05T19:01:47+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1225\" \/>\n\t<meta property=\"og:image:height\" content=\"716\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/07\/Screenshot-2019-07-14-at-1.14.17-PM.png\",\"width\":1225,\"height\":716,\"caption\":\"Docker HTTPD\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/\",\"name\":\"Docker Reverse Proxy - Docker httpd apache example\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#primaryimage\"},\"datePublished\":\"2019-07-14T08:02:41+00:00\",\"dateModified\":\"2022-06-05T19:01:47+00:00\",\"description\":\"Docker HTTPD container creation and configuration. Create a Docker HTTPD Container and configure Docker Reverse proxy with Apache HTTPD web server. Docker Apache Dockerfile example. How to Install Apache HTTPD webserver in docker container and how to setup a Reverse Proxy in Apache HTTPD Docker Container. Example\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Docker Reverse Proxy &#8211; Docker httpd apache example\",\"datePublished\":\"2019-07-14T08:02:41+00:00\",\"dateModified\":\"2022-06-05T19:01:47+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#primaryimage\"},\"keywords\":\"Apache Docker,docker apache example,Docker HTTPD,Docker Reverse Proxy\",\"articleSection\":\"Apache,Docker\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/docker-reverse-proxy-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4016"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=4016"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4016\/revisions"}],"predecessor-version":[{"id":8597,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4016\/revisions\/8597"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/4027"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=4016"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=4016"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=4016"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}