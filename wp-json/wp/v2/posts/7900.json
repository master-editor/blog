{"id":7900,"date":"2022-01-12T01:32:39","date_gmt":"2022-01-11T20:02:39","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=7900"},"modified":"2022-01-13T09:13:14","modified_gmt":"2022-01-13T03:43:14","slug":"terraform-remote-state-datasource-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/","title":{"rendered":"Terraform remote state datasource Example &#8211; GCP | Devops Junction"},"content":{"rendered":"<p>In this article, we are going to see what is terraform data source is and how it helps in Infrastructure as code<\/p>\n<p>Before we begin, I want you to think of this requirement.<\/p>\n<blockquote><p>&#8220;Let&#8217;s say you have to create two similar infrastructure modules in two different regions of any of your favourite cloud environments. The first infra module is already created by the X team and you need to have the same configuration in your module.&#8221;<\/p><\/blockquote>\n<p>First Approach to this requirement is to go to that X team and ask for source files.<\/p>\n<p>Let&#8217;s assume they are very protective about their source files and they say we cannot give you a whole set of files, but we can help you with our workspace name and outputs.<\/p>\n<p>Now with this very minimal data how I can assure that my infra will be similar to the X team.?<\/p>\n<p>that&#8217;s where\u00a0 <code>terraform datasource<\/code> comes into the picture.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state.jpg\"><img class=\"post-img alignleft wp-image-7940 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state.jpg\" alt=\"Terraform_remote_state datasource\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state.jpg 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state-300x213.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state-1024x726.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state-768x545.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state-1536x1090.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state-90x65.jpg 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Terraform DataSource<\/h2>\n<p>Data sources enable Terraform to use the information determined outside of Terraform, represented by different separate Terraform states or code, or changed by functions.<\/p>\n<p>In other words, Cloud infrastructure, applications, and services transmit data, which Terraform can query and perform managing data sources.<\/p>\n<p>For example, terraform manages data sources to retrieve information from cloud provider APIs, such as availability zone IDs or data about the piece of your infrastructure through the outputs of different Terraform states.<\/p>\n<p>In this article, I am going to discuss how we can transfer data from one workspace to another workspace using terraform remote state data sources.<\/p>\n<p>&nbsp;<\/p>\n<div class=\"ez-toc-title-container\">\n<h2 class=\"g-type-display-3\">Prerequisites<\/h2>\n<ul>\n<li class=\"g-type-long-body\">\n<p class=\"g-type-long-body\"><strong>A Google Cloud Platform account.<\/strong>\u00a0If you do not have a GCP account,\u00a0<a href=\"https:\/\/console.cloud.google.com\/freetrial\/\">create one now<\/a>. This tutorial can be completed using only the services included in the GCP\u00a0<a href=\"https:\/\/cloud.google.com\/free\/\">free tier<\/a>.<\/p>\n<\/li>\n<li class=\"g-type-long-body\">\n<p class=\"g-type-long-body\"><a href=\"https:\/\/learn.hashicorp.com\/tutorials\/terraform\/install-cli\">Terraform 0.15.3+<\/a>\u00a0installed locally.<\/p>\n<\/li>\n<\/ul>\n<p>Next, we need to set up a GCP<\/p>\n<p class=\"g-type-long-body\">After creating a GCP account, create the following resources to enable Terraform to provision infrastructure:<\/p>\n<ul>\n<li class=\"g-type-long-body\">\n<p class=\"g-type-long-body\"><strong>A GCP Project<\/strong>: GCP organizes resources into projects.\u00a0<a href=\"https:\/\/console.cloud.google.com\/projectcreate\">Create one now<\/a>\u00a0in the GCP console and make note of the project ID. You can see a list of your projects in the\u00a0<a href=\"https:\/\/console.cloud.google.com\/cloud-resource-manager\">cloud resource manager<\/a>. In my case, I have created a project called <code>terraform-project-337116<\/code><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-projects.png\"><img class=\"post-img aligncenter wp-image-7903 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-projects.png\" alt=\"\" width=\"1372\" height=\"682\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-projects.png 1372w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-projects-300x149.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-projects-1024x509.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-projects-768x382.png 768w\" sizes=\"(max-width: 1372px) 100vw, 1372px\" \/><\/a><\/p>\n<\/li>\n<li class=\"g-type-long-body\">\n<p class=\"g-type-long-body\"><strong>Google Compute Engine<\/strong>: Enable Google Compute Engine for your project\u00a0<a href=\"https:\/\/console.developers.google.com\/apis\/library\/compute.googleapis.com\">in the GCP console<\/a>. Make sure to select the project you are using to follow this tutorial and click the &#8220;Enable&#8221; button.<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api.png\"><img class=\"post-img aligncenter wp-image-7904 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api.png\" alt=\"\" width=\"1750\" height=\"810\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api.png 1750w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api-300x139.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api-1024x474.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api-768x355.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-enable-api-1536x711.png 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\" \/><\/a><\/p>\n<\/li>\n<li class=\"g-type-long-body\">\n<p class=\"g-type-long-body\"><strong>A GCP service account key<\/strong>:\u00a0<a href=\"https:\/\/console.cloud.google.com\/apis\/credentials\/serviceaccountkey\">Create a service account key<\/a>\u00a0to enable Terraform to access your GCP account. When creating the key, use the following settings:<\/p>\n<ul>\n<li class=\"g-type-long-body\">Select the project you created in the previous step.<\/li>\n<li class=\"g-type-long-body\">Click &#8220;Create Service Account&#8221;.<\/li>\n<li class=\"g-type-long-body\">Give it any name you like and click &#8220;Create&#8221;.<\/li>\n<li class=\"g-type-long-body\">For the Role, choose &#8220;Project -&gt; Editor&#8221;, then click &#8220;Continue&#8221;.<\/li>\n<li class=\"g-type-long-body\">Skip granting additional users access, and click &#8220;Done&#8221;.<\/li>\n<\/ul>\n<p class=\"g-type-long-body\">After you create your service account, download your service account key.<\/p>\n<ul>\n<li class=\"g-type-long-body\">Select your service account from the list.<\/li>\n<li class=\"g-type-long-body\">Select the &#8220;Keys&#8221; tab.<\/li>\n<li class=\"g-type-long-body\">In the drop-down menu, select &#8220;Create new key&#8221;.<\/li>\n<li class=\"g-type-long-body\">Leave the &#8220;Key Type&#8221; as JSON.<\/li>\n<li class=\"g-type-long-body\">Click &#8220;Create&#8221; to create the key and save the key file to your system.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Now your GCP is completely set up to integrate with terraform<\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<h2>Creating The First Environment with Terraform<\/h2>\n<p>&nbsp;<\/p>\n<h3>Creating necessary Files and Terraform workspace<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Create a directory with some valid name (Eg: <code>gcp-terraform-datasource-intg<\/code>) and get into the same directory. Along with this create terraform workspace with the name &#8216;development&#8217; and create below mentioned .tf files in the same workspace<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">mkdir gcp-terraform-datasource-intg \r\ncd gcp-terraform-datasource-intg\r\nterraform workspace new development\r\nterraform workspace select development<\/pre>\n<p>Next, create a couple of .tf files.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">touch main.tf \r\ntouch variables.tf \r\ntouch provider.tf \r\ntouch network.tf \r\ntouch outputs.tf<\/pre>\n<p>Copy service account key json file into this directory (This file you need to download into your local)<\/p>\n<\/div>\n<h3><\/h3>\n<h3>Creating Template with Shell script to provision our machine<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Create a folder with the name &#8216;template&#8217; and create a .tpl file inside the template directory (eg: Here, I have created a file with the name <code>install_flask.tpl<\/code>)<\/p>\n<p>This <code>install_flask.tpl<\/code> holds content for <code>metadata-script<\/code>, which will get executed when our GCP instance get spawned up via terraform scripts<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">cd gcp-terraform-datasource-intg \r\nmkdir template \r\ncd template \r\ntouch install_flask.tpl<\/pre>\n<p>&nbsp;<\/p>\n<p>Copy below contents into .tpl file<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">#!\/bin\/bash\r\nsudo apt-get update -y\r\nsudo apt-get install -yq build-essential python-pip rsync\r\nsudo apt-get install wget -y\r\npip install flask\r\nsudo touch \/tmp\/app.py\r\nsudo mkdir \/tmp\/templates\r\nsudo chmod 777 \/tmp\/templates\r\nsudo touch \/tmp\/templates\/index.html\r\nsudo cat &lt;&lt; \"EOF\" &gt; \/tmp\/templates\/index.html\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;style&gt;\r\nbody {\r\n  font-size: 100px;\r\n}\r\np {text-align: center;}\r\n&lt;\/style&gt;\r\n&lt;body&gt;\r\n\r\n&lt;span style='font-size:500px;text-align:center'&gt;\ud83c\udf29&lt;\/span&gt;\r\n&lt;p&gt;Welcome to the Cloud \ud83d\ude03&lt;\/p&gt;\r\n\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;\r\nEOF\r\nsudo chmod 777 \/tmp\/templates\/index.html\r\nsudo cat &lt;&lt; \"EOF\" &gt; \/tmp\/app.py\r\nfrom flask import Flask, render_template\r\napp = Flask(__name__)\r\n\r\n@app.route('\/')\r\ndef index():\r\n   return render_template('index.html')\r\n\r\napp.run(host='0.0.0.0')\r\nEOF\r\nsudo chmod 777 \/tmp\/app.py\r\nsudo python \/tmp\/app.py<\/pre>\n<p>&nbsp;<\/p>\n<p>Basically, the above script will install\/set up a python flask in the GCP instance and when we try to access it, it will give output as &#8216;Welcome to the cloud&#8217; with nice emojis.<\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<h3>Defining Variables Needed<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Now copy the below content into <code>variables.tf<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">variable \"project\" {\r\n  default = \"terraform-project-337116\"\r\n}\r\n\r\n\r\nvariable \"region\" {\r\n  default = \"us-central1\"\r\n}\r\n\r\n\r\nvariable \"image_family\" {\r\n  default = \"debian-9\"\r\n}\r\n\r\nvariable \"image_project\" {\r\n  default = \"debian-cloud\"\r\n}\r\n\r\nvariable \"vpc_name\" {\r\n  default = \"terraform-flask-vpcapp-network\"\r\n}\r\n\r\nvariable \"zone\" {\r\n  default = \"us-central1-c\"\r\n}\r\n\r\nvariable \"machine_type\" {\r\n  default = \"f1-micro\"\r\n}\r\n\r\nvariable \"firewall_name\" {\r\n  default = \"fwapp\"\r\n}\r\n<\/pre>\n<p>Give attention to <code>region<\/code>, here we are creating instances in the us-central1 region.<\/p>\n<p>The rest of the fields are self-explanatory, we are assigning variables and we use these variables in the rest of the .tf files.<\/p>\n<blockquote><p>Note &#8211; Update project variable with your project-id<\/p><\/blockquote>\n<\/div>\n<p>&nbsp;<\/p>\n<h3>Defining Providers<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Next copy below content into <code>provider.tf<\/code> file<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">terraform {\r\n  required_providers {\r\n    google = {\r\n      source  = \"hashicorp\/google\"\r\n      version = \"3.5.0\"\r\n    }\r\n  }\r\n}\r\n\r\nprovider \"google\" {\r\n  credentials = file(\"terraform-gcp.json\")\r\n  project     = var.project\r\n  region      = var.region\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<h3>Defining Networks<\/h3>\n<p>Next copy below contents into <code>network.tf<\/code> file<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">resource \"google_compute_network\" \"vpc_network\" {\r\n  project                 = var.project\r\n  name                    = var.vpc_name\r\n  auto_create_subnetworks = true\r\n}\r\n\r\nresource \"google_compute_firewall\" \"fw\" {\r\n  name    = var.firewall_name\r\n  network = google_compute_network.vpc_network.name\r\n\r\n  allow {\r\n    protocol = \"tcp\"\r\n    ports    = [\"5000\"]\r\n  }\r\n}<\/pre>\n<p>Here we are creating virtual private cloud resources and assigning firewall rules in that VPC to allow 5000 port.<\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<h3>The main Terraform Manifest configuration file<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Next copy below contents into <code>main.tf<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">data \"google_compute_image\" \"flask_image\" {\r\n  family  = var.image_family\r\n  project = var.image_project\r\n}\r\n\r\ndata \"template_file\" \"webapp\" {\r\n   template = file(\"${path.module}\/template\/install_flask.tpl\")\r\n }\r\n\r\n\r\n\/\/ Terraform plugin for creating random ids\r\nresource \"random_id\" \"instance_id\" {\r\n  byte_length = 8\r\n}\r\n\r\n\r\n\/\/ A single Compute Engine instance\r\nresource \"google_compute_instance\" \"vm_instance\" {\r\n  name         = \"flask-vm-${random_id.instance_id.hex}\"\r\n  machine_type = var.machine_type\r\n  zone         = var.zone\r\n\r\n  boot_disk {\r\n    initialize_params {\r\n      image = data.google_compute_image.flask_image.self_link\r\n    }\r\n  }\r\n\r\nmetadata_startup_script = data.template_file.webapp.rendered\r\n\r\n\r\n  network_interface {\r\n    network = google_compute_network.vpc_network.name\r\n\r\n    access_config {\r\n      \/\/ Include this section to give the VM an external ip address\r\n    }\r\n  }\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<\/div>\n<h3>Decoding the blocks in main.tf<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Let&#8217;s see the functionality of each block of main.tf file.<\/p>\n<p>In this <code>data<\/code> block we are creating a local data source to get google_compute_image.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">data \"google_compute_image\" \"flask_image\" {\r\n  family  = var.image_family\r\n  project = var.image_project\r\n}\r\n<\/pre>\n<p>Reference: <a href=\"https:\/\/registry.terraform.io\/providers\/hashicorp\/google\/latest\/docs\/resources\/compute_image\">https:\/\/registry.terraform.io\/providers\/hashicorp\/google\/latest\/docs\/resources\/compute_image<\/a><\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<p>Here in this <code>data<\/code> block, we are creating <code>template_file<\/code> data source to read <code>install_flask.tpl<\/code> file from the relevant path.<\/p>\n<p>In further steps, this data source is provided as input to the metadata script.<\/p>\n<div class=\"ez-toc-title-container\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">data \"template_file\" \"webapp\" {\r\n   template = file(\"${path.module}\/template\/install_flask.tpl\")\r\n }<\/pre>\n<p>Reference: <a href=\"https:\/\/registry.terraform.io\/providers\/hashicorp\/template\/latest\/docs\/data-sources\/file\">https:\/\/registry.terraform.io\/providers\/hashicorp\/template\/latest\/docs\/data-sources\/file<\/a><\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<p>The following <code>resource<\/code> block contains code to generate random IDs which gets appended to the instance name.<\/p>\n<div class=\"ez-toc-title-container\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">\/\/ Terraform plugin for creating random ids\r\nresource \"random_id\" \"instance_id\" {\r\n  byte_length = 8\r\n}<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>In the following <code>resource<\/code> block, we are creating a single instance in <code>us-central1<\/code> the region with boot_disk attached to same.<\/p>\n<div class=\"ez-toc-title-container\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">\/\/ A single Compute Engine instance\r\nresource \"google_compute_instance\" \"vm_instance\" {\r\n  name         = \"flask-vm-${random_id.instance_id.hex}\"\r\n  machine_type = var.machine_type\r\n  zone         = var.zone\r\n\r\n  boot_disk {\r\n    initialize_params {\r\n      image = data.google_compute_image.flask_image.self_link\r\n    }\r\n  }\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>In the following line of code,<\/p>\n<p>we pass the .tpl file we have created earlier <code>data.template_file.webapp.rendered<\/code> as input to the metadata script.<\/p>\n<p>This metadata script will install\/configure the python flask in the GCP instance.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">metadata_startup_script = data.template_file.webapp.rendered<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>Here we are configuring <code>network_interface<\/code> for vpc and using <code>access_config<\/code> block we are assigning VM an external ip address<\/p>\n<div class=\"ez-toc-title-container\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\">network_interface {\r\n    network = google_compute_network.vpc_network.name\r\n\r\n    access_config {\r\n      \/\/ Include this section to give the VM an external ip address\r\n    }<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<h3>Defining the Outputs<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Next copy the following content into <code>outputs.tf<\/code><\/p>\n<p>Here we are saving <code>ip-address<\/code> and script content (as sensitive content).<\/p>\n<p>When we use, terraform will not print output results of the script in the console. this is a nice way to hide secret data during the execution<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">output \"ip\" {\r\n  value = google_compute_instance.vm_instance.network_interface.0.access_config.0.nat_ip\r\n}\r\n\r\noutput \"script\"{\r\n  value = google_compute_instance.vm_instance.metadata_startup_script\r\n  sensitive = true\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>Now as all Terraform manifest tf files are in place, we are ready to execute terraform commands.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">terraform init\r\nterraform validate\r\nterraform plan\r\nterraform apply &#8211; auto-approve<\/pre>\n<p>Here we are using <code>--auto-approve<\/code> with apply, which would take care of the usual prompt before making any change.<\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<h3>Validating the Output and Accessing the Application<\/h3>\n<div class=\"ez-toc-title-container\">\n<p>Once terraform creates and configure infrastructure in a google cloud environment, you should see outputs in your console similar to below<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"bootstrap4\">Changes to Outputs:\r\n  + ip     = (known after apply)\r\n  + script = (sensitive value)\r\nrandom_id.instance_id: Creating...\r\nrandom_id.instance_id: Creation complete after 0s [id=uM9XuDmrGRQ]\r\ngoogle_compute_network.vpc_network: Creating...\r\ngoogle_compute_network.vpc_network: Still creating... [10s elapsed]\r\ngoogle_compute_network.vpc_network: Still creating... [20s elapsed]\r\ngoogle_compute_network.vpc_network: Still creating... [30s elapsed]\r\ngoogle_compute_network.vpc_network: Creation complete after 39s [id=projects\/terraform-project-337116\/global\/networks\/terraform-flask-vpcapp-network]\r\ngoogle_compute_firewall.fw: Creating...\r\ngoogle_compute_instance.vm_instance: Creating...\r\ngoogle_compute_firewall.fw: Creation complete after 9s [id=projects\/terraform-project-337116\/global\/firewalls\/fwapp]\r\ngoogle_compute_instance.vm_instance: Still creating... [10s elapsed]\r\ngoogle_compute_instance.vm_instance: Creation complete after 19s [id=projects\/terraform-project-337116\/zones\/us-central1-c\/instances\/flask-vm-b8cf57b839ab1914]\r\n\r\nApply complete! Resources: 4 added, 0 changed, 0 destroyed.\r\n\r\nOutputs:\r\n\r\nip = \"34.122.168.105\"\r\nscript = &lt;sensitive&gt;<\/pre>\n<p>&nbsp;<\/p>\n<p>Now try to access the above external IP address with port 5000 (Eg: http:\/\/34.122.168.105:5000)<\/p>\n<p>You should see the &#8220;Welcome to the cloud&#8221; message with some emojis as shown below<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud.png\"><img class=\"post-img aligncenter wp-image-7905 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud.png\" alt=\"\" width=\"3218\" height=\"1836\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud.png 3218w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud-300x171.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud-1024x584.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud-768x438.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud-1536x876.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-welcome-tocloud-2048x1168.png 2048w\" sizes=\"(max-width: 3218px) 100vw, 3218px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Meanwhile, you can see your created instance from the GCP console. Pay attention to the region, where instance got created in &#8216;us-central1&#8217;\u00a0 <a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance.png\"><img class=\"post-img aligncenter wp-image-7906 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance.png\" alt=\"\" width=\"2512\" height=\"806\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance.png 2512w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance-300x96.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance-1024x329.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance-768x246.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance-1536x493.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-central-instance-2048x657.png 2048w\" sizes=\"(max-width: 2512px) 100vw, 2512px\" \/><\/a><\/p>\n<\/div>\n<p>&nbsp;<\/p>\n<p>So far we have seen the instructions to set up our original\/actual infrastructure.\u00a0 Let&#8217;s call it <strong>X<\/strong> with reference to our requirement we saw earlier.<\/p>\n<p>Now we need to see how to Clone this infrastructure as a new one let&#8217;s call it <strong>Y<\/strong> using Terraform remote state data source.<\/p>\n<p>&nbsp;<\/p>\n<h2>Cloning the Infra with Terraform-remote-state data source<\/h2>\n<div class=\"ez-toc-title-container\">\n<p>Next, we shall create instances with the same configuration in <code>us-west1<\/code> region using <code>terraform-remote-state<\/code> data source.<\/p>\n<p>Now create one more terraform workspace with the name &#8216;test&#8217; under the same directory or create a new directory and copy the following tf files<\/p>\n<ul>\n<li>main.tf<\/li>\n<li>variables.tf<\/li>\n<\/ul>\n<p>If you are using the same files, just create a workspace<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">terraform workspace create test\r\nterraform workspace select test<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>Now Change <code>region<\/code> from <code>us-central1<\/code> to <code>us-west1<\/code> in <code>variables.tf<\/code> file.<\/p>\n<p>Along with this update, change the name for <code>vpc<\/code> and <code>firewall<\/code>, just to differentiate one from development workspace resources<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">variable \"project\" {\r\n  default = \"terraform-project-337116\"\r\n}\r\n\r\n\r\nvariable \"region\" {\r\n  default = \"us-west1\"\r\n}\r\n\r\n\r\nvariable \"image_family\" {\r\n  default = \"debian-9\"\r\n}\r\n\r\nvariable \"image_project\" {\r\n  default = \"debian-cloud\"\r\n}\r\n\r\nvariable \"vpc_name\" {\r\n  default = \"terraform-flask-westnetwork\"\r\n}\r\n\r\nvariable \"zone\" {\r\n  default = \"us-west1-b\"\r\n}\r\n\r\nvariable \"machine_type\" {\r\n  default = \"f1-micro\"\r\n}\r\n\r\nvariable \"firewall_name\" {\r\n  default = \"fwwest\"\r\n}\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>Now add <code>terraform_remote_state<\/code> Datasource block in <code>main.tf<\/code> file as below<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">data \"terraform_remote_state\" \"developmentwsdata\" {\r\n  backend = \"local\"\r\n\r\n  config = {\r\n    path = \"${path.module}\/terraform.tfstate.d\/development\/terraform.tfstate\"\r\n  }\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>Here path should be the relevant path where your <code>terraform.tfstate<\/code> file is stored. In general, when we create terraform workspace<\/p>\n<p>terraform will create a directory with a name <code>terraform.tfstate.d<\/code> and we can list all created workspace inside this directory. So, in general, your path should be<\/p>\n<pre>path\u00a0 = \"&lt;path to folder where .tf files are located&gt;\/terraform.tfstate.d\/&lt;your source workspace&gt;\/terraform.tfstate\"<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p>If you are getting the <code>tfstate<\/code> file from somewhere\/someone else just place it in a directory and refer to the fully qualified path.<\/p>\n<p>Next update metadata_script line in <code>main.tf<\/code> as below<\/p>\n<p>Here we are reading a script from the previous state (development) as an output variable and providing the same as the input to the target workspace (test), so that the same configuration is reflected in a newly created instance.<\/p>\n<div class=\"ez-toc-title-container\">\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\" data-enlighter-theme=\"bootstrap4\">metadata_startup_script = data.terraform_remote_state.developmentwsdata.outputs.script<\/pre>\n<p>&nbsp;<\/p>\n<p>If everything goes fine, you should see an output log similar to below<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"bootstrap4\">Changes to Outputs:\r\n  + ip = (known after apply)\r\nrandom_id.instance_id: Creating...\r\nrandom_id.instance_id: Creation complete after 0s [id=yMvh2E-5IWQ]\r\ngoogle_compute_network.vpc_network: Creating...\r\ngoogle_compute_network.vpc_network: Still creating... [10s elapsed]\r\ngoogle_compute_network.vpc_network: Still creating... [20s elapsed]\r\ngoogle_compute_network.vpc_network: Still creating... [30s elapsed]\r\ngoogle_compute_network.vpc_network: Creation complete after 39s [id=projects\/terraform-project-337116\/global\/networks\/terraform-flask-westnetwork]\r\ngoogle_compute_firewall.fw: Creating...\r\ngoogle_compute_instance.vm_instance: Creating...\r\ngoogle_compute_firewall.fw: Creation complete after 8s [id=projects\/terraform-project-337116\/global\/firewalls\/fwwest]\r\ngoogle_compute_instance.vm_instance: Still creating... [10s elapsed]\r\ngoogle_compute_instance.vm_instance: Creation complete after 17s [id=projects\/terraform-project-337116\/zones\/us-west1-b\/instances\/flask-vm-c8cbe1d84fb92164]\r\n\r\nApply complete! Resources: 4 added, 0 changed, 0 destroyed.\r\n\r\nOutputs:\r\n\r\nip = \"34.82.35.198\"<\/pre>\n<p>Now again try to access an external IP address with 5000 port (eg: http:\/\/34.82.35.198:5000)<\/p>\n<p>You should see the `Welcome to the cloud Message`<\/p>\n<\/div>\n<div class=\"ez-toc-title-container\">\n<p>You can validate from the GCP console that two separate instances are created in two regions us-central1 and us-west1 respectively.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance.png\"><img class=\"aligncenter wp-image-7907 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance.png\" alt=\"\" width=\"2534\" height=\"938\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance.png 2534w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance-300x111.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance-1024x379.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance-768x284.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance-1536x569.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/gcp-us-west-instance-2048x758.png 2048w\" sizes=\"(max-width: 2534px) 100vw, 2534px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Finally, don&#8217;t forget to clean up your infrastructure using terraform destroy command.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"bootstrap4\">terraform destroy &#8211; auto-approve<\/pre>\n<p>&nbsp;<\/p>\n<p>This proves we have successfully configured two separate instances with similar configurations in two separate regions using terraform remote state data sources.<\/p>\n<p>Complete source code is available here <a href=\"https:\/\/github.com\/sheldon-cooper26\/gcp-terraform-datasource-application\">https:\/\/github.com\/sheldon-cooper26\/gcp-terraform-datasource-application<\/a><\/p>\n<p>Hope you liked this post. Thanks for reading!!<\/p>\n<p>Thanks and Regards,<\/p>\n<p>Tapan Hegde<\/p>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this article, we are going to see what is terraform data source is and how it helps in Infrastructure as code Before we begin, I want you to think of this requirement. &#8220;Let&#8217;s say you have to create two similar infrastructure modules in two different regions of any of[&#8230;]<\/p>\n","protected":false},"author":271,"featured_media":7940,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[233],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Terraform remote state datasource Example - GCP | Devops Junction<\/title>\n<meta name=\"description\" content=\"Terraform remote state datasource example. Cloning Terraform infrastructure with terraform_remote_state datasource. How to copy Terraform state and create a new infrastructure using remote state.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Terraform remote state datasource Example - GCP | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Terraform remote state datasource example. Cloning Terraform infrastructure with terraform_remote_state datasource. How to copy Terraform state and create a new infrastructure using remote state.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2022-01-11T20:02:39+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-13T03:43:14+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/01\/tf-remote-state.jpg\",\"width\":1748,\"height\":1240,\"caption\":\"Terraform_remote_state datasource\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/\",\"name\":\"Terraform remote state datasource Example - GCP | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#primaryimage\"},\"datePublished\":\"2022-01-11T20:02:39+00:00\",\"dateModified\":\"2022-01-13T03:43:14+00:00\",\"description\":\"Terraform remote state datasource example. Cloning Terraform infrastructure with terraform_remote_state datasource. How to copy Terraform state and create a new infrastructure using remote state.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/a3628fb28665348f6aab4f472ebf7837\"},\"headline\":\"Terraform remote state datasource Example &#8211; GCP | Devops Junction\",\"datePublished\":\"2022-01-11T20:02:39+00:00\",\"dateModified\":\"2022-01-13T03:43:14+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#primaryimage\"},\"articleSection\":\"Terraform\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/terraform-remote-state-datasource-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/a3628fb28665348f6aab4f472ebf7837\",\"name\":\"Tapan Hegde\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/cc6f526212cdbf66b6a32db548fa54b8?s=96&d=mm&r=g\",\"caption\":\"Tapan Hegde\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7900"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/271"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=7900"}],"version-history":[{"count":6,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7900\/revisions"}],"predecessor-version":[{"id":7953,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7900\/revisions\/7953"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/7940"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=7900"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=7900"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=7900"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}