{"id":2711,"date":"2019-03-24T02:47:32","date_gmt":"2019-03-23T21:17:32","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=2711"},"modified":"2022-06-19T11:29:31","modified_gmt":"2022-06-19T05:59:31","slug":"ansible-lineinfile-examples","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/","title":{"rendered":"Ansible lineinfile examples &#8211; Add, Modify, Delete, Replace lines"},"content":{"rendered":"<p>Ansible lineinfile module could be the saviour of your day when you want to work with files and especially modify their content on the run, like adding a new line in the file or updating a line in the file or replace a line in the file when certain text is found and much more.<\/p>\n<p>lineinfile has a various set of examples and it provides many parameters to get your job done easily. In this post, we are going to see the ansible lineinfile module in action with examples.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1.jpeg\"><img class=\"alignnone size-full wp-image-3084\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1.jpeg\" alt=\"ansible lineinfile examples\" width=\"1053\" height=\"699\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1.jpeg 1053w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1-300x199.jpeg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1-768x510.jpeg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1-1024x680.jpeg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1-120x80.jpeg 120w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1-360x240.jpeg 360w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1-480x320.jpeg 480w\" sizes=\"(max-width: 1053px) 100vw, 1053px\" \/><\/a><\/p>\n<h2>The Ansible <span style=\"color: #e60e60;\">lineinfile<\/span> module<\/h2>\n<p>Ansible lineinfile module is helpful when you want to add, remove, modify a single line in a file.\u00a0 You can also use conditions to match the line before modifying or removing using the regular expressions. You can reuse and modify the matched line using the back reference parameter.<\/p>\n<p>Consider yourself having any of these following requirement<\/p>\n<ol>\n<li>Add a line when it is not already present.<\/li>\n<li>Change the port number in the configuration file<\/li>\n<li>Disable the SSL when the SSL is enabled<\/li>\n<li>Add a new entry in the \/etc\/hosts file<\/li>\n<li>Upgrade the package version when the installed version is matching your regular expression<\/li>\n<li>Remove a username from \/etc\/passwd file using regex<\/li>\n<\/ol>\n<p>Hope this sets the context. Before we proceed with the examples Something to be highlighted.<\/p>\n<blockquote><p>Ansible Lineinfile can be used only for working a single line in a file. If you want to replace mutiple lines try <a href=\"https:\/\/docs.ansible.com\/ansible\/latest\/modules\/replace_module.html#replace-module\">replace<\/a> module or use\u00a0<a class=\"reference internal\" href=\"https:\/\/docs.ansible.com\/ansible\/latest\/modules\/blockinfile_module.html#blockinfile-module\"><span class=\"std std-ref\">blockinfile<\/span><\/a>\u00a0if you want to insert\/update\/remove a block of lines in a file.<\/p><\/blockquote>\n<p>If you want to explore more about the Ansible Replace module you can refer this post.<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"nNYSRREvRW\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-replace-line-in-file-ansible-replace-examples\/\">Ansible replace line in file &#8211; Ansible Replace Examples | Devops Junction<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Ansible replace line in file &#8211; Ansible Replace Examples | Devops Junction&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-replace-line-in-file-ansible-replace-examples\/embed\/#?secret=nNYSRREvRW\" data-secret=\"nNYSRREvRW\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible <span style=\"color: #de167a;\">lineinfile<\/span>\u00a0examples<\/h2>\n<p>We have gathered various examples of ansible lineinfile here.\u00a0 These are examples we have covered in this post. you can choose to read all or any specific example.<\/p>\n<ul>\n<li>Validate if a line is present without any modification<\/li>\n<li>Validate if a line is present in the file and <strong>add<\/strong> if it does not exist<\/li>\n<li>Replace a Line in a file If it is found with ansible lineinfile<\/li>\n<li>Remove a line from the file if it is found &#8211; All the instances<\/li>\n<li>Insert before a matching line using <strong>insertbefore<\/strong> parameter<\/li>\n<li>Insert after the matching line using <strong>insertafter<\/strong> parameter<\/li>\n<li>validate the changes are correct before saving<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h3>Example 1:\u00a0Validate if a line is present in the file without any modification<\/h3>\n<p><strong>This is just to validate if a line is present in the file or not<\/strong>. It will not modify the file irrespective of whatsoever the result is. this is just like running the quick find command<\/p>\n<p>The Example given below is to find whether or not the String &#8220;LogLevel debug&#8221; is found in the remote apache web server&#8217;s httpd.conf file.<\/p>\n<p>As mentioned earlier. There would be no action taken whatsoever<\/p>\n<p>In this example we are going to check if the LogLevel is Debug and print the message If it is there or not and take no action. This is being done with the help of <code>checkmode=yes<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example1: Validate if a String or line is present in the file\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> example1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          line:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"LogLevel debug\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          backup:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">        check_mode:<\/span> <span class=\"hljs-literal\">yes<\/span><\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> example1out\r\n<\/pre>\n<p>Though this playbook would report that there is a change made by marking it as\u00a0<code>changed=1<\/code>\u00a0but this would not do any modification on the file as we ran the task in Check mode.<\/p>\n<p>Here is the Quick ad-hoc command to check what is the actual LogLevel in the remote httpd.conf file<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -i LogLevel \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\n<span style=\"color: #ffff00;\">mwiweb02 | CHANGED | rc=<span class=\"hljs-number\">0<\/span> &gt;&gt;\r\n# <span class=\"hljs-attribute\">LogLevel<\/span>: Control the number of messages logged to the error_log.\r\nLogLevel warn\r\n<\/span><\/pre>\n<blockquote><p>\u00a0It is recommended to always have the <strong><code>backup: yes<\/code><\/strong> parameter in your playbook when you are using the lineinfile. This would make sure the file is backed up before any changes are made. This would help in case if you want to roll back.<\/p><\/blockquote>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3>Example2: Validate if a String or line is present in the file and <em><strong>add<\/strong> if it does not exist<\/em><\/h3>\n<p>In the same playbook, we have just seen if we remove the check mode it would be a valid playbook which searches\u00a0 for a line and adds it when there are no matches found<\/p>\n<p>But there is a problem here the line you are mentioning to be added would be added only at the End Of File or Last line. This can be controlled with insert_before and insert_before directives which will be discussed later in this article.<\/p>\n<p>Now the playbook<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example2: Add the line if it does not exist\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> example2\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          line:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"LogLevel debug\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          backup:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> example2out\r\n<\/pre>\n<p>The result of this would result in a invalid configuration file as the entry would be added at the End Of File.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in LogLevel \/etc\/httpd\/conf\/httpd.conf\"<\/span> \r\nmwiweb02 <span class=\"hljs-params\" style=\"color: #d0d0ff;\">| CHANGED |<\/span> rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-meta\" style=\"color: #9b859d;\">&gt;&gt;\r\n<\/span><span class=\"hljs-number\" style=\"color: #a5c261;\">185<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># LogLevel: Control the number of messages logged to the error_log.<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">189<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:LogLevel<\/span> warn\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">354<\/span><span class=\"hljs-symbol\">:LogLevel<\/span> debug\r\n<\/span><\/pre>\n<p>Which can be controlled with Insert after and insert before which we will later in this post.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Example3: Replace a line in a file with ansible lineinfile.<\/h3>\n<p>In the example2 we have seen how to add a new line with lineinfile module. Now we are going to see how to replace a line when a Certain line is found.<\/p>\n<p>Though you can use the ansible replace module to replace. The\u00a0Lineinfile module can also be used to replace a line.<\/p>\n<p>Now in this example, we are going to change the <code>LogLevel debug<\/code> to <code>LogLevel Debug<\/code> with a capital D<\/p>\n<p>We are going to use the Ansible Lineinfile with\u00a0 <code>Regular Expressions<\/code>\u00a0 to Search for a line and the line element would contain the <code>line<\/code>\u00a0argument would hold the line to replace with<\/p>\n<p>Look at the following Playbook and you can easily understand it.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example1: Validate if a String or line is present in the file\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> example1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n          <span style=\"color: #d17111;\"># The String to Search<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">          regexp:<\/span> <span class=\"hljs-string\">\"LogLevel warn\"<\/span> \r\n<span style=\"color: #d17111;\">          # The String to Replace<\/span>\r\n<span class=\"hljs-attr\">          line:<\/span> <span class=\"hljs-string\">\"LogLevel debug\"<\/span><\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          backup:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n        \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> example1out<\/pre>\n<p>The Result of the file would be something like this<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in LogLevel \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\nmwiweb02 <span class=\"hljs-params\" style=\"color: #d0d0ff;\">| CHANGED |<\/span> rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-meta\" style=\"color: #9b859d;\">&gt;&gt;\r\n<\/span><span class=\"hljs-number\" style=\"color: #a5c261;\">185<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># LogLevel: Control the number of messages logged to the error_log.<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">189<\/span><span class=\"hljs-symbol\">:LogLevel<\/span> debug<\/span><\/pre>\n<p>&nbsp;<\/p>\n<h3>Would it Replace all the Matching Lines? What if there are More than one Matches<\/h3>\n<blockquote><p>If there are more than one matches in the file. <strong>Ansible Lineinfile would replace only the last line matched or found.<\/strong><\/p>\n<p>If you would like to replace all the occurrences,\u00a0 you must consider using the <strong>replace<\/strong> module and not lineinfile.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<h3>Example 4: Remove a line from the file,\u00a0 if it is found ( All the Instances )<\/h3>\n<p>Now I want to remove the Line\u00a0\u00a0<code>LogLevel Debug<\/code>\u00a0which we have added earlier as it is in the wrong place and also we already have the<code>LogLevel warn<\/code> present in the same file.<\/p>\n<p>Here is the ansible playbook to remove the Line from the file and we can use some Regular expressions here to find both <code>debug<\/code> and <code>Debug<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example1: Validate if a String or line is present in the file\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> example1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span style=\"color: #d17111;\">          # String to Search<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">          regexp:<\/span> <span class=\"hljs-string\">\"LogLevel [Dd]ebug\"<\/span> \r\n<\/span><span style=\"color: #d17111;\">          # State is set to Absent to remove if the Searching Line is found<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">          state:<\/span> absent<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          backup:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n        \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> example1out\r\n\r\n<\/pre>\n<p>Here we are setting the state parameter as absent which will remove if the Search is Success. the <code>line<\/code> parameter is not used as it is not necessary<\/p>\n<p>As mentioned earlier, this would remove all the matching lines from the file, in other words, all the appearance of a Search Line.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Example5: Insert After a matching line using <strong>insertafter<\/strong>\u00a0parameter<\/h3>\n<p>Since we have taken Apache httpd.conf file as our base file in this post, Let us take some requirement\u00a0 we used to do often in Apache, which is adding a new listener<\/p>\n<p>First Let us see what is there in the file already<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in Listen \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\nmwiweb02 <span class=\"hljs-params\" style=\"color: #d0d0ff;\">| CHANGED |<\/span> rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-meta\" style=\"color: #9b859d;\">&gt;&gt;\r\n<\/span><span class=\"hljs-number\" style=\"color: #a5c261;\">34<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Listen: Allows you to bind Apache to specific IP addresses and\/or<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">38<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Change this to Listen on specific IP addresses as shown below to <\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">41<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\">#Listen 12.34.56.78:80<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">42<\/span><span class=\"hljs-symbol\">:Listen<\/span> <span class=\"hljs-number\">80<\/span><\/span><\/pre>\n<p>here 42 is the line number and you can see that we have only one Listen statement\/directive as of now. Now in order to make Apache Listen to 443 we need to add <code>Listen 443<\/code>\u00a0right beneath the <code>Listen 80\u00a0<\/code><br \/>\nLet us see how to Insert after some line using insertafter parameter.<\/p>\n<p>Here is the playbook.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example1: Validate if a String or line is present in the file\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> lineinfileexample\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          insertafter:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"^Listen [0-9]+\"<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          line:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Listen 443\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          firstmatch:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present  \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> lineinfileexample\r\n<\/pre>\n<p>Here you can notice that there is no REGEX parameter.\u00a0 we do not need this as the insertafter parameter itself can have the Search String with the Regular Expression Syntax<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in Listen \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\nmwiweb02 <span class=\"hljs-params\" style=\"color: #d0d0ff;\">| CHANGED |<\/span> rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-meta\" style=\"color: #9b859d;\">&gt;&gt;\r\n<\/span><span class=\"hljs-number\" style=\"color: #a5c261;\">34<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Listen: Allows you to bind Apache to specific IP addresses and\/or<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">38<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># Change this to Listen on specific IP addresses as shown below to <\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">41<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\">#Listen 12.34.56.78:80<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">42<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:Listen<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">80<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">43<\/span><span class=\"hljs-symbol\">:Listen<\/span> <span class=\"hljs-number\">443<\/span><\/span><\/pre>\n<p>If you notice the Line numbers in the Output,\u00a0 You can see the <code>Listen 443<\/code> has been added right beneath the<code> Listen 80<\/code><\/p>\n<blockquote><p>When there are multiple entries of the searching line is present in the file. The last matched line would be considered.<\/p><\/blockquote>\n<h3>Example6: Insert Before a matching line using <strong>insertbefore<\/strong>\u00a0parameter<\/h3>\n<p>To Test the insert before parameter,\u00a0 Let us take the same httpd.conf file as a base file and this time we are going to update the <code>ServerAdmin<\/code> Email ID from the default\u00a0\u00a0<code>ServerAdmin root@localhost<\/code>\u00a0to <code>Server Admin aksarav@middlewareinventory.com<\/code><\/p>\n<p><strong>Before any modification<\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">aksarav<span class=\"hljs-variable\" style=\"color: #a5c261;\">@middlewareinventory:<\/span>\/apps\/vagrant\/webinfra$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in ServerAdmin \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\nmwiweb02 | CHANGED | rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> &gt;&gt;\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">83<\/span>:# <span class=\"hljs-attribute\" style=\"color: #cda869;\">ServerAdmin<\/span>: Your address, where problems with the server should be\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">87<\/span>:ServerAdmin root<span class=\"hljs-variable\">@localhost<\/span><\/span><\/pre>\n<p>But we need to Disable\/Comment the Existing ServerAdmin line and add a new entry, Here is the playbook to do both these tasks.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n    \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example6: Comment the Exisiting ServerAdmin Line\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> lineinfileexample6_1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          regexp:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">'(^ServerAdmin .*)'<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          line:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">'# \\1'<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          backrefs:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> lineinfileexample6_1\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example6: Add a New ServerAdmin Before the Commented Line\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        tags:<\/span> lineinfileexample6_2\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          i<span style=\"color: #ffff00;\">nsertbefore:<\/span><\/span><span class=\"hljs-string\" style=\"color: #ffff00;\"> '# ServerAdmin .*'<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          line:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"ServerAdmin aksarav@middlewareinventory.com\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present  \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        register:<\/span> lineinfileexample6_2\r\n<\/pre>\n<p>The Expected result would be something like follows.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">aksarav<span class=\"hljs-variable\" style=\"color: #a5c261;\">@middlewareinventory:<\/span>\/apps\/vagrant\/webinfra$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in ServerAdmin \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\nmwiweb02 | CHANGED | rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> &gt;&gt;\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">83<\/span>:# <span class=\"hljs-attribute\" style=\"color: #cda869;\">ServerAdmin<\/span>: Your address, where problems with the server should be\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">87<\/span>:ServerAdmin aksarav<span class=\"hljs-variable\">@middlewareinventory<\/span>.com<\/span>\r\n<span style=\"color: #d17111;\"><span class=\"hljs-number\">88<\/span>:# ServerAdmin root<span class=\"hljs-variable\">@localhost<\/span><\/span><\/pre>\n<p>You can see the Line Number 88 is commented now, it was the older Server Admin and line number 87 is our new ServerAdmin<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 7:\u00a0 \u00a0Validate the Changes Before Saving\/Committing<\/h3>\n<p>This is a Nice feature of Ansible lineinfile which will let you run a shell command to validate if the modified file is really OK or if there are any issues. Since our base file is a configuration file\u00a0<code>httpd.conf<\/code> it has some syntax and If we miss adhering to it, we will leave the entire website\/infra at stake.<\/p>\n<p>So let us validate it before saving the file.<\/p>\n<p>Apache HTTPD server has a command to perform the Syntax check on the httpd.conf file which is <code>httpd -t<\/code><\/p>\n<p>When invoked and with no syntax issues. It would print the message Syntax OK like given below and return a Zero Return Code which is all it matters to Ansible. Ansible relies on the Validation Command&#8217;s Return Code.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">[aksarav<span class=\"hljs-variable\" style=\"color: #a5c261;\">@mwiweb02<\/span> ~]<span class=\"hljs-variable\" style=\"color: #a5c261;\">$ <\/span>httpd -t \r\nSyntax OK<\/pre>\n<p>If it is NON-ZERO the Changes would not be committed and the task\u00a0will fail.<\/p>\n<p>Here is the playbook to Update the ServerName Directive of Apache.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Examples of lineinfile\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> web\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - name:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Example7: Update the ServerName\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        become_user:<\/span> root\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        lineinfile:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          path:<\/span> \/etc\/httpd\/conf\/httpd.conf\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          insertafter:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">'#ServerName www.example.com:80'<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          line:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"ServerName www.middlewareinventory.com:80\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          state:<\/span> present  \r\n<span style=\"color: #00ffff;\">          # Command to Validate the Configuration and %s is a working copy of the file<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">          validate:<\/span> <span class=\"hljs-string\">\"httpd -t -f %s\"<\/span><\/span>\r\n<\/pre>\n<p>Here the <code>%s<\/code> is the working copy of the actual file. Ansible would always copy the file and keep it as a working copy and make the changes and finally copy it over to the Destined location and replace the original file.<\/p>\n<p>Quick Ad Hoc command to validate<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">$ ansible web -m shell -a <span class=\"hljs-string\" style=\"color: #a5c261;\">\"grep -in ServerName \/etc\/httpd\/conf\/httpd.conf\"<\/span> -i ansible_hosts\r\nmwiweb02 <span class=\"hljs-params\" style=\"color: #d0d0ff;\">| CHANGED |<\/span> rc=<span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span> <span class=\"hljs-meta\" style=\"color: #9b859d;\">&gt;&gt;\r\n<\/span><span class=\"hljs-number\" style=\"color: #a5c261;\">92<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\"># ServerName gives the name and port that the server uses to identify itself.<\/span>\r\n<span class=\"hljs-number\" style=\"color: #a5c261;\">98<\/span><span class=\"hljs-symbol\" style=\"color: #6d9cbe;\">:<\/span><span class=\"hljs-comment\" style=\"color: #bc9458; font-style: italic;\">#ServerName www.example.com:80<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-number\">99<\/span><span class=\"hljs-symbol\">:ServerName<\/span> www.middlewareinventory.<span class=\"hljs-symbol\">com:<\/span><span class=\"hljs-number\">80<\/span>\u00a0<\/span><\/pre>\n<p>You can see the ServerName directive has been added.<\/p>\n<p>We have come to the End of the Article.<\/p>\n<p>Hope it helps<\/p>\n<p>Rate this article [ratings]<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670578097\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"2711\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670578097\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670578097\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ansible lineinfile module could be the saviour of your day when you want to work with files and especially modify their content on the run, like adding a new line in the file or updating a line in the file or replace a line in the file when certain text[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":3084,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[226,225,222,221,224,223],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible lineinfile examples - Add, Modify, Delete, Replace lines<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible lineinfile examples - Add, Modify, Delete, Replace lines\" \/>\n<meta property=\"og:description\" content=\"Ansible lineinfile module could be the saviour of your day when you want to work with files and especially modify their content on the run, like adding a new line in the file or updating a line in the file or replace a line in the file when certain text[...]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-03-23T21:17:32+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-06-19T05:59:31+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1.jpeg\" \/>\n\t<meta property=\"og:image:width\" content=\"1053\" \/>\n\t<meta property=\"og:image:height\" content=\"699\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/03\/photo-1461360228754-6e81c478b882-1.jpeg\",\"width\":1053,\"height\":699,\"caption\":\"ansible lineinfile examples\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/\",\"name\":\"Ansible lineinfile examples - Add, Modify, Delete, Replace lines\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#primaryimage\"},\"datePublished\":\"2019-03-23T21:17:32+00:00\",\"dateModified\":\"2022-06-19T05:59:31+00:00\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible lineinfile examples &#8211; Add, Modify, Delete, Replace lines\",\"datePublished\":\"2019-03-23T21:17:32+00:00\",\"dateModified\":\"2022-06-19T05:59:31+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#primaryimage\"},\"keywords\":\"ansible line in file example,ansible line in file module,ansible lineinfile,ansible lineinfile examples,ansible lineinfile replace,lineinfile ansible\",\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-lineinfile-examples\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2711"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=2711"}],"version-history":[{"count":17,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2711\/revisions"}],"predecessor-version":[{"id":6991,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2711\/revisions\/6991"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/3084"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=2711"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=2711"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=2711"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}