{"id":5142,"date":"2020-02-25T02:06:50","date_gmt":"2020-02-24T20:36:50","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=5142"},"modified":"2022-03-12T12:02:34","modified_gmt":"2022-03-12T06:32:34","slug":"kubernetes-ingress-example","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/","title":{"rendered":"Kubernetes Ingress Example on Google Cloud"},"content":{"rendered":"<h2><span style=\"color: #003366;\">Kubernetes<\/span> <span style=\"color: #e61e71;\">Ingress<br \/>\n<\/span><\/h2>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting.png\"><img class=\"wp-image-5194 alignnone\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting-300x197.png\" alt=\"\" width=\"624\" height=\"410\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting-300x197.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting-120x80.png 120w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting.png 665w\" sizes=\"(max-width: 624px) 100vw, 624px\" \/><\/a><\/p>\n<p>We understand that as per traditional infrastructure setup, in order to load balance the client requests you are required to configure instances for each application you want to balance the load, which makes your configuration lengthy, and when moving this architecture to open source technologies it will be more complex &amp; expensive if we continue the same flow.<\/p>\n<p>For instance, let&#8217;s try to move this flow to Kubernetes cluster where you wish to deploy your user-facing application, you need to create a new load balancer for every service you want to access &amp; need to singly map every service to load balancer which will complicate your configuration.<\/p>\n<p>When you load balance your request based on the context path you need to modify lot many configurations at different level which can be an overhead task for your application developers. i.e. at each service, you need a load balancer which is not an optimal approach.<\/p>\n<p>and what if you try a hybrid approach where you want to deploy k8s with a physical LB or F5 placed in your data centre, its ends \u2018up with a more complicated structure.<\/p>\n<p>But what if I say all this thing can be managed within a K8s cluster via another definition file. that\u2019s where INGRESS comes into the picture. Ingress helps your user to access your app using a single externally accessible URL, that you can configure to route different services in your cluster based on URL pod, and also can implement SSL security at the same time.<\/p>\n<blockquote><p>With one underline condition: this feature of ingress available with k8s 1.2+ versions only.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2><strong><span style=\"color: #003366;\">What is<\/span> <span style=\"color: #e61e71;\">Kubernetes Ingress<\/span>?<\/strong><\/h2>\n<p>Ingress is a collection of rules that allow inbound connections to reach your cluster services, it is a logical controller that acts as a layered load balancer either from physical or cloud and is in-built in k8s cluster &amp; configured like any native k8s service and apply set of rules that used to route the traffic dynamically to endpoints.<\/p>\n<p>Typically it\u2019s an API object that manages the routing of external HTTP\/S traffic to services running in a k8s cluster. The crucial difference between nodejs service object, lb service object is ingress object is primarily concern with Layer 7 traffic in fact http\/s traffic.<\/p>\n<blockquote><p>\u00a0If you are from a web background you can consider this kubernetes ingress as the mod_proxy (or) mod_jk sitting on the apache httpd server to perform backend routing and load balancing.<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<h2><strong><span style=\"color: #003366;\">How Kubernetes Ingress,<\/span>\u00a0<span style=\"color: #e61e71;\">works<\/span>?<\/strong><\/h2>\n<p>&nbsp;<\/p>\n<p>Ingress work on the principle of name &amp; path-based virtual hosting (traffic routing pattern)<\/p>\n<p><strong>Name-based routing:<\/strong> It support routing HTTP traffic to multiple hostnames at the same IP address.<\/p>\n<p>With client HTTP request coming to ingress controller, it then extracts the host header field from the request &amp; based on the appropriate rule defining new ingress object routes the request to specific back-end service.<\/p>\n<p><strong>Path-based routing:<\/strong> with a single endpoint, you can hit multiple services\/applications in the form of fanout-ingress and treat them as an integrated application.<\/p>\n<blockquote><p>NOTE: you cannot use ingress with clusterIP type service since clusterIP is made for internal cluster routing only not with the outside world. So that makes ingress to work only when service type used as nodePort.<\/p><\/blockquote>\n<p>**Few things to understand before demonstrating ingress**<\/p>\n<h2><\/h2>\n<p>&nbsp;<\/p>\n<h2><span style=\"color: #003366;\">The Three Ways to Make a Service accessible <span style=\"color: #eb107a;\">Externally<\/span>.<\/span><\/h2>\n<p><strong>Setting the Service type to <span style=\"color: #eb107a;\">Nodeport<\/span><\/strong>: services that need to be exposed to the outside world can be configured with the node port. In this method, each cluster node opens a port on the node itself (hence this name was given ) and redirects traffic received on that port to the underlying service<\/p>\n<p><strong>Setting the Service type to <span style=\"color: #eb107a;\">Loadbalancer<\/span><\/strong>:\u00a0 an extension of the NodePort type\u2014This makes the service accessible through a dedicated load balancer, provisioned from the cloud infrastructure Kubernetes is running on. The load balancer redirects traffic to the node port across all the nodes. Clients connect to the service through the load balancer\u2019s IP.<\/p>\n<p><strong>Creating an <span style=\"color: #eb107a;\">Ingress<\/span> resource<\/strong>, a radically different mechanism for exposing multiple services through a single IP address. It operates at the HTTP level (network layer 7) and can thus offer more features than layer 4 services can.\u00a0 that&#8217;s what we are going to see in this article<\/p>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h2>Why choosing <span style=\"color: #eb107a;\">Ingress<\/span> over\u00a0 <span style=\"color: #eb107a;\">Loadbalancer<\/span><\/h2>\n<p>One important reason to choose Ingress over Loadbalancer is that each LoadBalancer service requires its own load balancer with its own public IP address,<\/p>\n<p>whereas an Ingress only requires one, even when providing access to dozens of services. When a client sends an HTTP request to the Ingress, the host and path in the request determine which service the request is forwarded to<\/p>\n<p>&nbsp;<\/p>\n<h2><strong>How to <span style=\"color: #e61e71;\">Create<\/span> a Kubernetes <span style=\"color: #de3369;\">Ingress<\/span> Example setup<\/strong><strong>.<\/strong><\/h2>\n<p>Let&#8217;s try to demonstrate ingress using path-based routing for 3 applications at a time where I used GKE to form a Kube cluster<\/p>\n<p>Here deployment referred as <code>Ingress-controller<\/code> and configuration as <code>Ingress-resource<\/code><\/p>\n<blockquote><p><em>** so quick recap: Ingress is a decoupling layer between internet and nodePort where it opens the cluster to receive external traffic, defining the traffic routes to backend services results to ensuring reliable and secure communication **<\/em><\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<p>These are the steps we are going to performing to create the Kubernetes Ingress Path-based routing.<\/p>\n<ul>\n<li>Deploy a web application<\/li>\n<li>Expose your Deployment as a Service internally.<\/li>\n<li>Create an Ingress resource.<\/li>\n<li>Visit your applications.<\/li>\n<li>Serving multiple applications on a Load Balancer.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h3><strong>Step1: Deploying Web Application<\/strong><\/h3>\n<p>Create deployment yaml files <code>kind: Deployment<\/code><\/p>\n<p><strong>app1\u00a0&#8211; deployment yaml file<\/strong><\/p>\n<p>for this app1 we are using apache4 image<\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; color: #333333; background: #f8f8f8;\"><span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">apiVersion<\/span>: extensions\/v1beta1\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">kind<\/span>: Deployment\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">metadata<\/span>:\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">name<\/span>: app1\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">namespace<\/span>: default\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">spec<\/span>:\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">selector<\/span>:\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">matchLabels<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">run<\/span>: app1\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">template<\/span>:\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">metadata<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">labels<\/span>:\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">run<\/span>: app1\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">spec<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">containers<\/span>:\r\n      - <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">image<\/span>: punitporwal07\/<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">apache4ingress<\/span>:<span class=\"hljs-number\" style=\"color: teal;\">1.0<\/span>\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">imagePullPolicy<\/span>: IfNotPresent\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">name<\/span>: app1\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">ports<\/span>:\r\n        - <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">containerPort<\/span>: <span class=\"hljs-number\" style=\"color: teal;\">80<\/span>\r\n          <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">protocol<\/span>: TCP<\/pre>\n<p>&nbsp;<\/p>\n<p><strong>app2 &#8211; deployment yaml file<\/strong><\/p>\n<p>For this app2 we are using hello-app version 1 image from Google samples<\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; color: #333333; background: #f8f8f8;\">  \r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">apiVersion<\/span>: extensions\/v1beta1\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">kind<\/span>: Deployment\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">metadata<\/span>:\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">name<\/span>: app2\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">namespace<\/span>: default\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">spec<\/span>:\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">selector<\/span>:\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">matchLabels<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">run<\/span>: app2\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">template<\/span>:\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">metadata<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">labels<\/span>:\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">run<\/span>: app2\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">spec<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">containers<\/span>:\r\n      - <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">image<\/span>: gcr.io\/google-samples\/<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">hello-app<\/span>:<span class=\"hljs-number\" style=\"color: teal;\">1.0<\/span>\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">imagePullPolicy<\/span>: IfNotPresent\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">name<\/span>: app2\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">ports<\/span>:\r\n        - <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">containerPort<\/span>: <span class=\"hljs-number\" style=\"color: teal;\">8080<\/span>\r\n          <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">protocol<\/span>: TCP<\/pre>\n<p>&nbsp;<\/p>\n<p><strong>app3 &#8211; deployment yaml file<\/strong><\/p>\n<p>For this app3 we are using hello-app version 2 image from Google samples<\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; color: #333333; background: #f8f8f8;\"><span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">apiVersion<\/span>: extensions\/v1beta1\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">kind<\/span>: Deployment\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">metadata<\/span>:\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">name<\/span>: app3\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">namespace<\/span>: default\r\n<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">spec<\/span>:\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">selector<\/span>:\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">matchLabels<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">run<\/span>: app3\r\n  <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">template<\/span>:\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">metadata<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">labels<\/span>:\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">run<\/span>: app3\r\n    <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">spec<\/span>:\r\n      <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">containers<\/span>:\r\n      - <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">image<\/span>: gcr.io\/google-samples\/<span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">hello-app<\/span>:<span class=\"hljs-number\" style=\"color: teal;\">2.0<\/span>\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">imagePullPolicy<\/span>: IfNotPresent\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">name<\/span>: app3\r\n        <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">ports<\/span>:\r\n        - <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">containerPort<\/span>: <span class=\"hljs-number\" style=\"color: teal;\">8080<\/span>\r\n          <span class=\"hljs-attribute\" style=\"color: navy; font-weight: 400;\">protocol<\/span>: TCP<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3><strong>Step2:\u00a0Expose your Deployment as a Service internally.<\/strong><\/h3>\n<p>Exposing deployment as a service NodePort type <code>kind : Service<\/code><\/p>\n<p><strong>Service1 deployment YAML file<\/strong><\/p>\n<p>this service is for the <code>app1<\/code>\u00a0with\u00a0\u00a0<code>apache<\/code>\u00a0container on port <code>80<\/code><\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-attr\" style=\"color: #6d9cbe;\">apiVersion:<\/span> v1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">kind:<\/span> Service\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">metadata:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  name:<\/span> app1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  namespace:<\/span> default\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">spec:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  ports:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - port:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">80<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    protocol:<\/span> TCP\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    targetPort:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">80<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  selector:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    run:<\/span> app1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  type:<\/span> NodePort<\/pre>\n<p>&nbsp;<\/p>\n<p><strong>Service2 deployment yaml file<\/strong><\/p>\n<p>this service is for <code>app2<\/code> with google sample app version1 container on port <code>8080<\/code><\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; background: #232323; color: #e6e1dc;\">  \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">apiVersion:<\/span> v1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">kind:<\/span> Service\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">metadata:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  name:<\/span> app2\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  namespace:<\/span> default\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">spec:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  ports:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - port:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    protocol:<\/span> TCP\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    targetPort:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  selector:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    run:<\/span> app2\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  type:<\/span> NodePort<\/pre>\n<p>&nbsp;<\/p>\n<p><strong>Service3 deployment yaml file<\/strong><\/p>\n<p>this service is for <code>app3<\/code>\u00a0with google sample app version2 container on port <code>8080<\/code><\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-attr\" style=\"color: #6d9cbe;\">apiVersion:<\/span> v1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">kind:<\/span> Service\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">metadata:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  name:<\/span> app3\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  namespace:<\/span> default\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">spec:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  ports:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - port:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    protocol:<\/span> TCP\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    targetPort:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  selector:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    run:<\/span> app3\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  type:<\/span> NodePort<\/pre>\n<p>&nbsp;<\/p>\n<h3><strong>Step3:\u00a0Create an Ingress resource.<\/strong><\/h3>\n<p>Creating ingress resource with <code>kind: Ingress<\/code><\/p>\n<p><strong>Ingress resource yaml file<\/strong><\/p>\n<p>you could see that we are defining a path based routing and mapping a backend service name and service port<\/p>\n<p>for the path\u00a0<code>\/<\/code>\u00a0 it goes to <code>app1<\/code> service on port 80<\/p>\n<p>for the path <code>\/v2<\/code>\u00a0it goes <code>app2<\/code>\u00a0service on port 8080<\/p>\n<p>for the path <code>\/v3<\/code>\u00a0it goes <code>app3<\/code>\u00a0service on port 8080<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"hljs\" style=\"padding: 0.5em; background: #232323; color: #e6e1dc;\"><span class=\"hljs-attr\" style=\"color: #6d9cbe;\">apiVersion:<\/span> extensions\/v1beta1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">kind:<\/span> Ingress\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">metadata:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  name:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">3<\/span>app-ingress\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  labels:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    app:<\/span> my-docker-apps\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  annotations:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">spec:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  rules:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - http:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      paths:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - path:<\/span> \/\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        backend:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          serviceName:<\/span> app1\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          servicePort:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">80<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - path:<\/span> \/v2\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        backend:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          serviceName:<\/span> app2\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          servicePort:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - path:<\/span> \/v3\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        backend:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          serviceName:<\/span> app3\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">          servicePort:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span><\/pre>\n<p>&nbsp;<\/p>\n<p>Ingress &amp; services will look like on google cloud dashboard<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-services.png\"><img class=\"alignnone wp-image-5180 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-services.png\" alt=\"Kubernetes Ingress\" width=\"858\" height=\"197\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-services.png 858w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-services-300x69.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-services-768x176.png 768w\" sizes=\"(max-width: 858px) 100vw, 858px\" \/><\/a><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3><strong>Step4:\u00a0Visit your applications.<\/strong><\/h3>\n<blockquote><p>\u00a0Notice all three services share the Same IP, Unlike the Loadbalancer type where we need dedicated IP addresses.<\/p><\/blockquote>\n<p>And when you access ingress endpoint as defined in ingress definition.<\/p>\n<p><a href=\"http:\/\/34.102.185.58\/\">http:\/\/34.102.185.58\/<\/a><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app1.png\"><img class=\"size-medium wp-image-5186 aligncenter\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app1-300x108.png\" alt=\"\" width=\"300\" height=\"108\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app1-300x108.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app1.png 493w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p><a href=\"http:\/\/34.102.185.58\/v2\">http:\/\/34.102.185.58\/v2<\/a><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app2.png\"><img class=\"size-medium wp-image-5187 aligncenter\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app2-300x141.png\" alt=\"\" width=\"300\" height=\"141\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app2-300x141.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app2.png 412w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p><a href=\"http:\/\/34.102.185.58\/v3\">http:\/\/34.102.185.58\/v3<\/a><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app3.png\"><img class=\"size-medium wp-image-5188 aligncenter\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app3-300x161.png\" alt=\"\" width=\"300\" height=\"161\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app3-300x161.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/app3.png 368w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>you will be able to access all three different application via a single endpoint, just changing context path as defined<\/p>\n<p>&nbsp;<\/p>\n<h3><strong>Step5:\u00a0Serving multiple applications on a Load Balancer.<\/strong><\/h3>\n<p>The following command would show the internals of the created Kubernetes Ingress<\/p>\n<pre>$ kubectl describe ing 3app-ingress<\/pre>\n<p>you will see description of ingress definition<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-desc.png\"><img class=\"alignnone size-full wp-image-5181\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-desc.png\" alt=\"Kubernetes Ingress\" width=\"1537\" height=\"434\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-desc.png 1537w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-desc-300x85.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-desc-768x217.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ing-desc-1024x289.png 1024w\" sizes=\"(max-width: 1537px) 100vw, 1537px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Crafted By<br \/>\nPunit<\/p>\n<p>Follow me on<a href=\"https:\/\/www.linkedin.com\/in\/punitporwal\/\"> Linked In<\/a><\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577863\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"5142\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577863\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577863\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Kubernetes Ingress We understand that as per traditional infrastructure setup, in order to load balance the client requests you are required to configure instances for each application you want to balance the load, which makes your configuration lengthy, and when moving this architecture to open source technologies it will be[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":5194,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[151],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Kubernetes Ingress Example on Google Cloud | DevOps Junction<\/title>\n<meta name=\"description\" content=\"Kubernetes Ingress Example. A Quick introduction with Path-based Kubernetes Ingress example using KUBE Cluster. Kubernetes Ingress is a decoupling layer between internet and nodePort where it opens the cluster to receive external traffic. Kubernetes Ingress example with three applications sharing the K8s Ingress\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Kubernetes Ingress Example on Google Cloud | DevOps Junction\" \/>\n<meta property=\"og:description\" content=\"Kubernetes Ingress Example. A Quick introduction with Path-based Kubernetes Ingress example using KUBE Cluster. Kubernetes Ingress is a decoupling layer between internet and nodePort where it opens the cluster to receive external traffic. Kubernetes Ingress example with three applications sharing the K8s Ingress\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2020-02-24T20:36:50+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-12T06:32:34+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting.png\" \/>\n\t<meta property=\"og:image:width\" content=\"665\" \/>\n\t<meta property=\"og:image:height\" content=\"436\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/02\/ting.png\",\"width\":665,\"height\":436},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/\",\"name\":\"Kubernetes Ingress Example on Google Cloud | DevOps Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#primaryimage\"},\"datePublished\":\"2020-02-24T20:36:50+00:00\",\"dateModified\":\"2022-03-12T06:32:34+00:00\",\"description\":\"Kubernetes Ingress Example. A Quick introduction with Path-based Kubernetes Ingress example using KUBE Cluster. Kubernetes Ingress is a decoupling layer between internet and nodePort where it opens the cluster to receive external traffic. Kubernetes Ingress example with three applications sharing the K8s Ingress\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Kubernetes Ingress Example on Google Cloud\",\"datePublished\":\"2020-02-24T20:36:50+00:00\",\"dateModified\":\"2022-03-12T06:32:34+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#primaryimage\"},\"articleSection\":\"Kubernetes\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/5142"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=5142"}],"version-history":[{"count":21,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/5142\/revisions"}],"predecessor-version":[{"id":6216,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/5142\/revisions\/6216"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/5194"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=5142"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=5142"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=5142"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}