{"id":9000,"date":"2022-08-29T20:39:58","date_gmt":"2022-08-29T15:09:58","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=9000"},"modified":"2022-12-09T00:28:56","modified_gmt":"2022-12-08T18:58:56","slug":"aws-athena-queries-examples-alb","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/","title":{"rendered":"Athena SQL Query Examples for ALB troubleshooting | Devops Junction"},"content":{"rendered":"<p>ALB(Application Load Balancer) Logs are a great asset when it comes to troubleshooting.\u00a0 It provides a finer detail of the HTTP request processed by the ALB and sent to the target.<\/p>\n<p>ALB logs provide various fields and data which are essential to understanding the request flow. You can use it to troubleshoot your application errors, timeouts etc. 4xx and 5xx errors etc.<\/p>\n<p>This can be used for security auditing and security incident post-mortem analysis too.<\/p>\n<p>So this is a must-have for the Production Application Load Balancer.<\/p>\n<p>Once the ALB Logs are enabled, you can ingest the ALB logs into <a href=\"https:\/\/docs.aws.amazon.com\/athena\/latest\/ug\/what-is.html\">Amazon Athena<\/a> and start working on the data using SQL queries.<\/p>\n<p>Here is a quick introduction of Athena from the creators themselves.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries.jpg\"><img class=\"post-img alignnone wp-image-9025 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries.jpg\" alt=\"amazon athena\" width=\"1748\" height=\"1240\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries.jpg 1748w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-300x213.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-1024x726.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-768x545.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-1536x1090.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-400x284.jpg 400w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-1080x766.jpg 1080w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries-90x65.jpg 90w\" sizes=\"(max-width: 1748px) 100vw, 1748px\" \/><\/a><\/p>\n<h2>What is AWS\u00a0 Athena<\/h2>\n<p>Amazon Athena is an interactive query service that makes it easy to analyze data directly in Amazon Simple Storage Service (Amazon S3) using standard\u00a0<a href=\"https:\/\/docs.aws.amazon.com\/athena\/latest\/ug\/ddl-sql-reference.html\">SQL<\/a>. With a few actions in the AWS Management Console, you can point Athena at your data stored in Amazon S3 and begin using standard SQL to run ad-hoc queries and get results in seconds.<\/p>\n<p>Athena is serverless, so there is no infrastructure to set up or manage, and you pay only for the queries you run. Athena scales automatically\u2014running queries in parallel\u2014so results are fast, even with large datasets and complex queries.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM.png\"><img class=\"post-img alignnone wp-image-9005 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM.png\" alt=\"Athena ALB\" width=\"3632\" height=\"1588\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM.png 3632w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM-300x131.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM-1024x448.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM-768x336.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM-1536x672.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM-2048x895.png 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-26-at-10.15.35-PM-1080x472.png 1080w\" sizes=\"(max-width: 3632px) 100vw, 3632px\" \/><\/a><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Check If ALB logs are enabled &#8211; Enable if not<\/h2>\n<p>To check whether ELB- Elastic Load Balancer has the Logs enabled.<\/p>\n<p>Go to Load Balancer -&gt; Select the Load Balancer -&gt; Check the Attributes section.<\/p>\n<p>Under the attributes section you can see the <code>Access logs<\/code> attribute.<\/p>\n<p>If the access log is enabled you would find the S3 Location and the S3 bucket name. If not enabled you would see <code>Disabled<\/code><\/p>\n<p>In the following screenshot, you can see the Access logs is enabled and the S3 location is shown.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled.png\"><img class=\"post-img alignnone wp-image-9011 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled.png\" alt=\"\" width=\"1800\" height=\"924\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled.png 1800w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled-300x154.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled-1024x526.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled-768x394.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled-1536x788.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/alb-access-logs-enabled-1080x554.png 1080w\" sizes=\"(max-width: 1800px) 100vw, 1800px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>If you have not enabled it yet. Just click on the <code>Edit attributes<\/code> and enable it<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM.png\"><img class=\"post-img alignnone wp-image-9021 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM.png\" alt=\"athena queries\" width=\"1882\" height=\"1394\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM.png 1882w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM-300x222.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM-1024x758.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM-768x569.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM-1536x1138.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-6.21.37-PM-1080x800.png 1080w\" sizes=\"(max-width: 1882px) 100vw, 1882px\" \/><\/a><\/p>\n<p>If you use the existing S3 bucket or select the option to let aws create the S3 bucket for you to store the logs.<\/p>\n<p>now you can go to S3 and make sure that the bucket is created and the logs are coming.<\/p>\n<p>You may have to create some traffic and test the ALB to see the log files created.<\/p>\n<p>&nbsp;<\/p>\n<h2>Ingesting the ALB logs from S3 to\u00a0 AWS Athena<\/h2>\n<p>Now you have the ALB logs enabled and the logs are being written to the S3 bucket.<\/p>\n<p>Time to put the logs into Analysis using Athena.<\/p>\n<p>Let us start ingesting the S3 logs into Athena into some table.<\/p>\n<p>&nbsp;<\/p>\n<h3>Create a table and ingest the logs from S3 bucket<\/h3>\n<p>You can go to Athena Query editor and open a new query tab and paste the following SQL query<\/p>\n<p>But you need to replace a few placeholders on the Query<\/p>\n<ul>\n<li>Account ID<\/li>\n<li>S3 bucket name<\/li>\n<li>Region<\/li>\n<\/ul>\n<p>Ideally, this is the directory structure of how ALB writes the logs in the S3 bucket. You can copy these values from the S3 bucket directory. names itself.<\/p>\n<p>You can optionally change the table name by replacing the <code>\u00a0alb_logs<\/code> on the first line of the Query with some other name of your choice.<\/p>\n<p>This query creates the Partitioned table and ingests only the data defined on the <code>projection.day.range<\/code> field<\/p>\n<p>To know more about these fields and how to create this table without partition etc. <a href=\"https:\/\/docs.aws.amazon.com\/athena\/latest\/ug\/application-load-balancer-logs.html\">refer this article\u00a0<\/a><\/p>\n<p>This Query would work for the <strong>Application Load Balancer<\/strong> and <strong>Network Load Balancer<\/strong><\/p>\n<p>Classic Load Balancers would not have certain fields in this list. will see the difference shortly<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">CREATE EXTERNAL TABLE IF NOT EXISTS alb_logs (\r\n            type string,\r\n            time string,\r\n            elb string,\r\n            client_ip string,\r\n            client_port int,\r\n            target_ip string,\r\n            target_port int,\r\n            request_processing_time double,\r\n            target_processing_time double,\r\n            response_processing_time double,\r\n            elb_status_code int,\r\n            target_status_code string,\r\n            received_bytes bigint,\r\n            sent_bytes bigint,\r\n            request_verb string,\r\n            request_url string,\r\n            request_proto string,\r\n            user_agent string,\r\n            ssl_cipher string,\r\n            ssl_protocol string,\r\n            target_group_arn string,\r\n            trace_id string,\r\n            domain_name string,\r\n            chosen_cert_arn string,\r\n            matched_rule_priority string,\r\n            request_creation_time string,\r\n            actions_executed string,\r\n            redirect_url string,\r\n            lambda_error_reason string,\r\n            target_port_list string,\r\n            target_status_code_list string,\r\n            classification string,\r\n            classification_reason string\r\n            )\r\n            PARTITIONED BY\r\n            (\r\n             day STRING\r\n            )\r\n            ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'\r\n            WITH SERDEPROPERTIES (\r\n            'serialization.format' = '1',\r\n            'input.regex' = \r\n        '([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \\\"([^ ]*) (.*) (- |[^ ]*)\\\" \\\"([^\\\"]*)\\\" ([A-Z0-9-_]+) ([A-Za-z0-9.-]*) ([^ ]*) \\\"([^\\\"]*)\\\" \\\"([^\\\"]*)\\\" \\\"([^\\\"]*)\\\" ([-.0-9]*) ([^ ]*) \\\"([^\\\"]*)\\\" \\\"([^\\\"]*)\\\" \\\"([^ ]*)\\\" \\\"([^\\s]+?)\\\" \\\"([^\\s]+)\\\" \\\"([^ ]*)\\\" \\\"([^ ]*)\\\"')\r\n            LOCATION 's3:\/\/your-alb-logs-directory\/AWSLogs\/&lt;ACCOUNT-ID&gt;\/elasticloadbalancing\/&lt;REGION&gt;\/'\r\n            TBLPROPERTIES\r\n            (\r\n             \"projection.enabled\" = \"true\",\r\n             \"projection.day.type\" = \"date\",\r\n             \"projection.day.range\" = \"2022\/01\/01,NOW\",\r\n             \"projection.day.format\" = \"yyyy\/MM\/dd\",\r\n             \"projection.day.interval\" = \"1\",\r\n             \"projection.day.interval.unit\" = \"DAYS\",\r\n             \"storage.location.template\" = \"s3:\/\/your-alb-logs-directory\/AWSLogs\/&lt;ACCOUNT-ID&gt;\/elasticloadbalancing\/&lt;REGION&gt;\/${day}\"\r\n            )<\/pre>\n<p>&nbsp;<\/p>\n<p>Once the table is created, you would be able to see it on the left navigation pane of the query editor under <code>Tables<\/code><\/p>\n<p>you can start executing some simple SQL queries to test or preview the table<\/p>\n<p>&nbsp;<\/p>\n<h3>How to preview the table in Athena<\/h3>\n<p>The easy way to preview the table is to click on the hamburger button adjacent to your table and click on the <code>Preview Table<\/code> option<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.55.18-AM.png\"><img class=\"post-img alignnone wp-image-9013 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.55.18-AM.png\" alt=\"post-img\" width=\"992\" height=\"742\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.55.18-AM.png 992w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.55.18-AM-300x224.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.55.18-AM-768x574.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.55.18-AM-510x382.png 510w\" sizes=\"(max-width: 992px) 100vw, 992px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Query Editor and How to Edit, Write and Save Queries<\/h3>\n<p>I hope now you get a glimpse of it, as soon as you click on the preview table<\/p>\n<p>A new Query tab, would be opened with the following SQL query<\/p>\n<p>Note: The Query Tab would have auto incremented numbers like Query1, Query2 &#8230; QueryN<\/p>\n<p>You can start editing the Query and write your own SQL queries on the same tab.<\/p>\n<p>Or create a new Tab and write your Queries. by clicking on the <code>+<\/code> sign present the Name bar<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM.png\"><img class=\"post-img alignnone wp-image-9015 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM.png\" alt=\"Athena ALB Queries\" width=\"3554\" height=\"574\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM.png 3554w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM-300x48.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM-1024x165.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM-768x124.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM-1536x248.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM-2048x331.png 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-10.06.51-AM-1080x174.png 1080w\" sizes=\"(max-width: 3554px) 100vw, 3554px\" \/><\/a><\/p>\n<p>You can Save your query using <code>Save<\/code> button shown below the Query panel.\u00a0 Once saved it would be available on the <span style=\"color: #003366;\"><strong>saved queries<\/strong><\/span><\/p>\n<p>By default, all the executed queries would be available in the <strong><span style=\"color: #003366;\">recent queries<\/span> <\/strong>tab. You can re-launch it from there too.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM.png\"><img class=\"post-img alignnone wp-image-9014 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM.png\" alt=\"Athena ALB Queries\" width=\"3526\" height=\"1040\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM.png 3526w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM-300x88.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM-1024x302.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM-768x227.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM-1536x453.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM-2048x604.png 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-9.59.17-AM-1080x319.png 1080w\" sizes=\"(max-width: 3526px) 100vw, 3526px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>You can select a portion\/part of the query on the query editor by highlighting it and clicking on the <strong><span style=\"color: #003366;\">Run again<\/span><\/strong><\/p>\n<p>Otherwise, the entire query on the query editor would be executed by default.<\/p>\n<p>Now you know how Athena works and how to save, edit, write and execute the queries.<\/p>\n<p>Let us give you some Query examples to keep it handy for your troubleshooting<\/p>\n<p>&nbsp;<\/p>\n<h3>Application Load Balancer vs Classic Load Balancer &#8211; Fields Comparison<\/h3>\n<p>As we have mentioned earlier,\u00a0 the fields available would vary for the Application Load balancer and Classic Load Balancer.<\/p>\n<p>Here is the list of fields available for Classic Load Balancer<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">timestamp           \tstring              \t                    \r\nelb_name            \tstring              \t                    \r\nrequest_ip          \tstring              \t                    \r\nrequest_port        \tint                 \t                    \r\nbackend_ip          \tstring              \t                    \r\nbackend_port        \tint                 \t                    \r\nrequest_processing_time\tdouble              \t                    \r\nbackend_processing_time\tdouble              \t                    \r\nclient_response_time\tdouble              \t                    \r\nelb_response_code   \tstring              \t                    \r\nbackend_response_code\tstring              \t                    \r\nreceived_bytes      \tbigint              \t                    \r\nsent_bytes          \tbigint              \t                    \r\nrequest_verb        \tstring              \t                    \r\nurl                 \tstring              \t                    \r\nprotocol            \tstring              \t                    \r\nuser_agent          \tstring              \t                    \r\nssl_cipher          \tstring              \t                    \r\nssl_protocol        \tstring<\/pre>\n<p>&nbsp;<\/p>\n<p>Here is the list of fields available for Application Load Balancer<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">type                \tstring              \t                    \r\ntime                \tstring              \t                    \r\nelb                 \tstring              \t                    \r\nclient_ip           \tstring              \t                    \r\nclient_port         \tint                 \t                    \r\ntarget_ip           \tstring              \t                    \r\ntarget_port         \tint                 \t                    \r\nrequest_processing_time\tdouble              \t                    \r\ntarget_processing_time\tdouble              \t                    \r\nresponse_processing_time\tdouble              \t                    \r\nelb_status_code     \tstring              \t                    \r\ntarget_status_code  \tstring              \t                    \r\nreceived_bytes      \tbigint              \t                    \r\nsent_bytes          \tbigint              \t                    \r\nrequest_verb        \tstring              \t                    \r\nrequest_url         \tstring              \t                    \r\nrequest_proto       \tstring              \t                    \r\nuser_agent          \tstring              \t                    \r\nssl_cipher          \tstring              \t                    \r\nssl_protocol        \tstring              \t                    \r\ntarget_group_arn    \tstring              \t                    \r\ntrace_id            \tstring              \t                    \r\ndomain_name         \tstring              \t                    \r\nchosen_cert_arn     \tstring              \t                    \r\nmatched_rule_priority\tstring              \t                    \r\nrequest_creation_time\tstring              \t                    \r\nactions_executed    \tstring              \t                    \r\nredirect_url        \tstring              \t                    \r\nlambda_error_reason \tstring              \t                    \r\ntarget_port_list    \tstring              \t                    \r\ntarget_status_code_list\tstring              \t                    \r\nclassification      \tstring              \t                    \r\nclassification_reason\tstring<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>Athena SQL Queries for ELB troubleshooting<\/h2>\n<p>&nbsp;<\/p>\n<h3>Requests grouped by HTTP method and client IP<\/h3>\n<p>The following query counts the number of HTTP requests received by the load balancer grouped by the client IP address:<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">SELECT COUNT(request_verb) AS\r\n count,\r\n request_verb,\r\n client_ip\r\nFROM alb_logs\r\nGROUP BY request_verb, client_ip\r\nLIMIT 100;<\/pre>\n<p>Here is the output of this preceding SQL Query<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM.png\"><img class=\"post-img alignnone wp-image-9019 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM.png\" alt=\"ALB Athena\" width=\"2084\" height=\"1428\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM.png 2084w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM-300x206.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM-1024x702.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM-768x526.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM-1536x1052.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM-2048x1403.png 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-28-at-7.01.33-PM-1080x740.png 1080w\" sizes=\"(max-width: 2084px) 100vw, 2084px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Filter requests by HTTP method GET, POST, OPTIONS etc<\/h3>\n<p>Here is the SQL query to filter only POST requests<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">SELECT Count(request_verb) AS count,\r\n       request_verb,\r\n       client_ip\r\nFROM   alb_logs\r\nWHERE request_verb = 'POST'\r\nGROUP  BY request_verb,\r\n          client_ip\r\nLIMIT  100;<\/pre>\n<p>You can remove the <code>limit 100<\/code>\u00a0 or increase it if you want more data<\/p>\n<p>This query can be modified to filter other HTTP request methods like GET, OPTIONS, DELETE, HEAD etc<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"> &#8211; HTTP OPTIONS\r\nSELECT Count(request_verb) AS count,\r\n       request_verb,\r\n       client_ip\r\nFROM   alb_logs\r\nWHERE request_verb = 'OPTIONS'\r\nGROUP  BY request_verb,\r\n          client_ip\r\nLIMIT  100; \r\n\r\n &#8211; HTTP GET\r\nSELECT Count(request_verb) AS count,\r\n       request_verb,\r\n       client_ip\r\nFROM   alb_logs\r\nWHERE request_verb = 'GET'\r\nGROUP  BY request_verb,\r\n          client_ip\r\nLIMIT  100; \r\n\r\n &#8211; HTTP DELETE\r\nSELECT Count(request_verb) AS count,\r\n       request_verb,\r\n       client_ip\r\nFROM   alb_logs\r\nWHERE request_verb = 'DELETE'\r\nGROUP  BY request_verb,\r\n          client_ip\r\nLIMIT  100;<\/pre>\n<p>&nbsp;<\/p>\n<h3>Filter Requests based on HTTP Status code 200, 400, 5xx<\/h3>\n<p>Before we see the query, you need to understand that there are two status codes available per each request<\/p>\n<ul>\n<li>elb_status_code<\/li>\n<li>target_status_code<\/li>\n<\/ul>\n<p><strong>elb_status_code\u00a0<\/strong>is the status code returned by the ELB in case of no response from the target group or backend. All other times it would match the target_status_code<\/p>\n<p><strong>target_status_code\u00a0<\/strong>is the status code returned by the backend Application.<\/p>\n<p>Why both status code is necessary ?.<\/p>\n<p>Let&#8217;s suppose ELB time out is configured as 60 seconds and the backend is taking more time to respond. the target_status_code would be empty as the backend has not responded yet and the elb close the connect with status 504.<\/p>\n<p>In scenarios like this. target_status_code and elb_status_code both are crucial<\/p>\n<p>Here is the SQL query to find the requests with 5xx response.<\/p>\n<p>This would be helpful to find your endpoints which are throwing 5xx errors the most.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"> &#8211; SQL query to find requests with 5xx status codes\r\nSELECT request_url,\r\n       count(elb_status_code)\r\nFROM   alb_logs\r\nWHERE  elb_status_code BETWEEN 500 and 599\r\ngroup by request_url<\/pre>\n<p>&nbsp;<\/p>\n<p>Here is the query that helps to find out the 2xx and 4xx response codes<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"> &#8211; SQL query to find requests with 4xx status codes\r\nSELECT request_url,\r\n       count(elb_status_code)\r\nFROM   alb_logs\r\nWHERE  elb_status_code BETWEEN 400 and 499\r\ngroup by request_url\r\n\r\n &#8211; SQL query to find requests with 2xx status codes\r\nSELECT request_url,\r\n       count(elb_status_code)\r\nFROM   alb_logs\r\nWHERE  elb_status_code BETWEEN 200 and 299\r\ngroup by request_url<\/pre>\n<p>&nbsp;<\/p>\n<h3>Adding time range to the SQL Query &#8211; Find the top 10 users within time range<\/h3>\n<p>So far we have seen SQL Queries with no time range specification. Let&#8217;s suppose you want to find out which users\/IPs are using your service the most in a specific time range.<\/p>\n<p>You need to use the time range in your SQL query.<\/p>\n<p>Just like any other SQL query. It&#8217;s the simple\u00a0 Start time and end time combined with between clause.<\/p>\n<p>Here is a query to find out which IP has used the services or hit the LB the most in the 24-hour time range.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"> &#8211; Requests grouped by Client IP\r\nSELECT client_ip, count(client_ip) as cnt\r\nFROM myalb_logs\r\nWHERE  parse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') \r\n     BETWEEN parse_datetime('2022-08-29-00:00:00','yyyy-MM-dd-HH:mm:ss') \r\n     AND parse_datetime('2022-08-29-23:59:00','yyyy-MM-dd-HH:mm:ss')\r\nGROUP BY client_ip \r\nORDER BY cnt DESC<\/pre>\n<p>Here is the execution output. I have masked the IP address for security reasons.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM.png\"><img class=\"post-img alignnone wp-image-9020 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM.png\" alt=\"athena alb queries\" width=\"2846\" height=\"1768\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM.png 2846w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM-300x186.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM-1024x636.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM-768x477.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM-1536x954.png 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM-2048x1272.png 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-29-at-7.28.07-PM-1080x671.png 1080w\" sizes=\"(max-width: 2846px) 100vw, 2846px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Deep Dive into the user pattern &#8211; Finding the top 10 URLs used by the client IP \/ user<\/h3>\n<p>In the previous example we have found out who are our top 10 customers\/users by their total usage<\/p>\n<p>Next on our list is to find out what endpoints or URLs they (clients) use most.<\/p>\n<p>Here is the query to find out the top 10 most used endpoints\/URLs of the customer with the client_ip <code>13.xxx.xxx.xxx<\/code><\/p>\n<p>You can use this query and make modifications to find out the entire access log of some IP \/ user<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"> &#8211; Top 10 requests per IP\r\nSELECT request_url, client_ip, count(client_ip) as cnt\r\nFROM myalb_logs\r\nWHERE client_ip = '13.xxx.xxx.xxx'\r\nAND parse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z')\r\nBETWEEN parse_datetime('2022-08-29-00:00:00','yyyy-MM-dd-HH:mm:ss')\r\nAND parse_datetime('2022-08-29-23:59:00','yyyy-MM-dd-HH:mm:ss')\r\nGROUP BY client_ip, request_url\r\nORDER BY cnt DESC\r\nLIMIT 10<\/pre>\n<p>&nbsp;<\/p>\n<h3>Find Slow endpoints taking more processing time using AWS Athena<\/h3>\n<p>Here is one more Query where use the <code>request_processing_time<\/code> field of ALB logs to find out which request is taking more time.<\/p>\n<p>In other words, What are the slow URLs\/services in the ALB<\/p>\n<p>Here is the SQL Query to find out<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">SELECT request_url, AVG(request_processing_time) as avg_response, COUNT(request_url) as cnt\r\nFROM myalb_logs\r\nWHERE parse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') \r\n     BETWEEN parse_datetime('2022-08-24-00:00:00','yyyy-MM-dd-HH:mm:ss') \r\n     AND parse_datetime('2022-08-24-23:59:00','yyyy-MM-dd-HH:mm:ss')\r\nGROUP BY request_url\r\nORDER BY avg_response DESC\r\n<\/pre>\n<p>In this query, we are taking the Average response of the request URL and also showing the count, of how many requests have been taken into consideration.<\/p>\n<p>This would be helpful for finding the slowest endpoints behind the ALB and you can fix it for a good customer experience.<\/p>\n<p>&nbsp;<\/p>\n<h3>Athena SQL query group by 5 minutes time frame &#8211; Usage Pattern \/ Rate limit<\/h3>\n<p>This example is a real-time use case to understand your user&#8217;s behaviour and to find out some baseline numbers for usage.<\/p>\n<p>Let&#8217;s say you want to implement a Rate limit on the Application Load Balancer with AWS WAF and you want to know what is the current usage pattern<\/p>\n<p>How many users are reaching the application every 5 minutes?<\/p>\n<p>Who are our Highly contributing and heavy usage customers? What is the usage pattern of our customers? Is there a DDOS attack or Burst requests from any customer?<\/p>\n<p>All these questions can be answered with the data you are going to collect<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"> &#8211; Check 5 minute Requests sort by time 00 to 23:50 &#8211; \r\n\r\nSELECT from_unixtime(floor(to_unixtime(from_iso8601_timestamp(request_creation_time)) \/ 300 )*300) as timekey, client_ip, count(client_ip) as cnt\r\nFROM \"sampledb\".\"myalb_logs\"\r\nWHERE parse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') \r\n     BETWEEN parse_datetime('2022-09-30-00:00:00','yyyy-MM-dd-HH:mm:ss') \r\n     AND parse_datetime('2022-09-30-23:59:00','yyyy-MM-dd-HH:mm:ss')\r\nGROUP BY from_unixtime(floor(to_unixtime(from_iso8601_timestamp(request_creation_time)) \/ 300 )*300) , client_ip\r\nORDER BY timekey, client_ip DESC\r\n\r\n &#8211; Check 5 minute Requests sort by Request Count &#8211; \r\n\r\nSELECT from_unixtime(floor(to_unixtime(from_iso8601_timestamp(request_creation_time)) \/ 300 )*300) as timekey, client_ip, count(client_ip) as cnt\r\nFROM \"sampledb\".\"myalb_logs\"\r\nWHERE parse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') \r\n     BETWEEN parse_datetime('2022-09-01-00:00:00','yyyy-MM-dd-HH:mm:ss') \r\n     AND parse_datetime('2022-09-30-23:59:00','yyyy-MM-dd-HH:mm:ss')\r\nGROUP BY from_unixtime(floor(to_unixtime(from_iso8601_timestamp(request_creation_time)) \/ 300 )*300) , client_ip\r\nORDER BY cnt DESC\r\n\r\n &#8211; Check 5 minute Requests For Single User IP &#8211; \r\n\r\nSELECT from_unixtime(floor(to_unixtime(from_iso8601_timestamp(request_creation_time)) \/ 300 )*300) as timekey, client_ip, count(client_ip) as cnt\r\nFROM \"sampledb\".\"myalb_logs\"\r\nWHERE client_ip = '13.**.**.105' AND parse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') \r\n     BETWEEN parse_datetime('2022-09-01-00:00:00','yyyy-MM-dd-HH:mm:ss') \r\n     AND parse_datetime('2022-09-30-23:59:00','yyyy-MM-dd-HH:mm:ss')\r\nGROUP BY from_unixtime(floor(to_unixtime(from_iso8601_timestamp(request_creation_time)) \/ 300 )*300) , client_ip\r\nORDER BY cnt DESC<\/pre>\n<p>I have written three queries for different use cases<\/p>\n<ul>\n<li>Requests count for all clients grouped by every 5 minutes<\/li>\n<li>Find the request counts of all clients based on the 5-minute usage. sort Higher to lower<\/li>\n<li>Find the usage pattern of a single client_ip (user)<\/li>\n<\/ul>\n<p>All these data would help us to retrospect our application and to set some fair usage policy and rate limiting.<\/p>\n<p>Hope this helps<\/p>\n<p>&nbsp;<\/p>\n<h3>Find the requests closed by the Client abruptly &#8211; HTTP status code 499 or 460<\/h3>\n<p>At times, when you are trying to troubleshoot a user&#8217;s session, you might find a status code <code>460<\/code> on the ALB logs, It is a response of ALB to indicate that the client has closed the connection<\/p>\n<p>This is like the nginx 499 status code to indicate that the client has closed the connection<\/p>\n<p>In a system architecture where ALB and NGINX both are used together. when the client has closed the connection due to network issues or some browser issues. you might see 499 at the nginx level and 460 at the alb level.<\/p>\n<p>Here is the diagram I have created, that represents this scenario<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM.jpg\"><img class=\"post-img alignnone wp-image-9406 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM.jpg\" alt=\"alb athena status code\" width=\"2096\" height=\"850\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM.jpg 2096w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM-300x122.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM-1024x415.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM-768x311.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM-1536x623.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM-2048x831.jpg 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-12-08-at-10.52.17-PM-1080x438.jpg 1080w\" sizes=\"(max-width: 2096px) 100vw, 2096px\" \/><\/a><\/p>\n<p>you can see when the client closes the connection. ALB responds with 460.<\/p>\n<p>You can use the following ALB Athena SQL query to find such client-closed connections with alb response code 460<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">SELECT request_url, client_ip, elb_status_code, target_status_code, count(request_url) as totalrequests FROM \"sampledb\".\"alblogs\"\r\nWHERE elb_status_code = 460 AND\r\nparse_datetime(request_creation_time,'yyyy-MM-dd''T''HH:mm:ss.SSSSSS''Z') \r\n     BETWEEN parse_datetime('2022-12-01-00:00:00','yyyy-MM-dd-HH:mm:ss') \r\n     AND parse_datetime('2022-12-08-23:59:00','yyyy-MM-dd-HH:mm:ss') AND \r\nrequest_url like '%\/some\/pattern\/to\/search%'\r\nGROUP BY elb_status_code,request_url, client_ip, elb_status_code, target_status_code\r\nORDER by totalrequests desc<\/pre>\n<p>In this query, we are searching for a URL pattern as well as a status code between the time range.<\/p>\n<p>&nbsp;<\/p>\n<h2>There are more SQL Queries. Coming up<\/h2>\n<p>I know we have covered only a few SQL queries\/examples to show the capability of ALB logs and Athena.<\/p>\n<p>But there are various fields that we are yet to explore and the possibility is huge.<\/p>\n<p>So we will try to add more examples to this article consistently.<\/p>\n<p>You can comment on your favourite\/Handy Athena SQL queries for SQL troubleshooting and get it featured here.<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>Hope this helps.<\/p>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nSarav<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577256\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"9000\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577256\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577256\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>ALB(Application Load Balancer) Logs are a great asset when it comes to troubleshooting.\u00a0 It provides a finer detail of the HTTP request processed by the ALB and sent to the target. ALB logs provide various fields and data which are essential to understanding the request flow. You can use it[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":9025,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[234],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Athena SQL Query Examples for ALB troubleshooting | Devops Junction<\/title>\n<meta name=\"description\" content=\"Athena SQL Queries for ALB troubleshooting. Amazon Athena example, AWS Athena Elastic Load Balancer example. Athena Query examples for Athena for ALB troubleshooting.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Athena SQL Query Examples for ALB troubleshooting | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Athena SQL Queries for ALB troubleshooting. Amazon Athena example, AWS Athena Elastic Load Balancer example. Athena Query examples for Athena for ALB troubleshooting.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2022-08-29T15:09:58+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-12-08T18:58:56+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1748\" \/>\n\t<meta property=\"og:image:height\" content=\"1240\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/aws-athena-queries.jpg\",\"width\":1748,\"height\":1240,\"caption\":\"amazon athena\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/\",\"name\":\"Athena SQL Query Examples for ALB troubleshooting | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#primaryimage\"},\"datePublished\":\"2022-08-29T15:09:58+00:00\",\"dateModified\":\"2022-12-08T18:58:56+00:00\",\"description\":\"Athena SQL Queries for ALB troubleshooting. Amazon Athena example, AWS Athena Elastic Load Balancer example. Athena Query examples for Athena for ALB troubleshooting.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Athena SQL Query Examples for ALB troubleshooting | Devops Junction\",\"datePublished\":\"2022-08-29T15:09:58+00:00\",\"dateModified\":\"2022-12-08T18:58:56+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#primaryimage\"},\"articleSection\":\"AWS\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/aws-athena-queries-examples-alb\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/9000"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=9000"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/9000\/revisions"}],"predecessor-version":[{"id":9407,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/9000\/revisions\/9407"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/9025"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=9000"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=9000"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=9000"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}