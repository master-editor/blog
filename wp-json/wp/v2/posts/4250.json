{"id":4250,"date":"2019-10-21T05:34:57","date_gmt":"2019-10-21T00:04:57","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=4250"},"modified":"2022-06-19T11:25:54","modified_gmt":"2022-06-19T05:55:54","slug":"ansible-shell-examples","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/","title":{"rendered":"Ansible Shell Module Examples"},"content":{"rendered":"<p>&nbsp;<\/p>\n<p>Ansible <code>shell<\/code> module is designed to execute Shell commands against the target Unix based hosts. Unlike the Ansible command module, Ansible Shell would accept any highly complexed commands with pipes, redirection etc and you can also execute Shell scripts using Ansible Shell module.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM.png\"><img class=\"alignnone size-full wp-image-4270\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM.png\" alt=\"Ansible Shell\" width=\"1371\" height=\"749\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM.png 1371w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM-300x164.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM-768x420.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM-1024x559.png 1024w\" sizes=\"(max-width: 1371px) 100vw, 1371px\" \/><\/a><\/p>\n<p>The Advantage of Ansible Shell module of supporting highly complexed commands with <code>pipes<\/code> and <code>semicolons<\/code>\u00a0 can also be a disadvantage from the security perspective as a single mistake could cost a lot and break the system integrity. But there are some security best practices you can follow while using Shell module and you will be fine. It will also be discussed in this post.<\/p>\n<p>Before we proceed further to see the examples. I must mention something important.<\/p>\n<blockquote><p>Ansible Shell module is designed to work only with Linux based Machines and not Windows. For windows you should use <code>win_shell<\/code> module<\/p>\n<p>Though Ansible <code>Shell<\/code> module can be used to execute Shell scripts. Ansible\u00a0 has a dedicated module named <code>Script<\/code> which can be used to copy the Shell script from the control machine to the remote server and to execute.<\/p>\n<p>Based on your requirement you can use either Script or Shell module to execute your scripts.<\/p><\/blockquote>\n<p>Let us see the syntax of how to use ansible shell module in Adhoc and playbooks.<\/p>\n<p>&nbsp;<\/p>\n<h2>Index<\/h2>\n<ul>\n<li>Quick Syntax of Ansible Shell in ADHOC<\/li>\n<li>Quick Syntax of Ansible Shell in Playbook<\/li>\n<li>Ansible Shell module Examples\n<ol>\n<li>Ansible Shell module to execute a Single Command<\/li>\n<li>Ansible Shell &#8211; Execute a Command with Pipe and Redirection<\/li>\n<li>Execute a Shell Script with Ansible Shell command<\/li>\n<li>Run a Shell command in a specific directory<\/li>\n<li>Run a Shell Command only if the file present or not present<\/li>\n<li>Using Templated Variable and Usage of Quote Filter &#8211; Security Best practice<\/li>\n<li>Execute Multiple commands in a Single Shell<\/li>\n<\/ol>\n<\/li>\n<li>Conclusion<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2>A Quick Syntax of <span style=\"color: #e0105c;\">Ansible Shell<\/span> module &#8211; <span style=\"color: #e0105c;\">ADHOC<\/span><\/h2>\n<p>Here is the quick Syntax of Ansible Shell module in ADHOC manner.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-8.58.01-PM.png\"><img class=\"alignnone size-full wp-image-4254\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-8.58.01-PM.png\" alt=\"Ansible Shell\" width=\"600\" height=\"276\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-8.58.01-PM.png 600w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-8.58.01-PM-300x138.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" \/><\/a><\/p>\n<p>To know more about Ad hoc commands and how to use them please refer to the following Cheat Sheet.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/\" target=\"_blank\" rel=\"noopener noreferrer\">Ansible AD HOC commands Cheatsheet<\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>A Quick Syntax of <span style=\"color: #e0105c;\">Ansible Shell<\/span> module in a <span style=\"color: #e0105c;\">Playbook<\/span><\/h2>\n<p>The Beauty of Playbook is the way it looks and written. Since it is written in <code>yaml<\/code> it can be easily understood as well.<\/p>\n<p>The following picture would demonstrate how an ADHOC command would be transformed as a PLAY of a Ansible Playbook.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-9.21.45-PM.png\"><img class=\"alignnone size-full wp-image-4256\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-9.21.45-PM.png\" alt=\"\" width=\"603\" height=\"578\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-9.21.45-PM.png 603w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-19-at-9.21.45-PM-300x288.png 300w\" sizes=\"(max-width: 603px) 100vw, 603px\" \/><\/a><\/p>\n<p>If you are new to Playbook. I recommend you reading this article before proceeding further<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-playbook-introduction-and-examples\/\" target=\"_blank\" rel=\"noopener noreferrer\">Ansible Playbook Introduction and Example<\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible Shell\u00a0<span style=\"color: #e0105c;\">Examples<\/span><\/h2>\n<ol>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_1_Execute_a_Single_Command_with_Ansible_Shell\">Ansible Shell module to execute a Single Command<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_2_Execute_a_Command_with_Pipe_and_Redirection\">Ansible Shell &#8211; Execute a Command with Pipe and Redirection<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_3_Execute_a_Shell_Script_with_Shell_command\">Execute a Shell Script with Ansible Shell command<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_4_Run_a_Shell_Command_in_a_Specific_directory\">Run a Shell command in a specific directory<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_5_Run_a_Shell_Command_based_on_file_availability\">Run a Shell Command only if the file present or not present<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_6_Usage_of_quote_filter_to_avoid_Injection\">Using Templated Variable and Usage of Quote Filter &#8211; Security Best practice<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#Example_7_Execute_multiple_commands_in_a_Single_Shell_Play\">Execute Multiple commands in a Single Shell<\/a><\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<p>Before we proceed.\u00a0 I presume that you have basic knowledge about Ansible and know what is hostgroup, Play etc. If not. please read the Ansible Playbook Introduction and come back here<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<div id=\"ex1\">\n<h3>Example 1: Execute a Single Command with Ansible Shell<\/h3>\n<\/div>\n<p>Our First Example is to run any command on the remote host using the Shell module.<\/p>\n<p>Rather taking any command, Let us follow the same convention we have followed in this post and get the date of the remote server. In my case the remote server is under the hostgroup named <code>testservers<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Check Date with Shell command\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n         <span class=\"hljs-string\" style=\"color: #a5c261;\">\"date\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> datecmd\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> datecmd\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - debug:<\/span> msg=<span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{datecmd.stdout}}<\/span>\"<\/span><\/pre>\n<p>In the preceding example, you can see that we are running our playbook against a hostgroup named <code>testservers<\/code> and executing a simple <code>date<\/code> command and saving the output of that command into a Register variable named <code>datecmd<\/code><\/p>\n<p>At the last line, we are retrieving the registered variable and printing only the date command output stored in the\u00a0 <code>stdout<\/code> property of <code>datacmd<\/code><\/p>\n<p>Here is the execution output of the same playbook as recorded<\/p>\n<p><script id=\"asciicast-opAtJPpKAEa7v8vX43g6xR0gX\" src=\"https:\/\/asciinema.org\/a\/opAtJPpKAEa7v8vX43g6xR0gX.js\" async><\/script><\/p>\n<p>Hope this gives you an idea about the playbook and how Shell module works. Let&#8217;s explore more.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3>Example 2: Execute a Command with Pipe and Redirection<\/h3>\n<p>As said earlier Shell module would accept the Linux commands with symbols such as Pipes, Redirections and Semicolons.<\/p>\n<p>Now let us take some Linux command with Redirection and Pipes.<\/p>\n<p>Let us suppose that we want to execute a given below command with Pipe and redirection. It is a basic\u00a0 <code>ls<\/code> command with some processing with <code>awk<\/code> and we remove the empty lines with <code>sed<\/code> and redirect the final output to a file named <code>dirlist.txt<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\">ls -lrt|awk <span class=\"hljs-string\" style=\"color: #a5c261;\">'{print $9}'<\/span>|sed <span class=\"hljs-string\" style=\"color: #a5c261;\">'\/^$\/d'<\/span> &gt; \/tmp\/dirlist.txt<\/pre>\n<p>Here is the playbook with the preceding command.<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Dir list and write to file\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n         <span class=\"hljs-string\" style=\"color: #a5c261;\">\" ls -lrt \/apps|awk '{print $9}'|sed '\/^$\/d' &gt; \/tmp\/dirlist.txt \"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> lsout\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> lsout\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Display the file\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span> cat \/tmp\/dirlist.txt\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> displaylist\r\n      \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - debug:<\/span> msg=<span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{displaylist.stdout_lines}}<\/span>\"<\/span><\/pre>\n<p>In the preceding playbook, we are executing the command without any modification and on the next play <code>Display the file<\/code> we are trying displaying the file content with <code>cat<\/code> and saving the output to a register variable named <code>displaylist<\/code><\/p>\n<p>At last, we are using debug to display the output saved in the <code>displaylist<\/code> variable<\/p>\n<p>Here is the execution output of the playbook.<\/p>\n<p><script id=\"asciicast-dyvck4WgT0jSmCOSvoKM3xQbg\" src=\"https:\/\/asciinema.org\/a\/dyvck4WgT0jSmCOSvoKM3xQbg.js\" async><\/script><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 3:\u00a0 Execute a Shell Script with Shell command<\/h3>\n<p>Though it is recommended to use <code>script<\/code> module for executing the shell script.\u00a0 <code>Shell<\/code>\u00a0 module can also execute the scripts just the way you would execute it on your terminal.<\/p>\n<p>Here is the playbook which starts the tomcat server on the remote server by executing the tomcat&#8217;s startup script.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Start tomcat\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become_user:<\/span> tomcat\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">      async:<\/span> <span class=\"hljs-number\">10<\/span>\r\n<span class=\"hljs-attr\">      poll:<\/span> <span class=\"hljs-number\">0<\/span><\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n         <span class=\"hljs-string\" style=\"color: #a5c261;\">\".\/startup.sh\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      args:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        chdir:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/apps\/tomcat\/tomcat8\/bin\"<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> datecmd\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> datecmd\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Validate if tomcat is UP\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> tomvalidate\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      wait_for:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        host:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"localhost\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        port:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">8080<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        delay:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        timeout:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">30<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        state:<\/span> started\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        msg:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"Tomcat server is not running\"<\/span><\/pre>\n<p>There are playbooks in the playbook, The First one is to start the tomcat using the <code>shell<\/code> module and the another is to validate if the service is running by validating the <code>port status<\/code>\u00a0 using\u00a0 <code>wait_for<\/code>module.<\/p>\n<blockquote><p><strong>\u00a0Some Important Note *:<\/strong><\/p>\n<p>You might wonder why I have used the <span style=\"color: #e82c58;\"><code>async<\/code><\/span>\u00a0 and the <span style=\"color: #e82c58;\"><code>poll<\/code><\/span> directives here along with the shell module.<\/p>\n<p>The reason is that my Tomcat JVM is a long running process, If I try to start my Tomcat without this asynchrnous flag. My Tomcat process would be stopped as soon as my play is completed.<\/p>\n<p>If you want your command or the script you are using in Shell\u00a0 to start something which should be UP and RUNNING even after your playbook completed. You should use async flag<\/p>\n<p>In other words this is called `Fire and Forget` in Ansible parlance. I will write a post about this shortly.<\/p><\/blockquote>\n<p>Here is the execution output of the preceding Playbook.<\/p>\n<p><script id=\"asciicast-yStDaaM7SH8gMM6hv2wwZDV0Q\" src=\"https:\/\/asciinema.org\/a\/yStDaaM7SH8gMM6hv2wwZDV0Q.js\" async><\/script><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 4: Run a Shell Command in a Specific directory<\/h3>\n<p>Sometimes we want to execute a command after <code>cd<\/code> ing into some specific directory.\u00a0 For example, you can consider the previous example of starting tomcat. If you have noticed, we used a parameter named <code>chdir<\/code> to specify in which directory the command should be executed.<\/p>\n<p>So this example is about the same <code>chdir<\/code> parameter.<\/p>\n<p>Since this parameter is self-descriptive. I hope you can easily understand it without further ado.<\/p>\n<p>In the previous example we have already used this <code>chdir<\/code> .However, I will give one more example down below<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Open \/etc\/password file\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n         <span class=\"hljs-string\" style=\"color: #a5c261;\">\"cat password\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      args:<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">        chdir:<\/span> <span class=\"hljs-string\">\"\/etc\"<\/span> <\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> fileout\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> fileout\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - debug:<\/span> msg=<span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{ fileout.stdout-lines }}<\/span>\"<\/span><\/pre>\n<p>We all know that the Linux <strong>passwd<\/strong> file is available in the <code>\/etc<\/code> directory.\u00a0 I am trying to display the content of this file, In order to explain this chdir, I have made my shell command with just a file name and not the path.<\/p>\n<p>I am passing the directory name with the help of\u00a0 <code>chdir<\/code> so the this play would successfully display the content of\u00a0 <code>etc\/passwd<\/code><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 5: Run a Shell Command based on file availability<\/h3>\n<p>We cannot always go blind and try to execute a command\/script without any prior validation. In most of the cases, it might be necessary that we should check if the execution is really needed?<\/p>\n<p>There are various conditional based execution methods available in Ansible. Here we are going to see a quick one, almost built-in with many modules.<\/p>\n<p>The <code>creates<\/code> parameter.<\/p>\n<p>All it does is to tell a Shell that the command we are executing would create some file.\u00a0 As a biproduct it also validates if the file is already available and skips the command execution if the file is already present. Thereby avoiding a Duplicate process Creation and protect the system integrity by an accidental overdo.<\/p>\n<p>Here is a simple example with <code>creates<\/code> in it.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Start the DB batch upload\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span>\r\n         <span class=\"hljs-string\" style=\"color: #a5c261;\">\".\/startbatchupload.sh\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      args:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        chdir:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/apps\/dbscripts\/\"<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">        creates:<\/span> <span class=\"hljs-string\">\"startbatchupload.lock\"<\/span> <\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> fileout\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> fileout<\/pre>\n<p>What we do in the previous example is that we try to start an important db patch process after validating the presence of a lock file <code>startbatchupload.lock<\/code><\/p>\n<p>The lock file is supposed to be created by the script that we are trying to execute. If it is already present which means there is another instance of the same script already running on the server. Thats the logic behind this validation.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3>Example 6:\u00a0 Usage of quote filter to avoid Injection<\/h3>\n<p>In all these previous examples, we were executing a Shell commands directly specified in the <code>Shell<\/code> module. We have not\u00a0 used any variables and templating like declaring the command to be executed as a varible and calling it out later in the play.<\/p>\n<p>I presume you are aware of the <code>Jinja2 templates<\/code> in Ansible. It is the way we should access the variables inside the playbook. ( more like a $VARIABLE_NAME in shell)<\/p>\n<p>First, let us see how to declare the command as variable and use it later.<\/p>\n<p>For better understanding, Let me take the same playbook we have used in Example 5 and make some modification.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers<span style=\"color: #ffff00;\">\r\n<span class=\"hljs-attr\">    vars:<\/span>\r\n<span class=\"hljs-attr\">      - script-to-start:<\/span> <span class=\"hljs-string\">\".\/startbatchupload.sh\"<\/span><\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Start the DB batch upload\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span><span style=\"color: #ffff00;\">\r\n<span class=\"hljs-attr\">      shell:<\/span>\r\n          <span class=\"hljs-string\">\"<span class=\"hljs-template-variable\">{{ script-to-start }}<\/span>\"<\/span><\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      args:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        chdir:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/apps\/dbscripts\/\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        creates:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"startbatchupload.lock\"<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> fileout\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> fileout<\/pre>\n<p>In the preceding playbook you can see that we have declared the script name as a variable and calling it out later inside the play using Jinja2 filter <code><span class=\"hljs-string\">\"<span class=\"hljs-template-variable\">{{ script-to-start }}<\/span>\"<\/span><\/code><\/p>\n<p>Thought it would look Good and work good. It has a security issue. As it is prone to <code>Injection attack<\/code> it is more like an `SQL injection` where the hacker can change the command at the runtime.<\/p>\n<p>In order to avoid the same. Ansible recommends using <strong>quote filter <\/strong>whenever you have to template the variable in the Shell module like given below.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span style=\"color: #ff9900;\"> WRONG WAY :<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{ script-to-start }}<\/span>\"<\/span>\r\n\r\n<span style=\"color: #00ff00;\"> THE RIGHT WAY :<\/span>  <span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{ script-to-start <span style=\"color: #ffff00;\">| quote<\/span> }}<\/span>\"<\/span><\/pre>\n<p>as shown in the above snippet, the right way to template the Shell Command is to use a <code>quote<\/code> at the end.<\/p>\n<p>the modified playbook would like this<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    vars:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      - script-to-start:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\".\/startbatchupload.sh\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Start the DB batch upload\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">0<\/span>\r\n<span style=\"color: #ffff00;\"><span class=\"hljs-attr\">      shell:<\/span>\r\n          <span class=\"hljs-string\">\"<span class=\"hljs-template-variable\">{{ script-to-start | quote}}<\/span>\"<\/span><\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      args:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        chdir:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/apps\/dbscripts\/\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        creates:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"startbatchupload.lock\"<\/span> \r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> fileout\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> fileout<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3>Example 7:\u00a0 Execute multiple commands in a Single Shell &#8211; Play<\/h3>\n<p>In all the previous examples we have only seen a Single command in a Shell module, Last but not least you should also know that Shell can accept multiple commands ( a batch) together in a Single Shell Play.<\/p>\n<p>In fact, You can write your own Shell script alike inline with Ansible Shell module.<\/p>\n<p>Here is the playbook, where I have grouped some shell commands to perform a Controlled and Clean tomcat restart.<\/p>\n<p>The playbook is designed to perform the following steps in an order.<\/p>\n<ul>\n<li>Stop the TomcatServer<\/li>\n<li>Clear the Cache<\/li>\n<li>Truncate the Log file<\/li>\n<li>Start the instance<\/li>\n<\/ul>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323 none repeat scroll 0% 0%; color: #e6e1dc;\"><span class=\"hljs-meta\" style=\"color: #9b859d;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">  - name:<\/span> Shell Examples\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    hosts:<\/span> testservers\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - name:<\/span> Clear Cache and Restart tomcat\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      become:<\/span> <span class=\"hljs-literal\">yes<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      delay:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      async:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">10<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      poll:<\/span> <span class=\"hljs-number\" style=\"color: #a5c261;\">60<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      shell:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">|\r\n\r\n        echo -e \"\\n Change directory to the Tomcat\"\r\n        cd tomcat8\/\r\n\r\n        echo -e \"\\n Present working directory is\" `pwd`\r\n        \r\n        echo -e \"\\n Stopping the tomcat instance\"\r\n        bin\/shutdown.sh\r\n      \r\n        echo -e \"\\n Clearning the tmp and work directory of tomcat\"\r\n        rm -rfv tmp\/*\r\n        rm -rfv work\/*\r\n\r\n        echo -e \"\\nTruncate the log file\"\r\n        &gt; logs\/catalina.out\r\n\r\n        echo -e \"\\nDirectory listing\"\r\n        ls -lrtd logs\/catalina.out\r\n\r\n        echo -e \"\\nStarting the instance\"\r\n        bin\/startup.sh\r\n          \r\n<\/span><span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      args:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">        chdir:<\/span> <span class=\"hljs-string\" style=\"color: #a5c261;\">\"\/apps\/tomcat\/\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      register:<\/span> fileout\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">      tags:<\/span> fileout \r\n\r\n<span class=\"hljs-attr\" style=\"color: #6d9cbe;\">    - debug:<\/span> msg=<span class=\"hljs-string\" style=\"color: #a5c261;\">\"<span class=\"hljs-template-variable\" style=\"color: #a5c261;\">{{ fileout.stdout_lines }}<\/span>\"<\/span><\/pre>\n<p>You might really get a question this time how this would run and what output it would give. No worries, refer the following screen record.<\/p>\n<p><script id=\"asciicast-TMCvyQzpQwsF2G8bUTDEODHPJ\" src=\"https:\/\/asciinema.org\/a\/TMCvyQzpQwsF2G8bUTDEODHPJ.js\" async><\/script><br \/>\nSo it works!.<\/p>\n<p>However!. I recommend writing a Script and using the script module instead of writing an inline script like this but let the requirement be the Judge.<\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>Ansible Shell module is powerful and widely used, but with a lot of power comes the great fear.\u00a0\u00a0 As mentioned earlier, There are chances Ansible Shell module could lead to an Injection attack or break the system integrity so remember to use <code>quote<\/code> with Template variables and follow other best practices.<\/p>\n<p>For controlled execution of Shell commands, You can use the Ansible <code>Command<\/code> module but as I already mentioned, Let your requirement be the judge.<\/p>\n<p><script type=\"test\/javascript\">\n   var codes =  document.querySelectorAll('code');\n   codes.forEach( function(code, index) {\n     code.style.setProperty('color', 'rgb(232, 44, 88)')\n   });\n<\/script><\/p>\n<p>Hope it helps!.<\/p>\n<p>Rate this article [ratings]<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577805\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"4250\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577805\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577805\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>&nbsp; Ansible shell module is designed to execute Shell commands against the target Unix based hosts. Unlike the Ansible command module, Ansible Shell would accept any highly complexed commands with pipes, redirection etc and you can also execute Shell scripts using Ansible Shell module. The Advantage of Ansible Shell module[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":4270,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[338,335,336,339,337],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible Shell Module Examples | Devops Junction<\/title>\n<meta name=\"description\" content=\"Ansible Shell Examples, How to Execute Shell Commands with Ansible Shell module. How to use Ansible Shell modules. Ansible Shell commands and how to run Commands in Ansible Shell. How to run a Script using Ansible Shell, run Linux Commands using Ansible Shell. Run Script in background with Shell, Run multiple commands\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible Shell Module Examples | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Ansible Shell Examples, How to Execute Shell Commands with Ansible Shell module. How to use Ansible Shell modules. Ansible Shell commands and how to run Commands in Ansible Shell. How to run a Script using Ansible Shell, run Linux Commands using Ansible Shell. Run Script in background with Shell, Run multiple commands\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-10-21T00:04:57+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-06-19T05:55:54+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1371\" \/>\n\t<meta property=\"og:image:height\" content=\"749\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/10\/Screenshot-2019-10-21-at-5.29.32-AM.png\",\"width\":1371,\"height\":749,\"caption\":\"Ansible Shell\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/\",\"name\":\"Ansible Shell Module Examples | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#primaryimage\"},\"datePublished\":\"2019-10-21T00:04:57+00:00\",\"dateModified\":\"2022-06-19T05:55:54+00:00\",\"description\":\"Ansible Shell Examples, How to Execute Shell Commands with Ansible Shell module. How to use Ansible Shell modules. Ansible Shell commands and how to run Commands in Ansible Shell. How to run a Script using Ansible Shell, run Linux Commands using Ansible Shell. Run Script in background with Shell, Run multiple commands\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible Shell Module Examples\",\"datePublished\":\"2019-10-21T00:04:57+00:00\",\"dateModified\":\"2022-06-19T05:55:54+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#primaryimage\"},\"keywords\":\"Ansible Script execute,Ansible Shell,Ansible Shell Examples,Ansible Shell multiple commands,Ansible Shell script\",\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-shell-examples\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4250"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=4250"}],"version-history":[{"count":21,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4250\/revisions"}],"predecessor-version":[{"id":6323,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4250\/revisions\/6323"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/4270"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=4250"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=4250"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=4250"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}