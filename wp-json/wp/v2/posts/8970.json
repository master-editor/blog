{"id":8970,"date":"2022-08-07T23:02:07","date_gmt":"2022-08-07T17:32:07","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=8970"},"modified":"2022-08-07T23:02:32","modified_gmt":"2022-08-07T17:32:32","slug":"creating-elb-flow-charts-using-python-boto-diagrams","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/","title":{"rendered":"Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction"},"content":{"rendered":"<p>Creating Flow Charts is an essential element of Infrastructure Management and System Architecture. Creating Diagrams from Code is a remarkable breakthrough In recent times.<\/p>\n<p><a href=\"https:\/\/diagrams.mingrammer.com\/\">Python Diagrams<\/a> is indeed a leader in this space and you can create your cloud diagrams in few minutes.<\/p>\n<p>All you need is some knowledge of python and you can create beautiful Diagrams using the code.<\/p>\n<p>In this article, I am going to create diagrams for all the ELBs in my aws account using Python Boto3 and Diagram as code. <strong>Completely Dynamic as the data is fetched Live using Boto<\/strong><\/p>\n<blockquote><p>This would be a great help for <strong>SREs<\/strong> and <strong>DevOps\/Cloud Engineers<\/strong> to keep a record\/flowcharts of their Infrastructure setup and Maintain it <strong>Automated<\/strong><\/p><\/blockquote>\n<p>With no further ado, Let us move on to the objective.<\/p>\n<p>Here is a quick glimpse of what we are going to do. Looks interesting is not it ?<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg\"><img class=\"post-img alignnone wp-image-8980 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg\" alt=\"AWS ELB flowchart\" width=\"2560\" height=\"1440\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg 2560w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-300x169.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-1024x576.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-768x432.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-1536x864.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-2048x1152.jpg 2048w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-1080x608.jpg 1080w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" \/><\/a><\/p>\n<h2>Prerequisites<\/h2>\n<ul>\n<li>Python3 Must be installed<\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-cli-ec2\/#Install_AWS_CLI\">AWS CLI must be installed and configured<\/a><\/li>\n<li><a href=\"https:\/\/pip.pypa.io\/en\/stable\/installation\/\">python pip must be installed<\/a> to install other packages.<\/li>\n<li>Necessary IAM access to connect and pull information on ELBs from AWS account.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2>Setting up workspace<\/h2>\n<p>You can start by downloading the source code from my GITHUB repository and installing the necessary packages and running it.<\/p>\n<p>We presume that your AWS CLI is already installed and configured. so we are not covering it in detail.<\/p>\n<p>If you are new to AWS CLI <a href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-cli-ec2\/\" target=\"_blank\" rel=\"noopener noreferrer\">refer to our previous article<\/a>\u00a0before proceeding<\/p>\n<p>&nbsp;<\/p>\n<h3>Download the Source code<\/h3>\n<p>You can download the source code from the <a href=\"https:\/\/github.com\/AKSarav\/AWS_ELB_Diagram\">Github repository.<\/a> or just copy and paste the scripts given below.<\/p>\n<p>There are two scripts. one for Application and Network load balancer another for classic Load Balancer.<\/p>\n<ul>\n<li><strong>alb-diagram.py<\/strong> &#8211; For Application and Network Load Balancer<\/li>\n<li><strong>clb-diagram.py<\/strong> &#8211; For Classic Load Balancer<\/li>\n<\/ul>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>Here is the script for creating Diagrams \/ flow charts for the Application and network Load Balancers.<\/p>\n<p><span style=\"color: #e61968;\"><strong>alb-diagram.py<\/strong><\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">import boto3\r\nimport pprint\r\nimport sys\r\nimport json\r\n\r\ndef gettargetgroups(arn):\r\n    tgs=elb.describe_target_groups(LoadBalancerArn=arn)\r\n    tgstring=[]\r\n    for tg in tgs[\"TargetGroups\"]:\r\n        tgstring.append(tg[\"TargetGroupName\"])\r\n    return tgstring\r\n\r\ndef gettargetgrouparns(arn):\r\n    tgs=elb.describe_target_groups(LoadBalancerArn=arn)\r\n    tgarns=[]\r\n    for tg in tgs[\"TargetGroups\"]:\r\n        tgarns.append(tg[\"TargetGroupArn\"])\r\n    return tgarns\r\n\r\ndef getinstancename(instanceid):\r\n    instances=ec2.describe_instances(Filters=[\r\n        {\r\n            'Name': 'instance-id',\r\n            'Values': [\r\n                instanceid\r\n            ]\r\n        },\r\n    ],)\r\n    for instance in instances[\"Reservations\"]:\r\n        for inst in instance[\"Instances\"]:\r\n            for tag in inst[\"Tags\"]:\r\n                if tag['Key'] == 'Name':\r\n                    return (tag['Value'])\r\n\r\n    \r\ndef gettargethealth(arn):\r\n    # print(\"arn\",arn)\r\n    inss=elb.describe_target_health(TargetGroupArn=arn)\r\n    instanceids=[]\r\n    result=[]\r\n    for ins in inss[\"TargetHealthDescriptions\"]:\r\n        ins[\"Name\"]=getinstancename(ins['Target']['Id'])\r\n        instanceids.append(ins['Target']['Id'])\r\n        result.append(ins)\r\n    return result\r\n\r\ndef describelbs():\r\n    lbs = elb.describe_load_balancers(PageSize=400)\r\n    for lb in lbs[\"LoadBalancers\"]:\r\n        lbjson={}\r\n        lbjson['Name']=lb[\"LoadBalancerName\"]\r\n        lbjson['Type']=lb[\"Type\"]\r\n        lbjson['TG']=gettargetgrouparns(lb[\"LoadBalancerArn\"])\r\n        lbjson['TGData']=[]\r\n\r\n        TGLIST=[]\r\n        if len(lbjson[\"TG\"]) &gt; 0:\r\n            for tgs in lbjson['TG']:\r\n                TGD={}\r\n                TGD['Name']=tgs.split(\"\/\")[1]\r\n                tgh=gettargethealth(tgs)\r\n                if len(tgh) &gt; 0:\r\n                    TGD['Instances']=tgh\r\n                else:\r\n                    TGD['Instances']=\"\"\r\n                TGLIST.append(TGD)\r\n                \r\n            lbjson['TGData'] = TGLIST\r\n        \r\n        print(\"\\n\",json.dumps(lbjson, indent=4, sort_keys=True))        \r\n\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) &lt; 3:\r\n        print(\" &#8211; Region Name and the Profile name is mandatory &#8211; \")\r\n        print(\" Syntax: python3 clb-list-json.py us-east-1 default\")\r\n        exit()\r\n    region_name = sys.argv[1]\r\n    profile = sys.argv[2]\r\n    session = boto3.session.Session(profile_name=profile)\r\n    elb = session.client('elbv2')\r\n    ec2 = session.client('ec2')\r\n    describelbs()<\/pre>\n<p>&nbsp;<\/p>\n<p>Here is the script for creating Diagrams and flow charts for the Classic Load Balancers<\/p>\n<p><span style=\"color: #e61968;\"><strong>clb-diagram.py<\/strong><\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">import boto3\r\nimport pprint\r\nimport json\r\nimport sys\r\nfrom diagrams import Cluster, Diagram\r\nfrom diagrams.aws.compute import EC2\r\nfrom diagrams.aws.network import ELB\r\n\r\n\r\ndef getinstancename(instanceid):\r\n    instances=ec2.describe_instances(Filters=[\r\n        {\r\n            'Name': 'instance-id',\r\n            'Values': [\r\n                instanceid\r\n            ]\r\n        },\r\n    ],)\r\n\r\n    resultset = {}    \r\n    for instance in instances[\"Reservations\"]:\r\n        for inst in instance[\"Instances\"]:\r\n            resultset[\"State\"]=inst[\"State\"][\"Name\"]    \r\n            for tag in inst[\"Tags\"]:\r\n                if tag['Key'] == 'Name':\r\n                    resultset[\"Name\"]=tag['Value']\r\n    # print (resultset)  \r\n    return resultset\r\n             \r\n\r\ndef getinstancehealth(lbname,instanceid):\r\n    instancestate=elb.describe_instance_health(\r\n            LoadBalancerName=lbname,\r\n            Instances = [{\r\n                'InstanceId' : instanceid\r\n            }]\r\n            )\r\n    \r\n    return instancestate['InstanceStates'][0]['State']\r\n\r\ndef describelbs():\r\n    \r\n    lbs = elb.describe_load_balancers(PageSize=400)\r\n\r\n    for lb in lbs[\"LoadBalancerDescriptions\"]:\r\n        lbjson={}\r\n        lbjson['Name']=lb[\"LoadBalancerName\"]\r\n        lbjson['HealthCheck']=lb[\"HealthCheck\"]\r\n        lbjson['Instances']=[]\r\n\r\n        if len(lb[\"Instances\"]) &gt; 0:\r\n            InstanceList=[]\r\n            for instance in lb[\"Instances\"]:\r\n                instance.update(getinstancename(instance[\"InstanceId\"]))\r\n                instance['Health']=getinstancehealth(lb[\"LoadBalancerName\"], instance[\"InstanceId\"])\r\n                InstanceList.append(instance)\r\n            \r\n            lbjson['Instances']=InstanceList\r\n\r\n        print(\"\\n\",json.dumps(lbjson, indent=4, sort_keys=True))\r\n\r\n        with Diagram(profile+\"_CLB_\"+lbjson['Name'],show=False):\r\n                lb = ELB(lbjson['Name'])\r\n                instance_group=[]\r\n                for instance in lbjson['Instances']:\r\n                    instance_group.append(EC2(instance['Name']))\r\n                lb &gt;&gt; instance_group\r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) &lt; 3:\r\n        print(\" &#8211; Region Name and the Profile name is mandatory &#8211; \")\r\n        print(\" Syntax: python3 \",sys.argv[0],\" us-east-1 default\")\r\n        exit()\r\n    region_name = sys.argv[1]\r\n    profile = sys.argv[2]\r\n    print(\"profilename selected:\",profile)\r\n    print(\"regionname selected: \",region_name)\r\n    session = boto3.session.Session(profile_name=profile)\r\n    elb = session.client('elb')\r\n    ec2 = session.client('ec2')\r\n    describelbs()<\/pre>\n<p>&nbsp;<\/p>\n<h3>Install the necessary packages<\/h3>\n<p>You need to install the boto python package as the script demands it<\/p>\n<p>Hope you have already installed pip. now execute the following command to install boto3 with pip<\/p>\n<pre class=\"language-\" data-role=\"codeBlock\" data-info=\"\">pip install -r requirements.txt<\/pre>\n<p>Once the installation is complete we can start running our script.<\/p>\n<p>&nbsp;<\/p>\n<h3>Run the Scripts and Create Flowcharts\/Diagrams<\/h3>\n<p>&nbsp;<\/p>\n<p>Run the program with the following syntax.<\/p>\n<p>You need to use the right program for the right use case as there are two.<\/p>\n<ul>\n<li><strong>alb-diagram.py<\/strong> &#8211; for Application Load Balancers and Network Load Balancers<\/li>\n<li><strong>clb-diagram.py<\/strong> &#8211; for Classic Load Balancers<\/li>\n<\/ul>\n<p>Here is the syntax for running\u00a0<code>alb-diagram.py<\/code>\u00a0for creating diagrams for Application and Network Load Balancers<\/p>\n<pre class=\"language-\" data-role=\"codeBlock\" data-info=\"\">python3  alb-diagram.py  &lt;region_name&gt; &lt;profile_name&gt;\r\n<\/pre>\n<p>Here is the syntax for running\u00a0<code>clb-diagram.py<\/code>\u00a0for creating diagrams for Classic Load balancers<\/p>\n<pre class=\"language-shell\" data-role=\"codeBlock\" data-info=\"shell\">python3  clb-diagram.py  <span class=\"token operator\">&lt;<\/span>region_name<span class=\"token operator\">&gt;<\/span> <span class=\"token operator\">&lt;<\/span>profile_name<span class=\"token operator\">&gt;<\/span>\r\n<\/pre>\n<p>If you do not have named profiles, you can simply type\u00a0<code>default<\/code> as the profile name<\/p>\n<p>&nbsp;<\/p>\n<h2>Github link for Source code<\/h2>\n<p>Source code is available at the following link. Feel free to clone or create a PR for contributions<\/p>\n<pre>https:\/\/github.com\/AKSarav\/AWS_ELB_Diagram<\/pre>\n<p>&nbsp;<\/p>\n<h2>List ELBs with Targetgroup and Instance ( Additional)<\/h2>\n<p>This is how it started. Earlier versions of this script which prints the JSON and TEXT output of All the ELBs in your AWS account is discussed in our other article.<\/p>\n<p>Check it out.<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"l5B37W3ag5\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/\">AWS &#8211; List All ELB with TargetGroup and Instance Health | Python Boto<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;AWS &#8211; List All ELB with TargetGroup and Instance Health | Python Boto&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/aws-boto-script-list-all-elb-with-targetgroup-and-instance-health\/embed\/#?secret=l5B37W3ag5\" data-secret=\"l5B37W3ag5\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>Hope this helps. There are more things I wanted to try and continue to work on the same. Any contribution or Pull requests are welcome to make this more better.<\/p>\n<p>Since this is open source. feel free to update it to suit your needs and post how it helps in comments for the world to know.<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577287\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"8970\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577287\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577287\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Creating Flow Charts is an essential element of Infrastructure Management and System Architecture. Creating Diagrams from Code is a remarkable breakthrough In recent times. Python Diagrams is indeed a leader in this space and you can create your cloud diagrams in few minutes. All you need is some knowledge of[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":8980,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[234,426],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction<\/title>\n<meta name=\"description\" content=\"Creating ELB Flow Charts using Python Boto and Diagrams. Diagram as a Code aws ELB, ALB, NLB, CLB automated. Create Flowcharts aws python boto and diagrams\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Creating ELB Flow Charts using Python Boto and Diagrams. Diagram as a Code aws ELB, ALB, NLB, CLB automated. Create Flowcharts aws python boto and diagrams\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2022-08-07T17:32:07+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-07T17:32:32+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2560\" \/>\n\t<meta property=\"og:image:height\" content=\"1440\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2022\/08\/Screenshot-2022-08-07-at-10.43.38-PM-scaled.jpg\",\"width\":2560,\"height\":1440,\"caption\":\"AWS ELB flowchart\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/\",\"name\":\"Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#primaryimage\"},\"datePublished\":\"2022-08-07T17:32:07+00:00\",\"dateModified\":\"2022-08-07T17:32:32+00:00\",\"description\":\"Creating ELB Flow Charts using Python Boto and Diagrams. Diagram as a Code aws ELB, ALB, NLB, CLB automated. Create Flowcharts aws python boto and diagrams\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Creating ELB FlowChart with Python Boto and Diagrams | Devops Junction\",\"datePublished\":\"2022-08-07T17:32:07+00:00\",\"dateModified\":\"2022-08-07T17:32:32+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#primaryimage\"},\"articleSection\":\"AWS,Boto\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/creating-elb-flow-charts-using-python-boto-diagrams\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8970"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=8970"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8970\/revisions"}],"predecessor-version":[{"id":8990,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/8970\/revisions\/8990"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/8980"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=8970"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=8970"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=8970"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}