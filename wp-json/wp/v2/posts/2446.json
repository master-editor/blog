{"id":2446,"date":"2019-01-04T06:31:46","date_gmt":"2019-01-04T01:01:46","guid":{"rendered":"http:\/\/www.middlewareinventory.com\/?p=2446"},"modified":"2022-06-19T11:31:46","modified_gmt":"2022-06-19T06:01:46","slug":"ansible-fail-with-custom-message","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/","title":{"rendered":"Ansible fail with custom message example"},"content":{"rendered":"<h2>The Objective<\/h2>\n<p>If you are a pioneer of Ansible, you might have come across or had this question &#8220;<strong>How to\u00a0print a custom message with fail<\/strong>\u00a0 or failed_when&#8221; or &#8220;How to\u00a0print a custom error message in case of failure&#8221;<\/p>\n<p>while running the ansible-playbook. What is so fun in displaying the built-in default error messages like &#8220;the command is wrong&#8221; or &#8220;the variable is undefined&#8221;. Most of the time the ansible returned error messages would not justify their own purpose of conveying the message on what went wrong as it would be too vague.<\/p>\n<p>So it is necessary that we should build our ansible playbooks to return highly intelligible and easily interpreted error messages when the task is failing for some reason.<\/p>\n<p>&nbsp;<\/p>\n<h3>Syntax: Sample Playbook with fail and custom message<\/h3>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #474949; color: #d1d9e1;\"><span class=\"hljs-meta\" style=\"color: #f99157;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\"> - name:<\/span> Find files - Playbook\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   hosts:<\/span> app\r\n\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   pre_tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span> Make Sure the mandatory input values are passed (Directory and SearchString)\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     fail:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">      msg:<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"Directory and SearchString are the mandatory values to execute the playbook. Variables must be passed as extra variable -e \"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> Directory is not defined or SearchString is not defined<\/pre>\n<p>&nbsp;<\/p>\n<h2>The Real-time Example<\/h2>\n<p>In this post, we are going to see how to print custom error message with ansible fail module<\/p>\n<p>For this post, Let me reuse the following playbook we have used in our <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-when-variable-is-defined-or-undefined-examples\/\">another article\/post<\/a>, but with little modification<\/p>\n<p>First, let us see the playbook from the tagged post which<strong> has no fail and custom message.<\/strong><\/p>\n<p>&nbsp;<\/p>\n<h3>Ansible Playbook with\u00a0 <span style=\"color: #d41756;\">NO Fail and Custom message<\/span><\/h3>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #474949; color: #d1d9e1;\"><span class=\"hljs-meta\" style=\"color: #f99157;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\"> - name:<\/span> Find files - Playbook\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   hosts:<\/span> appservers\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   tasks:<\/span>\r\n\r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># Case1:  when Search String and Modified time is mentioned<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span>  Find command with *SEARCH STRING* and *MODIFIED TIME*\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     shell:<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"find <span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{Directory}}<\/span> -name '<span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{SearchString}}<\/span>' -mtime '<span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{mtime}}<\/span>'\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     register:<\/span> case1output\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> Directory is defined and SearchString is defined and mtime is defined\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #cc99cc;\">true<\/span>\r\n\r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># Case2: when Only Search String is mentioend but NOT Modified time(age)<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span>  Find command with only with *SEARCH STRING*\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     shell:<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"find <span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{Directory}}<\/span> -name '<span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{SearchString}}<\/span>' \"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     register:<\/span> case2output\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> Directory is defined and SearchString is defined and mtime is not defined\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #cc99cc;\">true<\/span>\r\n     \r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># In case of Case1 Success<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span> Case1 Output &#8211; Output will be displayed only if Case is Success (or) it will be skipped \r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     debug:<\/span> var=case1output.stdout_lines\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> case1output.stdout_lines is defined\r\n\r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># In case of Case2 Success<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span> Case2 Output &#8211; Output will be displayed only if Case is Success (or) it will be skipped \r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     debug:<\/span> var=case2output.stdout_lines\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> case2output.stdout_lines is defined<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Explanation and the Requirement<\/h3>\n<p>As you could have already figured out (or) read in the article hyperlinked.\u00a0 This playbook is created to find old log files based on the set of startup arguments given.<\/p>\n<p>The playbook\u00a0is designed to accept two cases\/ two type of executions. In both cases, we need to pass Directory and Search String as mandatory arguments.<\/p>\n<p>Based on the third variable&#8217;s presence (\u00a0mtime\u00a0or modified time), the playbook would switch cases and act accordingly.<\/p>\n<blockquote><p>Having said that, we are in need to pre-validate\u00a0these two mandatory variables as they are needed irrespective of what case the user would like to execute. We need to print some message and exit or terminate the execution<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<h3>The Problem<\/h3>\n<p>If it is a simple shell script. A Simple\u00a0<strong>if statement<\/strong> and <strong>$#<\/strong> would do the validation for us. <strong>But in ansible?\u00a0<\/strong><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #474949; color: #d1d9e1;\"><span class=\"hljs-keyword\" style=\"color: #cc99cc;\">if<\/span> [ <span class=\"hljs-variable\" style=\"color: #ffcc66;\">$#<\/span> <span class=\"hljs-_\">-ne<\/span>\u00a03 ]\r\n     <span class=\"hljs-built_in\" style=\"color: #b5bd68;\">echo<\/span> <span class=\"hljs-_\">-e<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"the script takes three argument but <span class=\"hljs-variable\" style=\"color: #ffcc66;\">$#<\/span> are found\" \r\n<\/span>     <span class=\"hljs-built_in\" style=\"color: #b5bd68;\">exit<\/span> 5\r\n<span class=\"hljs-keyword\" style=\"color: #cc99cc;\">fi<\/span><\/pre>\n<p>Now the Question is<\/p>\n<p style=\"text-align: center;\"><span style=\"font-size: 14pt; color: #084066;\">How to fail the ansible playbook when the list of arguments are not passed\/available? How to fail with the custom message so that we can tell the user what went wrong before exiting.<\/span><\/p>\n<p>&nbsp;<\/p>\n<h3>Solution<\/h3>\n<p>Now the pre-validation and the termination can be done using <strong>when<\/strong> or <strong>failed_when<\/strong>\u00a0 inside\u00a0the<strong> pre_tasks\u00a0\u00a0<\/strong>segment of an ansible playbook.<\/p>\n<p>But <span style=\"font-size: 14pt; color: #0a6894;\">How to print custom message with fail?<\/span><\/p>\n<p>that&#8217;s where the <strong>fail with custom message<\/strong> plays the role. Now refer the following modified ansible playbook designed to fail with the custom message during pre-validation<\/p>\n<p>&nbsp;<\/p>\n<h3>The Playbook to <span style=\"color: #d41756;\">Fail with Custom Message<\/span><\/h3>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #474949; color: #d1d9e1;\"><span class=\"hljs-meta\" style=\"color: #f99157;\">---<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\"> - name:<\/span> Find files - Playbook\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   hosts:<\/span> app\r\n\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   pre_tasks:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span> Make Sure the mandatory input values are passed (Directory and SearchString)\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     fail:<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">      msg:<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"Directory and SearchString are the mandatory values to execute the playbook. Variables must be passed as extra variable -e \"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> Directory is not defined or SearchString is not defined\r\n   \r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   tasks:<\/span>\r\n\r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># Case1:  when Search String and Modified time is mentioned<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span>  Find command with *SEARCH STRING* and *MODIFIED TIME*\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     shell:<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"find <span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{Directory}}<\/span> -name '<span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{SearchString}}<\/span>' -mtime '<span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{mtime}}<\/span>'\"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     register:<\/span> case1output\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> Directory is defined and SearchString is defined and mtime is defined\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #cc99cc;\">true<\/span>\r\n\r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># Case2: when Only Search String is mentioend but NOT Modified time(age)<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span>  Find command with only with *SEARCH STRING*\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     shell:<\/span> <span class=\"hljs-string\" style=\"color: #8abeb7;\">\"find <span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{Directory}}<\/span> -name '<span class=\"hljs-template-variable\" style=\"color: #ffcc66;\">{{SearchString}}<\/span>' \"<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     register:<\/span> case2output\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> Directory is defined and SearchString is defined and mtime is not defined\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     ignore_errors:<\/span> <span class=\"hljs-literal\" style=\"color: #cc99cc;\">true<\/span>\r\n     \r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># In case of Case1 Success<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span> Case1 Output &#8211; Output will be displayed only if Case is Success (or) it will be skipped \r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     debug:<\/span> var=case1output.stdout_lines\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> case1output.stdout_lines is defined\r\n\r\n   <span class=\"hljs-comment\" style=\"color: #969896; font-style: italic;\"># In case of Case2 Success<\/span>\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">   - name:<\/span> Case2 Output &#8211; Output will be displayed only if Case is Success (or) it will be skipped \r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     debug:<\/span> var=case2output.stdout_lines\r\n<span class=\"hljs-attr\" style=\"color: #81a2be;\">     when:<\/span> case2output.stdout_lines is defined<\/pre>\n<p>&nbsp;<\/p>\n<blockquote><p>\u00a0<strong>failed_when<\/strong> and <strong>fail<\/strong> or two different modules. fail module is intentionally created to print custom message while failing. So Dont confuse yourself<\/p><\/blockquote>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>See it in Action<\/h3>\n<p><script id=\"asciicast-vOElUALLwgkBdP9ADxz4PmyOy\" src=\"https:\/\/asciinema.org\/a\/vOElUALLwgkBdP9ADxz4PmyOy.js\" async><\/script><\/p>\n<p>Hope you learnt how to print custom message with the fail module and also to pre-validate the required variables.<\/p>\n<p>Leave your ratings : [ratings]<\/p>\n<p>Thanks,<\/p>\n<p>SaravAK<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670578379\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"2446\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670578379\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670578379\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Objective If you are a pioneer of Ansible, you might have come across or had this question &#8220;How to\u00a0print a custom message with fail\u00a0 or failed_when&#8221; or &#8220;How to\u00a0print a custom error message in case of failure&#8221; while running the ansible-playbook. What is so fun in displaying the built-in[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2641,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible fail with custom message example<\/title>\n<meta name=\"description\" content=\"Ansible fail with custom message example, If you are a pioneer of Ansible, you might have come across or had this question &quot;How to\u00a0print a custom message with fail\u00a0 or failed_when&quot; or &quot;How to\u00a0print a custom error message in case of failure&quot;\u00a0then this post is for you. ansible fail, failed_when are two different modules\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible fail with custom message example\" \/>\n<meta property=\"og:description\" content=\"Ansible fail with custom message example, If you are a pioneer of Ansible, you might have come across or had this question &quot;How to\u00a0print a custom message with fail\u00a0 or failed_when&quot; or &quot;How to\u00a0print a custom error message in case of failure&quot;\u00a0then this post is for you. ansible fail, failed_when are two different modules\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-01-04T01:01:46+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-06-19T06:01:46+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-04-at-6.00.49-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1132\" \/>\n\t<meta property=\"og:image:height\" content=\"662\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-04-at-6.00.49-AM.png\",\"width\":1132,\"height\":662,\"caption\":\"ansible fail with custom message\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/\",\"name\":\"Ansible fail with custom message example\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#primaryimage\"},\"datePublished\":\"2019-01-04T01:01:46+00:00\",\"dateModified\":\"2022-06-19T06:01:46+00:00\",\"description\":\"Ansible fail with custom message example, If you are a pioneer of Ansible, you might have come across or had this question \\\"How to\\u00a0print a custom message with fail\\u00a0 or failed_when\\\" or \\\"How to\\u00a0print a custom error message in case of failure\\\"\\u00a0then this post is for you. ansible fail, failed_when are two different modules\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible fail with custom message example\",\"datePublished\":\"2019-01-04T01:01:46+00:00\",\"dateModified\":\"2022-06-19T06:01:46+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#primaryimage\"},\"articleSection\":\"Ansible\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-fail-with-custom-message\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2446"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=2446"}],"version-history":[{"count":12,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2446\/revisions"}],"predecessor-version":[{"id":2649,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2446\/revisions\/2649"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/2641"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=2446"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=2446"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=2446"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}