{"id":5806,"date":"2020-09-29T20:46:38","date_gmt":"2020-09-29T15:16:38","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=5806"},"modified":"2022-11-11T00:44:19","modified_gmt":"2022-11-10T19:14:19","slug":"deploy-tomcat-kubernetes","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/","title":{"rendered":"How to Deploy Tomcat on Kubernetes Step by Step"},"content":{"rendered":"<h2>Overview<\/h2>\n<p>In this post, we are going to see how to deploy tomcat on Kubernetes.\u00a0 How to Deploy Tomcat based web application into Kubernetes. We are taking Google Cloud &#8211; Kubernetes Engine (GKE) for our example and creating our Kubernetes Cluster with 3 nodes<\/p>\n<p>You can do all these steps and test this with your Free 12 month Google Cloud account itself but make sure you shut down the resources once your setup is completed to avoid charges.<\/p>\n<p>We are going to use our <a href=\"https:\/\/www.middlewareinventory.com\/blog\/docker-tomcat-example-dockerfile-sample\/\">Tomcat image we have created in the earlier post.<\/a> which can be pulled directly from this <a href=\"https:\/\/hub.docker.com\/r\/saravak\/tomcat8\">DockerHub<\/a> using the following command<\/p>\n<pre>docker pull saravak\/tomcat8<\/pre>\n<h2><\/h2>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-scaled.jpg\"><img class=\"alignnone size-full wp-image-6227\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-scaled.jpg\" alt=\"Tomcat Kubernetes\" width=\"2560\" height=\"1436\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-scaled.jpg 2560w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-300x168.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-1024x574.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-768x431.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-1536x862.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-2048x1149.jpg 2048w\" sizes=\"(max-width: 2560px) 100vw, 2560px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Steps to Deploy Tomcat in Kubernetes on Google Cloud<\/h2>\n<ol>\n<li><a title=\"Step1: Creating a GKE Cluster with 3 nodes\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step1_Creating_a_GKE_Cluster_with_3_nodes\">Creating a GKE Cluster with 3 nodes<\/a><\/li>\n<li><a title=\"Step2: Check the Context is set to your newly created cluster.\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step2_Check_the_Context_is_set_to_your_newly_created_cluster\">Check the Context is set to your newly created cluster.<\/a><\/li>\n<li><a title=\"Step3: list the nodes of the cluster\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step3_list_the_nodes_of_the_cluster\">List the nodes of the cluster<\/a><\/li>\n<li><a title=\"Step4: Create a K8s Deployment to Deploy Tomcat on Kubernetes\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step4_Create_a_K8s_Deployment_to_Deploy_Tomcat_on_Kubernetes\">Create a K8s Deployment to Deploy Tomcat on Kubernetes<\/a><\/li>\n<li><a title=\"Step5: List all the deployments\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step5_List_all_the_deployments\">List all the deployments<\/a><\/li>\n<li><a title=\"Step6: List the pods created by the deployment\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step6_List_the_pods_created_by_the_deployment\">List the pods created by the deployment<\/a><\/li>\n<li><a title=\"Step7: ScaleUP the deployment\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step7_ScaleUP_the_deployment\">ScaleUP the deployment<\/a><\/li>\n<li><a title=\"Step8: Validate if new Pods are created after Scaling up\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step8_Validate_if_new_Pods_are_created_after_Scaling_up\">Validate if new Pods are created after Scaling up<\/a><\/li>\n<li><a title=\"Step9: Expose it as a Service with Load balancing\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step9_Expose_it_as_a_Service_with_Load_balancing\">Expose it as a Service with Load balancing<\/a><\/li>\n<li><a title=\"Step10: Access your application using the Service External IP\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#Step10_Access_your_application_using_the_Service_External_IP\">Access your application using the Service External IP and Test<\/a><\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h3>Step1: Creating a GKE Cluster with 3 nodes<\/h3>\n<p>in my local machine, I had to install the <a href=\"https:\/\/cloud.google.com\/sdk\/gcloud\">gcloud<\/a> CLI and setup my access with google cloud once this is done. I have used the <code>gcloud<\/code> cli command to create a Kubernetes cluster with 3 nodes.<\/p>\n<p>This is the easiest way to set up Kubernetes.<\/p>\n<pre>\u279c\u00a0 <b>gcloud container clusters create mwik8scluster &#8211; num-nodes 3\r\n<\/b>\r\nThis will enable the autorepair feature for nodes. Please see \r\n\r\nhttps:\/\/cloud.google.com\/kubernetes-engine\/docs\/node-auto-repair\r\n\r\nfor more information on node autorepairs. \r\nCreating cluster mwik8scluster in asia-south1-a... \r\nCluster is being health-checked (master is healthy)...done. \r\nCreated [https:\/\/container.googleapis.com\/v1\/projects\/kubernetestest-270009\/zones\/asia-south1-a\/clusters\/mwik8scluster]. \r\nTo inspect the contents of your cluster, go to:\u00a0\r\nhttps:\/\/console.cloud.google.com\/kubernetes\/workload_\/gcloud\/asia-south1-a\/mwik8scluster?project=kubernetestest-270009<\/pre>\n<pre>kubeconfig entry generated for mwik8scluster.\r\n\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LOCATION\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 MASTER_VERSION\u00a0 MASTER_IP\u00a0\u00a0\u00a0\u00a0 MACHINE_TYPE\u00a0\u00a0 NODE_VERSION\u00a0\u00a0\u00a0 NUM_NODES\u00a0 STATUS\r\nmwik8scluster\u00a0 asia-south1-a\u00a0 1.14.10-gke.27\u00a0 35.244.39.79\u00a0 n1-standard-1\u00a0 1.14.10-gke.27\u00a0 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 RUNNING<\/pre>\n<p>&nbsp;<\/p>\n<h3><\/h3>\n<h3>Step2: Check the Context is set to your newly created cluster.<\/h3>\n<p>Kubectl is a command-line interface and administration tool for managing your Kubernetes cluster, Wheater you are using minikube, EKS or GKE the kubectl remains your command-line interface for Your Kubernetes Cluster<\/p>\n<p>So make sure you are switching to the right Kubernetes cluster by changing the context to the Google Kubernetes Engine and to the cluster you have created in the previous step.<\/p>\n<pre># To Change the Context\r\n\u279c\u00a0 <b>kubectl config use-context <\/b>gke_kubernetestest-270009_asia-south1-a_mwik8scluster\r\nSwitched to context \"gke_kubernetestest-270009_asia-south1-a_mwik8scluster\" \r\n\r\n# To make sure context is changed\r\n\u279c\u00a0 <b>kubectl config current-context<\/b>\r\ngke_kubernetestest-270009_asia-south1-a_mwik8scluster<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step3: list the nodes of the cluster<\/h3>\n<p>In the first step we have created a Kubernetes cluster with gcloud command line with 3 nodes (or) worker nodes.\u00a0 Let us list the nodes and make sure they are available.<\/p>\n<p><code>kubectl get nodes<\/code> command would show the list of nodes available in our cluster<\/p>\n<pre>\u279c\u00a0 <b>kubectl get nodes<\/b>\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 STATUS\u00a0\u00a0 ROLES\u00a0\u00a0\u00a0 AGE\u00a0\u00a0\u00a0\u00a0 VERSION\r\ngke-mwik8scluster-default-pool-04115284-3tsb\u00a0\u00a0 Ready\u00a0\u00a0\u00a0 &lt;none&gt;\u00a0\u00a0 4m16s\u00a0\u00a0 v1.14.10-gke.27\r\ngke-mwik8scluster-default-pool-04115284-kv9b\u00a0\u00a0 Ready\u00a0\u00a0\u00a0 &lt;none&gt;\u00a0\u00a0 4m16s\u00a0\u00a0 v1.14.10-gke.27\r\ngke-mwik8scluster-default-pool-04115284-sz9l\u00a0\u00a0 Ready\u00a0\u00a0\u00a0 &lt;none&gt;\u00a0\u00a0 4m16s\u00a0\u00a0 v1.14.10-gke.27<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Step4: Create a K8s Deployment to Deploy Tomcat on Kubernetes<\/h3>\n<p>Deployment is a Declarative approach to create and manage pods, when you are creating deployments, replica sets ( new gen replication controller) would be created by default and pods would be managed through this <code>replicaset<\/code>.<\/p>\n<p>ReplicaSet is responsible to maintain the pod count and make sure the desired count of pods running for any deployment. By default, the replicaset would create a single pod when you are creating a deployment which can be scaled up or down later.<\/p>\n<p>Besides that, Kubernetes Deployments would make your deployment and rolling update and recreation tasks easy and efficient. Deploying a container directly as a pod is not a production approach and deployment is the standard way of deploying any service\/app into Kubernetes.<\/p>\n<p>To Create deployments, you can either use <code>yaml<\/code> file or use the <code>kubectl create deployment <\/code>command.<\/p>\n<p><strong>Note*:<\/strong>\u00a0 We are not defining any namespace here so the default namespace would be taken<\/p>\n<p><strong><span style=\"color: #003366;\">Using CLI<\/span><\/strong><\/p>\n<pre>\u279c\u00a0 <b>kubectl create deployment tomcatinfra &#8211; image=saravak\/tomcat8<\/b>\r\ndeployment.apps\/tomcatinfra created<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p><span style=\"color: #003366;\"><strong>Using YAML file<\/strong><\/span><\/p>\n<p>Save this file as <code>tomcatinfra.yml<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #eaeef3 none repeat scroll 0% 0%; color: #00193a;\"><span class=\"hljs-attr\">apiVersion:<\/span> apps\/v1\r\n<span class=\"hljs-attr\">kind:<\/span> Deployment\r\n<span class=\"hljs-attr\">metadata:<\/span>\r\n<span class=\"hljs-attr\">  name:<\/span> tomcatinfra\r\n<span class=\"hljs-attr\">spec:<\/span>\r\n<span class=\"hljs-attr\">  replicas:<\/span> <span class=\"hljs-number\">1<\/span>\r\n<span class=\"hljs-attr\">  template:<\/span>\r\n<span class=\"hljs-attr\">    metadata:<\/span>\r\n<span class=\"hljs-attr\">      name:<\/span> tomcatinfra\r\n<span class=\"hljs-attr\">      labels:<\/span>\r\n<span class=\"hljs-attr\">        app:<\/span> tomcatinfra\r\n<span class=\"hljs-attr\">    spec:<\/span>\r\n<span class=\"hljs-attr\">      containers:<\/span>\r\n<span class=\"hljs-attr\">      - image:<\/span> saravak\/tomcat8\r\n<span class=\"hljs-attr\">        name:<\/span> tomcatapp<\/pre>\n<p>Execute the <code>kubectl apply<\/code> command<\/p>\n<pre>\u279c\u00a0 <b>kubectl apply -f tomcatinfra.yml<\/b>\r\ndeployment.apps\/tomcatinfra created<\/pre>\n<p>Now we have successfully created the deployment, this would also create a replica set automatically behind the screen<\/p>\n<p>&nbsp;<\/p>\n<h3>Step5: List all the deployments<\/h3>\n<p>Once the deployment has been created using CLI or YAML file.\u00a0 Let us validate if the deployments are created properly and ready<\/p>\n<pre>\u279c\u00a0 <b>kubectl get deployments<\/b>\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 READY\u00a0\u00a0 UP-TO-DATE\u00a0\u00a0 AVAILABLE\u00a0\u00a0 AGE\r\ntomcatinfra\u00a0\u00a0 1\/1\u00a0\u00a0\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 24s<\/pre>\n<p>You can see here the deployment we have created in the last step is present with the age of 24seconds (created recently) and in a READY state.<\/p>\n<p>If you are wondering what is 1\/1 &#8211; It represents the number of pods created by the <code>replicaset<\/code> as explained earlier the default number of pods created by replica set is one. it can be scaled up and down<code><\/code><\/p>\n<p>&nbsp;<\/p>\n<h3>Step6: List the pods created by the deployment<\/h3>\n<p>Make sure that your pods are running, By default, a replica set would create only one pod and it can be scalable at any time using the scale command.<\/p>\n<p>If you have increased the <code>replicas<\/code> value during the Deployment task. You would see a different number of pods than mine.<\/p>\n<pre>\u279c\u00a0\u00a0 <b>kubectl get pods<\/b>\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 READY\u00a0\u00a0 STATUS\u00a0\u00a0\u00a0 RESTARTS\u00a0\u00a0 AGE\r\ntomcatinfra-7dddd9bcf4-ksbtm\u00a0\u00a0 1\/1\u00a0\u00a0\u00a0\u00a0 Running\u00a0\u00a0 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 30s<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step7: ScaleUP the deployment<\/h3>\n<p>Now the production traffic is increasing and we want to quickly scale up the number of pods on this deployment.\u00a0 We can easily do that with <code>kubectl scale<\/code> command<\/p>\n<pre>\u279c\u00a0 <b>kubectl scale &#8211; replicas=3 deployment tomcatinfra<\/b>\r\ndeployment.extensions\/tomcatinfra scaled<\/pre>\n<p>In the preceding command snippet, you can see that we are increasing the replica value from 1 to 3 and it will create two more new pods to match the desired count of 3.<\/p>\n<p><strong>you can also scale down by decreasing the number<\/strong> of <code>replicas<\/code> at any point of time in future.<\/p>\n<p>If you describe the deployment using <code>kubectl describe deployments<\/code> command, you can see the <code>NewReplicaSet<\/code> value is changed to 3<\/p>\n<pre>\u279c\u00a0 <b>kubectl describe deployments tomcatinfra<\/b>\r\n\r\nName:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 tomcatinfra\r\nNamespace:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 default\r\nCreationTimestamp:\u00a0\u00a0\u00a0\u00a0\u00a0 Sat, 18 Apr 2020 12:35:18 +0530\r\nLabels:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 app=tomcatinfra\r\nAnnotations:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 deployment.kubernetes.io\/revision: 1\r\nSelector:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 app=tomcatinfra\r\nReplicas:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3 desired | 3 updated | 3 total | 3 available | 0 unavailable\r\nStrategyType:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 RollingUpdate\r\nMinReadySeconds:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 0\r\nRollingUpdateStrategy:\u00a0 25% max unavailable, 25% max surge\r\nPod Template:\r\nLabels:\u00a0 app=tomcatinfra\r\nContainers:\r\ntomcat8:\r\nImage:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 saravak\/tomcat8\r\nPort:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;none&gt;\r\nHost Port:\u00a0\u00a0\u00a0 &lt;none&gt;\r\nEnvironment:\u00a0 &lt;none&gt;\r\nMounts:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;none&gt;\r\nVolumes:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;none&gt;\r\nConditions:\r\nType\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Status\u00a0 Reason\r\n----\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &#8211; ----\u00a0 &#8211; ----\r\nProgressing\u00a0\u00a0\u00a0 True\u00a0\u00a0\u00a0 NewReplicaSetAvailable\r\nAvailable\u00a0\u00a0\u00a0\u00a0\u00a0 True\u00a0\u00a0\u00a0 MinimumReplicasAvailable\r\nOldReplicaSets:\u00a0 &lt;none&gt;\r\n<span style=\"color: #000080;\">NewReplicaSet:\u00a0\u00a0 tomcatinfra-7dddd9bcf4 (3\/3 replicas created)<\/span>\r\nEvents:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;none&gt;<\/pre>\n<p>You can also validate this using the <code>kubectl get deployments<\/code> command<\/p>\n<pre>\u279c\u00a0 <b>kubectl get deploy tomcatinfra<\/b>\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 READY\u00a0\u00a0 UP-TO-DATE\u00a0\u00a0 AVAILABLE\u00a0\u00a0 AGE\r\ntomcatinfra\u00a0\u00a0 3\/3\u00a0\u00a0\u00a0\u00a0 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 5h13m<\/pre>\n<p>&nbsp;<\/p>\n<h3>Step8: Validate if new Pods are created after Scaling up<\/h3>\n<p>Since we have scaled from 1 to 3 in the last step. we should list the pods with the tag <code>app=tomcatinfra<\/code> which is defined during the creation of deployment.<\/p>\n<p>You can see that the pod count has been increased from one to three.<\/p>\n<pre>\u279c\u00a0 <b>kubectl get pods -l app=tomcatinfra<\/b>\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 READY\u00a0\u00a0 STATUS\u00a0\u00a0\u00a0 RESTARTS\u00a0\u00a0 AGE\r\ntomcatinfra-7dddd9bcf4-gcrp2\u00a0\u00a0 1\/1\u00a0\u00a0\u00a0\u00a0 Running\u00a0\u00a0 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 5h51m\r\ntomcatinfra-7dddd9bcf4-gpqth\u00a0\u00a0 1\/1\u00a0\u00a0\u00a0\u00a0 Running\u00a0\u00a0 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 5h51m\r\ntomcatinfra-7dddd9bcf4-ksbtm\u00a0\u00a0 1\/1\u00a0\u00a0\u00a0\u00a0 Running\u00a0\u00a0 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 5h55m\r\n\r\n<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Step9: Expose it as a Service with Load balancing<\/h3>\n<p>Now our deployment is ready with three pods. We need to access this from the public and make sure all three are handling the load when a request comes in.<\/p>\n<p>To achieve this we are exposing our deployment as a service and setting the type as Load Balancer to make the pods handle the load.<\/p>\n<pre>$ kubectl expose deployment tomcatinfra &#8211; port=80 &#8211; target-port=8080 -type LoadBalancer\r\n\r\nservice\/tomcatinfra exposed<\/pre>\n<p>Here<\/p>\n<p><strong>&#8211;port\u00a0<\/strong>represents the service listening port for requests to come in<\/p>\n<p><strong>&#8211;target-port <\/strong>represents the port where our container is listening. It is defined with in the <code>Dockerfile<\/code> itself and this is a default port of tomcat<\/p>\n<p>Now let us know more information about the service we have created using the <code>kubectl describe service<\/code> command<\/p>\n<pre>$ kubectl describe svc tomcatinfra\r\nName:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 tomcatinfra\r\nNamespace:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 default\r\nLabels:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 app=tomcatinfra\r\nAnnotations:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;none&gt;\r\nSelector:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 app=tomcatinfra\r\nType:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 LoadBalancer\r\nIP:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 10.47.255.230\r\nPort:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;unset&gt;\u00a0 80\/TCP\r\nTargetPort:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 8080\/TCP\r\nNodepPort:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;unset&gt;\u00a0 31710\/TCP\r\nEndpoints:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 10.44.1.5:8080,10.44.1.6:8080,10.44.2.5:8080\r\nSession Affinity:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 None\r\nExternal Traffic Policy:\u00a0 Cluster\r\nEvents:\r\nType\u00a0\u00a0\u00a0 Reason\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Age\u00a0\u00a0 From\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Message\r\n----\u00a0\u00a0\u00a0 &#8211; ----\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &#8211; --\u00a0 &#8211; --\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &#8211; -----\r\nNormal\u00a0 EnsuringLoadBalancer\u00a0 14s\u00a0\u00a0 service-controller\u00a0 Ensuring load balancer<\/pre>\n<p>The preceding snippet shows more details about the service we have just created including the Ports and Endpoints etc.<\/p>\n<p>&nbsp;<\/p>\n<h3><\/h3>\n<h3>Step10: Access your application using the Service External IP<\/h3>\n<p>Now it is time to test the application. To know the public IP address of the service you have created. use the <code>kubectl get svc<\/code> command and look for the service we have just created and grab the IP shown in the External-IP column.<\/p>\n<p>In my case, it is 35.200.217.28.<\/p>\n<p>You can use this IP behind any DNS name or you can manage it with <code>Ingress Controller<\/code> like nginx with the Domain name like www.example.com<\/p>\n<p>For now, you can access the application with IP <strong>http:\/\/35.200.217.28\/SampleWebApp\/<\/strong><\/p>\n<pre>$ kubectl get svc\r\n\r\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TYPE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 CLUSTER-IP\u00a0\u00a0\u00a0\u00a0\u00a0 EXTERNAL-IP\u00a0\u00a0\u00a0\u00a0 PORT(S)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 AGE\r\nkubernetes\u00a0\u00a0\u00a0 ClusterIP\u00a0\u00a0\u00a0\u00a0\u00a0 10.47.240.1\u00a0\u00a0\u00a0\u00a0 &lt;none&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 443\/TCP\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 24m\r\ntomcatinfra\u00a0\u00a0 LoadBalancer\u00a0\u00a0 10.47.255.230\u00a0\u00a0 <b>35.200.217.28<\/b>\u00a0\u00a0 80:31710\/TCP\u00a0\u00a0 106s<\/pre>\n<p>to know more about the Kubernetes ingress and how it works.refer the following article<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"AZgQadAnCj\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/\">Kubernetes Ingress Example on Google Cloud<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Kubernetes Ingress Example on Google Cloud&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/kubernetes-ingress-example\/embed\/#?secret=AZgQadAnCj\" data-secret=\"AZgQadAnCj\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>Hope this article serves as a quick reference to create and deploy tomcat on Kubernetes. You can use this as a Kubernetes tomcat example setup.<\/p>\n<p>Though this article is created for GoogleCloud, Except the Cluster creation part with gcloud all other instructions are applicable for minikube and Amazon EKS too.<\/p>\n<p>If you have any questions or feedback let me know comments<\/p>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577339\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"5806\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577339\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577339\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Overview In this post, we are going to see how to deploy tomcat on Kubernetes.\u00a0 How to Deploy Tomcat based web application into Kubernetes. We are taking Google Cloud &#8211; Kubernetes Engine (GKE) for our example and creating our Kubernetes Cluster with 3 nodes You can do all these steps[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":6227,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[454,151],"tags":[412,409,411,410],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How to Deploy Tomcat on Kubernetes Step by Step | Devops Junction<\/title>\n<meta name=\"description\" content=\"How to Deploy Tomcat on Kubernetes example. Kubernetes Tomcat Yaml file example. Tomcat Kubernetes Deployment example Step by Step.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Deploy Tomcat on Kubernetes Step by Step | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"How to Deploy Tomcat on Kubernetes example. Kubernetes Tomcat Yaml file example. Tomcat Kubernetes Deployment example Step by Step.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2020-09-29T15:16:38+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:14:19+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-scaled.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2560\" \/>\n\t<meta property=\"og:image:height\" content=\"1436\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-29-at-8.55.24-PM-scaled.jpg\",\"width\":2560,\"height\":1436,\"caption\":\"Tomcat Kubernetes\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/\",\"name\":\"How to Deploy Tomcat on Kubernetes Step by Step | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#primaryimage\"},\"datePublished\":\"2020-09-29T15:16:38+00:00\",\"dateModified\":\"2022-11-10T19:14:19+00:00\",\"description\":\"How to Deploy Tomcat on Kubernetes example. Kubernetes Tomcat Yaml file example. Tomcat Kubernetes Deployment example Step by Step.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"How to Deploy Tomcat on Kubernetes Step by Step\",\"datePublished\":\"2020-09-29T15:16:38+00:00\",\"dateModified\":\"2022-11-10T19:14:19+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#primaryimage\"},\"keywords\":\"deploy tomcat in kubernetes,Kubernetes Tomcat Deployment,Kubernetes Tomcat yaml,Tomcat Kubernetes\",\"articleSection\":\"DevOps_Beginner,Kubernetes\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/deploy-tomcat-kubernetes\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/5806"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=5806"}],"version-history":[{"count":4,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/5806\/revisions"}],"predecessor-version":[{"id":8095,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/5806\/revisions\/8095"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/6227"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=5806"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=5806"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=5806"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}