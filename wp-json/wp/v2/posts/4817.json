{"id":4817,"date":"2020-01-25T06:40:46","date_gmt":"2020-01-25T01:10:46","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=4817"},"modified":"2022-06-19T11:23:31","modified_gmt":"2022-06-19T05:53:31","slug":"linux-stdout-stderr-bash","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/","title":{"rendered":"What is STDOUT and STDERR in Linux &#8211; echo to STDERR"},"content":{"rendered":"<p>Every command we run in Linux would either give output or throw an error. Sometimes we want the errors to be redirected into an output channel or you may want to redirect the STDERR to one file and STDOUT to a different file<\/p>\n<p>You might have come across these two words often STDOUT and STDERR and wondered what is this.<\/p>\n<p>So in this post, we are going to see what is STDOUT and STDERR in Linux and how to use them and how to echo to STDERR and how to use the output redirections like <code>&gt;&amp;2<\/code> and <code>2&gt;&amp;1<\/code> to redirect the STDOUT and STDERR into the other channel.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM.png\"><img class=\"alignnone size-full wp-image-4837\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM.png\" alt=\"Bash echo to STDERR\" width=\"2702\" height=\"1714\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM.png 2702w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM-300x190.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM-768x487.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM-1024x650.png 1024w\" sizes=\"(max-width: 2702px) 100vw, 2702px\" \/><\/a><\/p>\n<h2><strong>So What is STDERR and STDOUT in Linux?<\/strong><\/h2>\n<p>You might have heard or read that Linux handles everything as a file and\u00a0<strong>In\u00a0Linux, everything is a file.<\/strong><\/p>\n<p>Well. That&#8217;s true.<\/p>\n<p>In fact, Even the input and output of any process running on the Linux system is also considered as a file.<\/p>\n<p>Linux identifies each file objects with <code>file descriptor<\/code>\u00a0 A non-negative integer that represents the open files in the session. the bash shell reserves the first three file descriptors 0, 1, 2<\/p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 33.3333%;\"><strong>File<\/strong> <strong>Descriptor<\/strong><\/td>\n<td style=\"width: 33.3333%;\">\u00a0<strong>Abbreviation<\/strong><\/td>\n<td style=\"width: 33.3333%;\"><strong>Description<\/strong><\/td>\n<\/tr>\n<tr>\n<td style=\"width: 33.3333%;\">0<\/td>\n<td style=\"width: 33.3333%;\">STDIN<\/td>\n<td style=\"width: 33.3333%;\">Standard Input<\/td>\n<\/tr>\n<tr>\n<td style=\"width: 33.3333%;\">1<\/td>\n<td style=\"width: 33.3333%;\">STDOUT<\/td>\n<td style=\"width: 33.3333%;\">Standard Output<\/td>\n<\/tr>\n<tr>\n<td style=\"width: 33.3333%;\">2<\/td>\n<td style=\"width: 33.3333%;\">STDERR<\/td>\n<td style=\"width: 33.3333%;\">Standard Error<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>These three special file descriptors handle the input and output from your script or a process.<\/p>\n<p>while <code>STDIN<\/code> or Standard Input helps the Linux Process or a script to get its input from the user ( typing in the keyboard) the Standard output <code>STDOUT<\/code> and Error <code>STDERR<\/code> helps to display the result to the user on the monitor.<\/p>\n<p>Linux has given us two file descriptors or channels to distinguish the Output and the Error so that we can redirect them to two different locations or files as per our requirement.<\/p>\n<p>Now having this basic understanding. let us go and see how to use this STDOUT and STDERR with Linux commands.<\/p>\n<p>&nbsp;<\/p>\n<h2>Default Behaviour of any command in Linux<\/h2>\n<p>By Default, Any Linux command that you take would display its error (or) output to the\u00a0 <code>STDOUT<\/code>\u00a0only<\/p>\n<p>For example, consider the following commands<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #000000; background: #f8f8ff;\"><span class=\"hljs-comment\" style=\"color: #408080;\"># List two files - one is present and another one is not<\/span>\r\nbash-3.2$ <span style=\"color: #993300;\">ls -lrt <span class=\"hljs-built_in\">test test.sh<\/span><\/span>\r\nls: <span class=\"hljs-built_in\" style=\"color: #0086b3;\">test<\/span>: No such file or directory\r\nrwxr-xr-x  1 sarav  wheel  95 Jan 25 04:18 test.sh<\/pre>\n<p>If you look at the preceding command you can see that we are trying to list two files at the same time. Amongst them, one is not present.<\/p>\n<p>Technically the command we have executed has something to send to <code>STDERR<\/code>\u00a0and <code>STDOUT<\/code>\u00a0 but both error and output are displayed in the <strong>same<\/strong> standard output channel (monitor\/terminal)<\/p>\n<p>But why?<\/p>\n<p>As said earlier, By Default both stdout and stderr would be displayed in the stdout channel only.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Modify the command to redirect the error STDERR to a file<\/h2>\n<p>Let us use the same command and try to redirect the error to a file and display only the output to the standard output channel (monitor\/terminal)<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #000000; background: #f8f8ff;\">bash-3.2$ ls -lrt <span class=\"hljs-built_in\" style=\"color: #0086b3;\">test<\/span> test.sh 2&gt;\/tmp\/errorlog\r\n-rwxr-xr-x  1 sarav  wheel  95 Jan 25 04:18 test.sh<\/pre>\n<p>Now you can see only the valid output is printed while the error message is not and been redirected to a file named <code>\/tmp\/errorlog<\/code>\u00a0If you open and see the file you would see the error message we have noticed previously.<\/p>\n<p>Here is the snapshot of my execution.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-4.38.04-AM.png\"><img class=\"alignnone size-full wp-image-4823\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-4.38.04-AM.png\" alt=\"\" width=\"1538\" height=\"194\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-4.38.04-AM.png 1538w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-4.38.04-AM-300x38.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-4.38.04-AM-768x97.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-4.38.04-AM-1024x129.png 1024w\" sizes=\"(max-width: 1538px) 100vw, 1538px\" \/><\/a><br \/>\nIn the preceding snapshot, you could see that the first command has redirected the error to the file named <code>\/tmp\/errorlog<\/code>\u00a0and the second command displays the content of the file to make sure that the error is present.<\/p>\n<p>So how we did it.<\/p>\n<p>Using the redirection symbol <code>&gt;<\/code>\u00a0and with the file descriptor numeric value of STDERR <code>2<\/code><\/p>\n<p>by <code>2&gt;<\/code>\u00a0we are instructing the shell to redirect the errors to a file.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>How to Redirect the Output and Error to different files.<\/h3>\n<p>In the previous command, we just redirected the <code>stderr<\/code>\u00a0into the file and displayed the standard output on the terminal.<\/p>\n<p>But If we want to redirect the <code>stdout<\/code>\u00a0and <code>stderr<\/code>\u00a0to two different files at the same time.<\/p>\n<p>here is the updated command.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #000000; background: #f8f8ff;\">bash-3.2$ <span style=\"color: #993300;\">ls -lrt <span class=\"hljs-built_in\">test<\/span> test.sh 1&gt; \/tmp\/outputlog 2&gt;\/tmp\/errorlog<\/span><\/pre>\n<p>In the preceding command, you can notice we are using the same strategy of prefixing the file descriptor numeric value of stdout and stderr with the redirection symbols followed by the appropriate file names.<\/p>\n<p><code><span style=\"color: #993300;\">1&gt; \/tmp\/outputlog<\/span><\/code>\u00a0redirects the stdout to the outputlog file<\/p>\n<p><code><span style=\"color: #993300;\">2&gt;\/tmp\/errorlog<\/span><\/code>\u00a0redirects the stderr to the errorlog file.<\/p>\n<p>Hope it helped you to understand the <code>stdout<\/code>\u00a0and <code>stderr<\/code>\u00a0and how to use them<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Bash echo to STDERR &#8211; echo to the standard error or stderr<\/h2>\n<p>We all know that the bash <code>echo<\/code> command prints everything that you give after that. In fact, echo command does not even return any error or nonzero return code.<\/p>\n<p>Then how to make echo command to echo something to the stderr<\/p>\n<p>Consider the following script with two echo messages. The First echo command contains a string which supposed to go the <code>STDERR<\/code><\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #000000; background: #f8f8ff;\"> <span class=\"hljs-comment\" style=\"color: #408080; font-style: italic;\">#!\/bin\/bash<\/span>\r\n <span class=\"hljs-comment\" style=\"color: #408080; font-style: italic;\"># testing STDOUT &amp; STDERR<\/span>\r\n <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #219161;\">\"This is an error\"<\/span>\r\n <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #219161;\">\"This is normal output\"<\/span><\/pre>\n<p>but when you run this script you would get both these messages on the standard output or <code>stdout<\/code><\/p>\n<p>So how to make echo command to echo something to the stderr instead of stdout.<\/p>\n<p>We are going to apply the same trick of\u00a0<strong> file descriptors and redirection symbol<\/strong><\/p>\n<p>Here is the modified script<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #000000; background: #f8f8ff;\"> <span class=\"hljs-comment\" style=\"color: #408080; font-style: italic;\">#!\/bin\/bash<\/span>\r\n <span class=\"hljs-comment\" style=\"color: #408080; font-style: italic;\"># testing STDOUT &amp; STDERR<\/span>\r\n <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #219161;\">\"This is an error\"<\/span> <span style=\"color: #993300;\">&gt;&amp;2<\/span>\r\n <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #219161;\">\"This is normal output\"<\/span><\/pre>\n<p>All we had to add is <code>&gt;&amp;2<\/code><\/p>\n<p>What we are doing here is redirecting the stdout into the stderr channel<\/p>\n<p>&nbsp;<\/p>\n<h2>How to redirect STDERR to STDOUT in Linux<\/h2>\n<p>In most cases,\u00a0 we would be redirecting the error stream to output stream so that we do not miss anything or to stop it from being printed on the terminal.In other words,<\/p>\n<p>The best example is while scheduling a cron job. When you want to run some script using CRON. It is necessary that we capture all the possible outputs or errors that the script would throw as it runs. which would be used for troubleshooting or auditing later.<\/p>\n<p>So we must redirect the error and output both into the same stream. Mostly we redirect the error(STDERR) into the output stream(STDOUT) and save both of them into a single file.<\/p>\n<p>The command to do that is <span style=\"color: #993300;\">2&gt;&amp;1<\/span><\/p>\n<p><strong>So what is this 2&gt;&amp;1<\/strong><\/p>\n<p>Here 2 is the file descriptor of standard error and we are redirecting the stderr(error) into the stdout (normal output) channel, which has the filedescriptor value as 1.\u00a0 You can consider the <code>&amp;<\/code>\u00a0ampersand as <code>along with<\/code><\/p>\n<p>This is how you should use this command. Especially while scheduling a job\/script in crontab.<\/p>\n<blockquote><p>\u00a0.\/somescript.sh &gt; \/tmp\/output.log 2&gt;&amp;1<\/p><\/blockquote>\n<p>here the error and output both would be saved into the same file named <code>output.log<\/code><\/p>\n<p>&nbsp;<\/p>\n<h3>A Best Practice to echo the stdout and stderr into two different files in Shell script &#8211; LOGGING<\/h3>\n<p>Let&#8217;s say you are creating a script and you want to capture the errors and outputs into two different log files.<\/p>\n<p>Instead of adding <code>&gt;&amp;2<\/code>\u00a0all the way for each echo command. You can rather write a quick function like this.<\/p>\n<p>Refer the following script.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; color: #000000; background: #f8f8ff;\"><span class=\"hljs-meta\" style=\"font-weight: bold; color: #999999;\">#!\/bin\/bash\r\n<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #954121;\">function<\/span> <span class=\"hljs-function\"><span class=\"hljs-title\" style=\"color: #445588; font-weight: bold;\">errlog<\/span><\/span>()\r\n{\r\n   <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-variable\" style=\"color: teal;\">$1<\/span> &gt;&gt;\/tmp\/errorlog\r\n}\r\n\r\n<span class=\"hljs-keyword\" style=\"color: #954121;\">function<\/span> outlog\r\n{\r\n   <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-variable\" style=\"color: teal;\">$1<\/span> &gt;&gt;\/tmp\/outputlog\r\n}\r\n\r\n\r\n<span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span>  <span class=\"hljs-string\" style=\"color: #219161;\">\"Enter the username to Signin\"<\/span>\r\n<span class=\"hljs-built_in\" style=\"color: #0086b3;\">read<\/span> name\r\n\r\n<span class=\"hljs-keyword\" style=\"color: #954121;\">if<\/span> [ <span class=\"hljs-variable\" style=\"color: teal;\">$name<\/span> != <span class=\"hljs-string\" style=\"color: #219161;\">\"Sarav\"<\/span> ]\r\n<span class=\"hljs-keyword\" style=\"color: #954121;\">then<\/span>\r\n     errlog <span class=\"hljs-string\" style=\"color: #219161;\">\"Some Invalid user tried to login with the username <span class=\"hljs-variable\" style=\"color: teal;\">$name at `date`<\/span>\"<\/span>\r\n     <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #219161;\">\"You are not a valid user!. This incident is reported\"<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #954121;\">else<\/span>\r\n     <span class=\"hljs-built_in\" style=\"color: #0086b3;\">echo<\/span> <span class=\"hljs-string\" style=\"color: #219161;\">\"Welcome Sarav!\"<\/span>\r\n     outlog <span class=\"hljs-string\" style=\"color: #219161;\">\"Sarav has logged in at `date`\"<\/span>\r\n<span class=\"hljs-keyword\" style=\"color: #954121;\">fi<\/span>\r\n<\/pre>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>The preceding sample script is to validate the user in a very simple way by getting their name.\u00a0 It is designed to welcome only if the username is <code>Sarav<\/code><\/p>\n<p>Otherwise, It would print some error message to the user and also log some audit info to the error log file.<\/p>\n<p>we have declared two functions here named as <code>errlog<\/code>\u00a0and <code>outlog<\/code>\u00a0which is being used as a logger to log the messages to the write files.<\/p>\n<p>I have been using such methods for a very long time in my experience and I hope you like it and find it useful.<\/p>\n<p>here is the execution of this script.<\/p>\n<p><script id=\"asciicast-ojyn5rjo9gFUn8m4Uz4iT9x4A\" src=\"https:\/\/asciinema.org\/a\/ojyn5rjo9gFUn8m4Uz4iT9x4A.js\" async><\/script><\/p>\n<blockquote><p>Note*: I have updated the script. and replaced the <code>&gt;<\/code>\u00a0single redirection to <code>&gt;&gt;<\/code>\u00a0double redirection symbol as the single one would rewrite the file and double redirection would append the file. So for logging purpose you need <code>&gt;&gt;<\/code>\u00a0this<\/p><\/blockquote>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>In this article, we have seen how to echo to stderr and redirect the stderr to stdin and vice versa. Hope you have also learnt the basics about linux file descriptors.<\/p>\n<p>Hope it helps.<\/p>\n<p>&nbsp;<\/p>\n<h2>For Further reads<\/h2>\n<p>I have listed down some of my favourite books and you click on them to buy it<\/p>\n<p>1# Linux Command Line and Shell scripting<\/p>\n<p><a href=\"https:\/\/www.amazon.in\/gp\/product\/111898384X\/ref=as_li_tl?ie=UTF8&amp;camp=3638&amp;creative=24630&amp;creativeASIN=111898384X&amp;linkCode=as2&amp;tag=saravak-21&amp;linkId=31aec3f63d0c5bd961398070b882aff8\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"\/\/ws-in.amazon-adsystem.com\/widgets\/q?_encoding=UTF8&amp;MarketPlace=IN&amp;ASIN=111898384X&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=saravak-21\" border=\"0\" \/><\/a><\/p>\n<p>2# Mastering Linux Shell scripting<\/p>\n<p><a href=\"https:\/\/www.amazon.in\/gp\/product\/1788990552\/ref=as_li_tl?ie=UTF8&amp;camp=3638&amp;creative=24630&amp;creativeASIN=1788990552&amp;linkCode=as2&amp;tag=saravak-21&amp;linkId=9fe7e9640b64d7056a91ac2b0714780d\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"\/\/ws-in.amazon-adsystem.com\/widgets\/q?_encoding=UTF8&amp;MarketPlace=IN&amp;ASIN=1788990552&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=saravak-21\" border=\"0\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577994\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"4817\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577994\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577994\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Every command we run in Linux would either give output or throw an error. Sometimes we want the errors to be redirected into an output channel or you may want to redirect the STDERR to one file and STDOUT to a different file You might have come across these two[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":4837,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[12,7],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>What is STDOUT and STDERR in Linux - echo to STDERR<\/title>\n<meta name=\"description\" content=\"bash echo to stderr. What is STDOUT to STDERR. redirect output to error in bash linux. What is &gt;&amp;2 and 2&gt;&amp;1 and how it works. What is STDOUT and STDERR in Linux. redirect STDERR and STDOUT to a file. Save command output and errors into a file Linux. How to redirect the error and output to a same file with 2&gt;&amp;1 example.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"What is STDOUT and STDERR in Linux - echo to STDERR\" \/>\n<meta property=\"og:description\" content=\"bash echo to stderr. What is STDOUT to STDERR. redirect output to error in bash linux. What is &gt;&amp;2 and 2&gt;&amp;1 and how it works. What is STDOUT and STDERR in Linux. redirect STDERR and STDOUT to a file. Save command output and errors into a file Linux. How to redirect the error and output to a same file with 2&gt;&amp;1 example.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2020-01-25T01:10:46+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-06-19T05:53:31+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"2702\" \/>\n\t<meta property=\"og:image:height\" content=\"1714\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/01\/Screenshot-2020-01-25-at-6.51.30-AM.png\",\"width\":2702,\"height\":1714,\"caption\":\"Bash echo to STDERR\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/\",\"name\":\"What is STDOUT and STDERR in Linux - echo to STDERR\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#primaryimage\"},\"datePublished\":\"2020-01-25T01:10:46+00:00\",\"dateModified\":\"2022-06-19T05:53:31+00:00\",\"description\":\"bash echo to stderr. What is STDOUT to STDERR. redirect output to error in bash linux. What is >&2 and 2>&1 and how it works. What is STDOUT and STDERR in Linux. redirect STDERR and STDOUT to a file. Save command output and errors into a file Linux. How to redirect the error and output to a same file with 2>&1 example.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"What is STDOUT and STDERR in Linux &#8211; echo to STDERR\",\"datePublished\":\"2020-01-25T01:10:46+00:00\",\"dateModified\":\"2022-06-19T05:53:31+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#primaryimage\"},\"articleSection\":\"Shell Scripting,Unix\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/linux-stdout-stderr-bash\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4817"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=4817"}],"version-history":[{"count":5,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4817\/revisions"}],"predecessor-version":[{"id":8693,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/4817\/revisions\/8693"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/4837"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=4817"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=4817"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=4817"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}