{"id":2742,"date":"2019-01-16T05:59:58","date_gmt":"2019-01-16T00:29:58","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=2742"},"modified":"2022-11-11T00:43:26","modified_gmt":"2022-11-10T19:13:26","slug":"ansible-ad-hoc-commands","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/","title":{"rendered":"Ansible AD HOC  Command Examples &#8211; Ansible Cheat Sheet | Devops Junction"},"content":{"rendered":"<div style=\"display: none;\"><\/div>\n<div style=\"display: none;\"><\/div>\n<div style=\"display: none;\"><\/div>\n<div style=\"display: none;\"><\/div>\n<p>Ansible ad hoc commands are one-liners designed to achieve a very specific task they are like quick snippets and your compact swiss army knife when you want to do a quick task across multiple machines.<\/p>\n<p>To put simply, Ansible ad hoc commands are one-liner Linux shell commands and playbooks are like a shell script, a collective of many commands with logic.<\/p>\n<p>Ansible ad hoc commands come handy when you want to perform a quick task.<\/p>\n<p>We have collected 20+ examples which will help you to get started with Ansible AD HOC commands. It is your Ansible AD HOC command Cheat Sheet or Ansible Cheat Sheet.<\/p>\n<p>Come on Pal, Let&#8217;s Ansible.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h2>Prerequisites<\/h2>\n<ol>\n<li>Ansible must be installed ( only in control machine, remember this is agentless)<\/li>\n<li>some remote Virtual machines to test, you can use vagrant to build them ( <a href=\"https:\/\/www.middlewareinventory.com\/blog\/server-provisioning-with-vagrant-and-ansible-apache-server-setup-example\/\">this article would help you get started)<\/a><\/li>\n<li>Make sure that the control machine\u00a0and VM has SSH connectivity<\/li>\n<li>I recommend you enable SSH key-based authentication for efficiency\u00a0\u00a0( <a href=\"https:\/\/www.middlewareinventory.com\/blog\/enable-ssh-key-based-authentication-2-steps\/\">refer this article to enable SSH key based auth<\/a>)<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<h2>What is Ansible ad hoc commands<\/h2>\n<p>ad hoc in Latin means something done for a very precise and particular purpose.\u00a0 As the word suggests, ansible ad hoc commands are written for a very particular task. Some of the ad hoc scenarios are given below<\/p>\n<ol>\n<li>Just validate the uptime of 1 to 200 remote servers<\/li>\n<li>Just get the disk space of remote hosts<\/li>\n<li>Ping and validate if the server is alive and responds<\/li>\n<li>shutdown multiple remote hosts at a single command<\/li>\n<\/ol>\n<p>I have given 22 real-time examples of ansible ad hoc commands and I know that is just a little but it will help you start your journey towards ansible automation.<\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible ad_hoc commands Syntax<\/h2>\n<p>Refer the following diagram to understand how the ansible ad hoc commands are framed.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.48.32-AM.png\"><img class=\"alignnone size-full wp-image-2786\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.48.32-AM.png\" alt=\"ansible ad hoc commands\" width=\"967\" height=\"542\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.48.32-AM.png 967w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.48.32-AM-300x168.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.48.32-AM-768x430.png 768w\" sizes=\"(max-width: 967px) 100vw, 967px\" \/><\/a><\/p>\n<p>To run an ad hoc command, the command must be framed or have the following syntax.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">ansible &lt;host-pattern&gt; [options]<\/pre>\n<p>for example. the command should be written as follows.<\/p>\n<pre class=\"hljs\" style=\"display: block; overflow-x: auto; padding: 0.5em; background: #232323; color: #e6e1dc;\">ansible appserverhostgroup -m &lt;modulename&gt; -a &lt;arguments to the module<span class=\"hljs-string\" style=\"color: #a5c261;\">&gt;<\/span><\/pre>\n<p>A single ansible ad hoc command can have multiple options. <code>-m<\/code> and <code>-a<\/code> are one amongst them and widely used.<\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible Ad Hoc Command Examples<\/h2>\n<p>Here are the 17 selected examples of ansible ad hoc commands and you can directly go to your desired example or scroll through to see them all.<\/p>\n<ol>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex1\">ansible ad hoc <span style=\"color: #003366;\">ping<\/span> command example<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex2\">ansible ad hoc command to check <span style=\"color: #003366;\">uptime<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex3\">ansible ad hoc command to <span style=\"color: #003366;\">check memory usage<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex4\">ansible ad hoc command to <span style=\"color: #003366;\">get physical memory<\/span> allocated to the host<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex5\">Execute a<span style=\"color: #003366;\"> command as root user<\/span> (sudo) on host with ansible ad hoc command<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex6\">ansible ad hoc command to Execute a command as a different user\u00a0 (sudo\u00a0su)<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex7\">ad hoc command to<span style=\"color: #003366;\"> Create a unix user group<\/span> <\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex8\">ad hoc command to <span style=\"color: #003366;\">Create a unix user<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex9\">ansible ad hoc command to <span style=\"color: #003366;\">Create a Directory<\/span> with 755 permission <\/a>&#8211; ansible mkdir<\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex10\">ansible ad hoc command to <span style=\"color: #003366;\">Create a file<\/span> with 755 permission<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex11\">ad hoc command to<span style=\"color: #003366;\"> Change ownership<\/span> of a file<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex12\">ansible ad hoc command to\u00a0<span style=\"color: #003366;\"> check free disk space<\/span> of hosts <\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex13\">ansible ad hoc command to <span style=\"color: #003366;\">Install a package using yum<\/span> command<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex14\">ansible ad hoc command to <span style=\"color: #003366;\">Start or stop the service<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex14\">Install and configure python Django application server with ansible ad hoc <\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex16\">Managing <span style=\"color: #003366;\">Cron Job and Scheduling<\/span> with Ansible ad hoc<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex17\">Running <span style=\"color: #003366;\">operations in the background<\/span> asynchronous with Polling ansible<\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex18\">ansible ad hoc command to <span style=\"color: #003366;\">reboot remote system<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-command-examples-cheat-sheet\/#ex19\">ansible ad hoc command to <span style=\"color: #003366;\">check service status<\/span><\/a><\/li>\n<li><a href=\"#Example_20_ansible_ad_hoc_command_to_copy_file_Local_to_remote\">ansible ad hoc command to <span style=\"color: #003366;\">copy file local to remote<\/span><\/a><\/li>\n<li><a href=\"#Example_21_ansible_ad_hoc_command_to_copy_directory_Local_to_remote\">ansible ad hoc command to <span style=\"color: #003366;\">copy directory local to remote<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#Example_22_ad_hoc_command_to_list_nfs_mounts\">ansible ad hoc command to <\/a><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#Example_22_ad_hoc_command_to_list_nfs_mounts\">list<span style=\"color: #000000;\"> NFS mounts<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#Example_23_ad_hoc_command_to_display_memory_cpu_and_OS_distribution_and_version\">adhoc command to <span style=\"color: #003366;\">collect memory, cpu and OS distribution of a host<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#Example_24_ad_hoc_command_to_stop_start_restart_service_Ansible_SystemD\">ansible ad hoc command to <span style=\"color: #003366;\">stop, start, restart, reload service<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#Example_25_ansible_ad_hoc_command_to_download_a_file_from_URL\">ad hoc command to<span style=\"color: #003366;\"> download file from URL<\/span><\/a><\/li>\n<li><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#Example_26_ansible_ad_hoc_command_to_check_listening_ports\">ad hoc command to <span style=\"color: #003366;\">check listening ports<\/span><\/a><\/li>\n<\/ol>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3><\/h3>\n<h3 id=\"ex1\">Example1:\u00a0 ansible ad hoc ping example<\/h3>\n<p>In this example, we are going to test the remote nodes or hosts and make sure they respond back using Ansible&#8217;s default SSH channel<\/p>\n<details>\n<summary>What is Ansible Module? Quick summary<\/summary>\n<pre>Ansible modules are more like unix commands they have built to \r\nhelp you accomplish a single and a specific task.\u00a0\r\n\r\n<\/pre>\n<p><strong>ping<\/strong><\/p>\n<pre> : to check the connectivity\r\n<\/pre>\n<p><strong>shell<\/strong><\/p>\n<pre>: to run shell scripts\r\n<\/pre>\n<p><strong>command<\/strong><\/p>\n<pre>: to run commands in remote\r\n<\/pre>\n<p><strong>raw<\/strong><\/p>\n<pre>: Execute some very basic SSH commands<\/pre>\n<\/details>\n<p>We presume that you have set up SSH key based auth between the control machine and the hosts. If yes then there is no need to enter the credentials and command would be simple.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -m ping -i ansible_hosts &#8211; user=vagrant \r\n\r\nSSH password:\r\nmwivmapp02 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"ping\": \"pong\"\r\n}\r\nmwisqldb01 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"ping\": \"pong\"\r\n}\r\nmwivmapp01 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"ping\": \"pong\"\r\n}\r\nmwiweb02 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p><strong>What if you do not have SSH key-based authentication<\/strong>, then enter the user name and password while invoking the command as shown below.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -m ping -i ansible_hosts &#8211; user=vagrant &#8211; ask-pass\r\n\r\nSSH password:\r\nmwivmapp02 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"ping\": \"pong\"\r\n}\r\nmwisqldb01 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"ping\": \"pong\"\r\n}\r\nmwivmapp01 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"ping\": \"pong\"\r\n}\r\nmwiweb02 | SUCCESS =&gt; {\r\n\"changed\": false,\r\n\"<\/pre>\n<p>you can read how to transfer <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ssh-key-exchange\">SSH key using ansible in this article<\/a><\/p>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<details open=\"open\">\n<summary>FAQ: Why the servers are not in order?<\/summary>\n<p>Thanks to ansible parallel nature, Ansible runs commands in remote hosts using multiple forks or simply put executing the task by parallel across all the servers. this would save lot of your time.<\/p>\n<p>The Setting of how many forks (or) parallel process that ansible can run can be configured by using <strong>-f\u00a0<\/strong>(fork) flag.<\/p>\n<p>Try running the same command with the following command<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible multi -m ping -i ansible_hosts &#8211; user=vagrant -f 1<\/pre>\n<p>&nbsp;<\/p>\n<p>The command restricts ansible to use only one fork (or) limit the parallel process to only one. Now you can see the servers are in order but takes longer time than earlier.<\/p>\n<p>&nbsp;<\/p>\n<\/details>\n<h3 id=\"ex2\">Example 2:\u00a0 ansible ad hoc command to check uptime<\/h3>\n<p>In this example, we are going to know the uptime of the hosts. Ansible provides two major modules to run the command over the host group or on the remote server.<\/p>\n<p>Which one to pick is not a big confusion if you know what are they and their capabilities<\/p>\n<details>\n<summary>FAQ: Ansible command vs shell module<\/summary>\n<p>Both ansible shell and command modules can be used to run SHELL commands on the nodes. but one difference is that command module does not support piping the output to another command, In other words, it will support the only command whereas shell module support complicated pipes and every shell command you use day to day<\/p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr style=\"height: 56px;\">\n<td style=\"width: 33.3333%; height: 56px;\"><strong>The UNIX Command<\/strong><\/td>\n<td style=\"width: 33.3333%; height: 56px;\"><strong>\u00a0 Supported in command module<\/strong><\/td>\n<td style=\"width: 33.3333%; height: 56px;\"><strong>Supported in Shell module<\/strong><\/td>\n<\/tr>\n<tr style=\"height: 10px;\">\n<td style=\"width: 33.3333%; height: 10px;\">cat \/etc\/passwd<\/td>\n<td style=\"width: 33.3333%; height: 10px;\">\u00a0YES<\/td>\n<td style=\"width: 33.3333%; height: 10px;\">\u00a0YES<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 33.3333%; height: 28px;\">cat \/etc\/passwd|grep &#8220;^saravak&#8221;<\/td>\n<td style=\"width: 33.3333%; height: 28px;\">NO ( Since it has Pipe)<\/td>\n<td style=\"width: 33.3333%; height: 28px;\">\u00a0YES<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/details>\n<p>Here are the commands you can use to get the uptime. All three commands would yield you the same results.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible multi -m command -a uptime \r\n\r\nansible multi -m shell -a uptime \r\n\r\nansible multi -a uptime<\/pre>\n<p>&nbsp;<\/p>\n<p>as you could have already figured out<strong> -m<\/strong> is the module and <strong>-a<\/strong> should contain the command it should run which goes as an argument to command and shell.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3 id=\"ex3\">Example 3:\u00a0 How to check the free memory or memory usage of\u00a0 hosts using ansible ad hoc command<\/h3>\n<p>The following ansible ad hoc command would help you get the free memory of all the hosts in the host group named <em>multi<\/em><\/p>\n<p>As you could see we are running the<code> free -m<\/code> command on the remote hosts and collecting the information<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -a \"free -m\" -i ansible_hosts\r\n\r\nmwivmapp01 | SUCCESS | rc=0 &gt;&gt;\r\n              total        used        free      shared  buff\/cache   available\r\nMem:           1839         108        1570           8         160        1563\r\nSwap:          1023           0        1023\r\n\r\nmwisqldb01 | SUCCESS | rc=0 &gt;&gt;\r\n              total        used        free      shared  buff\/cache   available\r\nMem:           1839         100        1578           8         160        1571\r\nSwap:          1023           0        1023\r\n\r\nmwiweb02 | SUCCESS | rc=0 &gt;&gt;\r\n              total        used        free      shared  buff\/cache   available\r\nMem:           1839         100        1581           8         157        1573\r\nSwap:          1023           0        1023\r\n\r\nmwivmapp02 | SUCCESS | rc=0 &gt;&gt;\r\n              total        used        free      shared  buff\/cache   available\r\nMem:           1839         109        1569           8         160        1562\r\nSwap:          1023           0        1023<\/pre>\n<p>&nbsp;<\/p>\n<h3 id=\"ex4\">Example 4:\u00a0 ansible ad hoc command to get physical memory allocated to the host<\/h3>\n<p>To accomplish this example we are going to use two commands together so we must opt to shell module.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -m shell -a \"cat \/proc\/meminfo|head -2\" \r\n\r\nmwisqldb01 | SUCCESS | rc=0 &gt;&gt;\r\nMemTotal:        1883428 kB\r\nMemFree:         1616460 kB\r\n\r\nmwivmapp02 | SUCCESS | rc=0 &gt;&gt;\r\nMemTotal:        1883428 kB\r\nMemFree:         1607372 kB\r\n\r\nmwiweb02 | SUCCESS | rc=0 &gt;&gt;\r\nMemTotal:        1883428 kB\r\nMemFree:         1619612 kB\r\n\r\nmwivmapp01 | SUCCESS | rc=0 &gt;&gt;\r\nMemTotal:        1883428 kB\r\nMemFree:         1607908 kB<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex5\">Example 5:\u00a0 ansible ad hoc become &#8211;\u00a0 Execute a command as root user (sudo) host<\/h3>\n<p>In the earlier versions of ansible there is an option named as <strong>sudo <\/strong>(deprecated), Since ansible 2.0 there are two new options named as <strong>become<\/strong>\u00a0and <strong>become_user<\/strong><\/p>\n<p>In this example, we are going to access one of the privileged configuration files. We are going to check if the user exists by searching the <code>\/etc\/passwd<\/code> file<\/p>\n<p><span style=\"color: #0c4370;\">Using <strong>SUDO<\/strong> module ( deprecated and will be removed in ansible 2.6 )\u00a0 use ansible become instead<\/span><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -m shell -a \"cat \/etc\/passwd|grep -i vagrant\" -s &#8211; ask-sudo-pass\r\n\r\nSUDO password:\r\n\r\nmwivmapp02 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash\r\n\r\nmwivmapp01 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash\r\n\r\nmwisqldb01 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash\r\n\r\nmwiweb02 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash<\/pre>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-sudo-ansible-become-example\/\"><span style=\"color: #0c4370;\">Using <strong>become<\/strong> module<\/span><\/a><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -m shell -a \"cat \/etc\/passwd|grep -i vagrant\" -b -K\r\n\r\n[DEPRECATION WARNING]: The sudo command line option has been deprecated in favor of the \"become\" command line arguments. This feature will be removed in version 2.6.\r\n Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.\r\n\r\nSUDO password:\r\nmwivmapp02 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash\r\n\r\nmwivmapp01 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash\r\n\r\nmwisqldb01 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash\r\n\r\nmwiweb02 | SUCCESS | rc=0 &gt;&gt;\r\nvagrant:x:1000:1000:vagrant:\/home\/vagrant:\/bin\/bash<\/pre>\n<p>&nbsp;<\/p>\n<p>here<\/p>\n<p><strong>-b<\/strong> is the option for become and by default it will become root user<\/p>\n<p>&#8211;<strong>K\u00a0<\/strong>is to tell ansible to ask for SUDO password<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3 id=\"ex6\">Example 6:\u00a0 ansible ad hoc become &#8211; Execute a command as a different user\u00a0 (sudo su)<\/h3>\n<p>In this example, we are going to create a new file inside a directory <strong>\/opt\/oracle<\/strong> which is owned by <strong>weblogic<\/strong> user<\/p>\n<p>In the following ad-hoc command snapshot you can see we have given the username we want to switch to\u00a0 using\u00a0<code>--become-user=weblogic<\/code>\u00a0option<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -m file -a \"path=\/opt\/oracle\/binaries state=directory mode=0755\" -i ansible_hosts -b &#8211; become-user=weblogic\r\n\r\nmwivmapp01 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 1001,\r\n    \"group\": \"weblogic\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"weblogic\",\r\n    \"path\": \"\/opt\/oracle\/binaries\",\r\n    \"secontext\": \"unconfined_u:object_r:usr_t:s0\",\r\n    \"size\": 6,\r\n    \"state\": \"directory\",\r\n    \"uid\": 1001\r\n}\r\nmwivmapp02 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 1001,\r\n    \"group\": \"weblogic\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"weblogic\",\r\n    \"path\": \"\/opt\/oracle\/binaries\",\r\n    \"secontext\": \"unconfined_u:object_r:usr_t:s0\",\r\n    \"size\": 6,\r\n    \"state\": \"directory\",\r\n    \"uid\": 1001\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3 id=\"ex7\">Example 7: Create a user group with ansible ad hoc command<\/h3>\n<p>Here we are creating a user name group named weblogic using the ansible <code>group<\/code> module, the same task can be reversed to delete the group if you change the <code>state<\/code> to <code>absent<\/code><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -s -m group -a \"name=weblogic state=present\" \r\n\r\nmwivmapp02 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 1001,\r\n    \"name\": \"weblogic\",\r\n    \"state\": \"present\",\r\n    \"system\": false\r\n}\r\nmwivmapp01 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 1001,\r\n    \"name\": \"weblogic\",\r\n    \"state\": \"present\",\r\n    \"system\": false\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex8\">Example 8: Create a unix user with ansible ad hoc command<\/h3>\n<p>In this example, we are going to create a UNIX user using the ansible user module<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -m user -a \"name=weblogic group=weblogic createhome=yes\" -b\r\n\r\nmwivmapp01 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"comment\": \"\",\r\n    \"create_home\": true,\r\n    \"group\": 1001,\r\n    \"home\": \"\/home\/weblogic\",\r\n    \"name\": \"weblogic\",\r\n    \"shell\": \"\/bin\/bash\",\r\n    \"state\": \"present\",\r\n    \"system\": false,\r\n    \"uid\": 1001\r\n}\r\nmwivmapp02 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"comment\": \"\",\r\n    \"create_home\": true,\r\n    \"group\": 1001,\r\n    \"home\": \"\/home\/weblogic\",\r\n    \"name\": \"weblogic\",\r\n    \"shell\": \"\/bin\/bash\",\r\n    \"state\": \"present\",\r\n    \"system\": false,\r\n    \"uid\": 1001\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex9\">Example 9: Create a Directory with 755 permission using ansible ad hoc command<\/h3>\n<p>In this example, we are going to create a new directory with 755 permisssion this is done using the ansible <code>file<\/code> module<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -m file -a \"path=\/opt\/oracle state=directory mode=0755\" -b\r\n\r\nmwivmapp01 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 0,\r\n    \"group\": \"root\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"root\",\r\n    \"path\": \"\/opt\/oracle\",\r\n    \"secontext\": \"unconfined_u:object_r:usr_t:s0\",\r\n    \"size\": 6,\r\n    \"state\": \"directory\",\r\n    \"uid\": 0\r\n}\r\nmwivmapp02 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 0,\r\n    \"group\": \"root\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"root\",\r\n    \"path\": \"\/opt\/oracle\",\r\n    \"secontext\": \"unconfined_u:object_r:usr_t:s0\",\r\n    \"size\": 6,\r\n    \"state\": \"directory\",\r\n    \"uid\": 0\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex10\">Example 10: Create a file with 755 permission using ansible ad hoc commands<\/h3>\n<p>Like the previous example, we are going to create a file this time with 755 permission<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -m file -a \"path=\/tmp\/testfile state=touch mode=0755\"\r\n\r\nmwivmapp02 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"dest\": \"\/tmp\/testfile\",\r\n    \"gid\": 1000,\r\n    \"group\": \"vagrant\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"vagrant\",\r\n    \"secontext\": \"unconfined_u:object_r:user_tmp_t:s0\",\r\n    \"size\": 0,\r\n    \"state\": \"file\",\r\n    \"uid\": 1000\r\n}\r\nmwivmapp01 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"dest\": \"\/tmp\/testfile\",\r\n    \"gid\": 1000,\r\n    \"group\": \"vagrant\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"vagrant\",\r\n    \"secontext\": \"unconfined_u:object_r:user_tmp_t:s0\",\r\n    \"size\": 0,\r\n    \"state\": \"file\",\r\n    \"uid\": 1000\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex11\">Example 11: Change ownership of a file using ansible ad hoc command<\/h3>\n<p>In this example, we are going to change the ownership of the file using ansible ad hoc command with ansible <code>file<\/code> module<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -m file -a \"path=\/opt\/oracle group=weblogic owner=weblogic\" -i ansible_hosts -b\r\n\r\nmwivmapp01 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 1001,\r\n    \"group\": \"weblogic\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"weblogic\",\r\n    \"path\": \"\/opt\/oracle\",\r\n    \"secontext\": \"unconfined_u:object_r:usr_t:s0\",\r\n    \"size\": 6,\r\n    \"state\": \"directory\",\r\n    \"uid\": 1001\r\n}\r\nmwivmapp02 | SUCCESS =&gt; {\r\n    \"changed\": true,\r\n    \"gid\": 1001,\r\n    \"group\": \"weblogic\",\r\n    \"mode\": \"0755\",\r\n    \"owner\": \"weblogic\",\r\n    \"path\": \"\/opt\/oracle\",\r\n    \"secontext\": \"unconfined_u:object_r:usr_t:s0\",\r\n    \"size\": 6,\r\n    \"state\": \"directory\",\r\n    \"uid\": 1001\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3 id=\"ex12\">Example 12: how to check free disk space of hosts\u00a0using ansible ad hoc commands<\/h3>\n<p>Most of us would like to quickly check the disk space of many machines with a single command. this is that command<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-lineoffset=\"2\" data-enlighter-linenumbers=\"false\">ansible multi -a \"df -h\"<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex13\">Example 13:\u00a0ad hoc command to Install a package using yum module<\/h3>\n<p>How to install a package or software in linux using yum module of ansible<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible multi -s -m yum -a \"name=httpd state=installed\"<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex14\">Example 14: ad hoc command to Start or stop the service<\/h3>\n<p>You really do not have to log in to start or stop the service running in your Linux system. you can simply use this ansible service module ad hoc command<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\"># To Start\r\nansible multi -s -m service -a \"name=httod state=started enabled=yes\"\r\n\r\n# To Stop\r\nansible multi -s -m service -a \"name=httpd state=stop enabled=yes\"<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3 id=\"ex15\">Example 15:\u00a0Install and configure python Django application server with ansible ad hoc commands<\/h3>\n<p>These are set of commands you have to execute to install the Django application server and Mysql libraries. Here we are using <strong>easy_install<\/strong> which is an ansible module it helps to find the easy installation option from <strong>ansible galaxy<\/strong><\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible app -s -m yum -a \"name=MySQL-python state=present\"\r\n\r\n$ ansible app -s -m yum -a \"name=python-setuptools state=present\"\r\n\r\n$ ansible app -s -m easy_install -a \"name=django\"<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex16\">Example 16:\u00a0Managing Cron Job and Scheduling with Ansible ad hoc<\/h3>\n<p>We can easily manage the Cron jobs with Ansible cron module. Here are the list commands you can keep handy<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">#  Run the job every 15 minutes\r\n$ ansible multi -s -m cron -a \"name='daily-cron-all-servers' minute=*\/15 \r\njob='\/path\/to\/minute-script.sh'\"\r\n\r\n# Run the job every four hours\r\n$ ansible multi -s -m cron -a \"name='daily-cron-all-servers' hour=4 \r\njob='\/path\/to\/hour-script.sh'\"\r\n\r\n# Enabling a Job to run at system reboot\r\n$ ansible multi -s -m cron -a \"name='daily-cron-all-servers' special_time=reboot \r\njob='\/path\/to\/startup-script.sh'\"\r\n\r\n# Scheduling a Daily job\r\n$ ansible multi -s -m cron -a \"name='daily-cron-all-servers' special_time=daily \r\njob='\/path\/to\/daily-script.sh'\"\r\n\r\n# Scheduling a Weekly job\r\n$ ansible multi -s -m cron -a \"name='daily-cron-all-servers' special_time=weekly \r\njob='\/path\/to\/daily-script.sh'\"<\/pre>\n<p>&nbsp;<\/p>\n<h3 id=\"ex17\">Example 17:\u00a0Running operations in the background asynchronous with Polling ansible<\/h3>\n<p>You can use AD-HOC commands to run the operations background using <strong>-B\u00a0<\/strong>and poll the job in the frequent interval <strong>-P<\/strong><\/p>\n<p>ansible ad-hoc command\u00a0 to perform yum update and frequently poll and check the status of the job<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible multi -s -B 3600 -a \"yum -y update\" \r\n\r\n$ ansible multi -m async_status -a \"jid=763350539037\"<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>By Default the polling interval is 10 seconds, but can modify it using <strong>-P\u00a0<\/strong>option<\/p>\n<p>If you set <strong>-P<\/strong> as 0 it called as\u00a0<strong>fire and forget<\/strong>,\u00a0The job id would not be given and you cannot track the job using async_status as shown above.<\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex18\">Example 18: ansible ad hoc command to reboot the system<\/h3>\n<p>In this example we are going to reboot the remote system using the shell module and Poll 0, it represents fire and forget<\/p>\n<p>To know more about Ansible async and poll<a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-async\/\"> refer this article<\/a><\/p>\n<p>Rebooting the host in the background is the best example for fire and forget or async and poll.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible all -i inventory -b -B 1 -P 0 -m shell -a \"sleep 5 &amp;&amp; reboot\"<\/pre>\n<p>&nbsp;<\/p>\n<p>there is another ad hoc command available with reboot module to reboot the remote system<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible all -m reboot -a reboot_timeout=3600 -u vagrant -i ansible_hosts -b<\/pre>\n<p>&nbsp;<\/p>\n<p>Here<\/p>\n<p>-m &#8211; represents the module<\/p>\n<p>-a &#8211; additional parameter to the reboot module to set the timeout to 3600 seconds<\/p>\n<p>-u &#8211; remote SSH user<\/p>\n<p>-i &#8211; inventory file<\/p>\n<p>-b &#8211; to instruct ansible to become root user before executing the task<\/p>\n<p>Here is the execution output of this ad hoc command. we have three commands in this screenshot, First is to check the status and second to reboot and third one is to check the uptime<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-1.45.46-AM.png\"><img class=\"alignnone size-full wp-image-5800\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-1.45.46-AM.png\" alt=\"ansible ad hoc command\" width=\"1822\" height=\"646\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-1.45.46-AM.png 1822w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-1.45.46-AM-300x106.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-1.45.46-AM-768x272.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-1.45.46-AM-1024x363.png 1024w\" sizes=\"(max-width: 1822px) 100vw, 1822px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h3 id=\"ex19\">Example 19: ansible ad hoc command to check the service status<\/h3>\n<p>In this example, we are going to see how to check the status of service using ansible ad hoc command<\/p>\n<p>For example, let&#8217;s suppose we want to check the status and more information about the <code>httpd<\/code> service the following ad hoc command with ansible service module would help<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible testserver -m service -a \"name=httpd\" -i ansible_hosts -u vagrant<\/pre>\n<p>&nbsp;<\/p>\n<p>The following screenshot shows the realtime output showing the status and more information about the httpd service.<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-2.00.38-AM.png\"><img class=\"alignnone size-full wp-image-5801\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-2.00.38-AM.png\" alt=\"\" width=\"2338\" height=\"1314\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-2.00.38-AM.png 2338w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-2.00.38-AM-300x169.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-2.00.38-AM-768x432.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screenshot-2020-09-26-at-2.00.38-AM-1024x576.png 1024w\" sizes=\"(max-width: 2338px) 100vw, 2338px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Example 20: ansible ad hoc command to copy file &#8211; Local to remote<\/h3>\n<p>The following ad hoc command with copy module copies the file from Src location on the local control machine to the specified location on the remote server<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible testserver -m copy -a \"src=~\/Downloads\/index.html dest=\/var\/www\/html owner=apache group=apache mode=0644\"<\/pre>\n<p>&nbsp;<\/p>\n<p>to know more about this in detail\u00a0 refer to this article<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 21: ansible ad hoc command to copy directory &#8211; Local to remote<\/h3>\n<p>This is an ansible AD HOC command to copy a directory to the remote server<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-lineoffset=\"2\" data-enlighter-linenumbers=\"false\">ansible testserver -m copy -a \"src=~\/Downloads\/logos dest=\/var\/www\/html\/ owner=apache group=apache mode=0644 \" -i ansible_hosts -b<\/pre>\n<p>You need to notice that there is no <code>\/<\/code> at the end of src path. It is just <code>~\/Downloads\/logos<\/code><\/p>\n<p>If you put a slash at the end. It would copy only the contents of the directory alone but not the directory.<\/p>\n<p>read more about this in detail in here<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 22: ad hoc command to list nfs mounts<\/h3>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">ansible testservers -m shell -a 'df -h -T|grep -i nfs'  -i ansible_hosts<\/pre>\n<p>we are using the shell module and executing <code>df -h -T<\/code> to display the type of mount and filtering only <code>nfs<\/code> type mounts with the help of grep command.<\/p>\n<p>There is a more efficient way to do it with <code>ansible setup<\/code> module. which is <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-facts-list-how-to-use-ansible-facts\/\">discussed here in detail<\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Example 23:\u00a0 ad hoc command to display memory, cpu and OS distribution and version<\/h3>\n<p>Here we have given a Ansible Ad hoc command to display system information like memory, cpu etc.<\/p>\n<p>we have used Ansible <code>setup<\/code> module with <code>filter<\/code>\u00a0 to select necassary attributes of a system.<\/p>\n<p>to know more about what other <code>ansible_facts<\/code> or variables you can possibly use in this filter. <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-facts-list-how-to-use-ansible-facts\">read our detail article on ansible facts<\/a><\/p>\n<p>But this ad hoc command would help you solve things up.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible appservers -m setup -i ansible_hosts -a 'filter=ansible_distribution,ansible_distribution_version,ansible_memfree_mb,ansible_memtotal_mb,ansible_processor_cores*,ansible_architecture' 2&gt;\/dev\/null\r\n10.0.4.26 | SUCCESS =&gt; {\r\n    \"ansible_facts\": {\r\n        \"ansible_architecture\": \"x86_64\",\r\n        \"ansible_distribution\": \"Ubuntu\",\r\n        \"ansible_distribution_version\": \"20.04\",\r\n        \"ansible_memfree_mb\": 127,\r\n        \"ansible_memtotal_mb\": 3933,\r\n        \"ansible_processor_cores\": 2,\r\n        \"discovered_interpreter_python\": \"\/usr\/bin\/python\"\r\n    },\r\n    \"changed\": false\r\n}\r\n10.0.1.120 | SUCCESS =&gt; {\r\n    \"ansible_facts\": {\r\n        \"ansible_architecture\": \"x86_64\",\r\n        \"ansible_distribution\": \"Ubuntu\",\r\n        \"ansible_distribution_version\": \"18.04\",\r\n        \"ansible_memfree_mb\": 134,\r\n        \"ansible_memtotal_mb\": 3943,\r\n        \"ansible_processor_cores\": 2,\r\n        \"discovered_interpreter_python\": \"\/usr\/bin\/python\"\r\n    },\r\n    \"changed\": false\r\n}<\/pre>\n<p>&nbsp;<\/p>\n<h3>Example 24:\u00a0 ad hoc command to stop, start, restart service &#8211; Ansible SystemD<\/h3>\n<p>Simple way to restart any service with Ansible ad hoc command is to use <code>Shell<\/code> module with the actual <code>service<\/code> or <code>systemctl<\/code> command<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"bootstrap4\" data-enlighter-linenumbers=\"false\">$ ansible webservers -m shell -a \"service nginx restart\" -b\r\n\r\n$ ansible webservers -m shell -a \"systemctl restart nginx\" -b\r\n<\/pre>\n<p>You can also use Ansible&#8217;s built in <code>systemd<\/code> module otherwise like this.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ ansible webservers  -m systemd -a \"name=nginx state=reloaded\" -i prod-ansible-hosts\r\n\r\n$ ansible webservers -m systemd -a \"name=nginx state=restarted\" -i prod-ansible-hosts\r\n\r\n$ ansible webservers -m systemd -a \"name=nginx state=started\" -i prod-ansible-hosts\r\n\r\n$ ansible webservers -m systemd -a \"name=nginx state=stopped\" -i prod-ansible-hosts<\/pre>\n<p>So this is how you can manage to start, stop , restart services using ansible ad hoc<\/p>\n<p>&nbsp;<\/p>\n<h3>Example 25: ansible ad hoc command to download a file from URL<\/h3>\n<p>To download a file from URL in ansible ad hoc. You can either invoke linux commands like <code>CURL<\/code> or <code>WGET<\/code>\u00a0 but the preferred way is to use the <code>get_url<\/code> module of Ansible.<\/p>\n<p>This is how you can use <code>get_url<\/code> module in Ansible ad hoc to download a file in remote system<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\" data-enlighter-theme=\"bootstrap4\">$ ansible testserver -m get_url -a \"url=https:\/\/nodejs.org\/dist\/v14.17.4\/node-v14.17.4-linux-x64.tar.xz dest=\/tmp mode=0755\" -i prod-ansible-hosts\r\ntestserver | CHANGED =&gt; {\r\n    \"ansible_facts\": {\r\n        \"discovered_interpreter_python\": \"\/usr\/bin\/python\"\r\n    },\r\n    \"changed\": true,\r\n    \"checksum_dest\": null,\r\n    \"checksum_src\": \"8ea8ea5e5b34da3e3d81e557d373ab3ffdae91cd\",\r\n    \"dest\": \"\/tmp\/node-v14.17.4-linux-x64.tar.xz\",\r\n    \"elapsed\": 0,\r\n    \"gid\": 1000,\r\n    \"group\": \"ubuntu\",\r\n    \"md5sum\": \"9613888c2a5ad0cbe83f03e0b8ed8707\",\r\n    \"mode\": \"0755\",\r\n    \"msg\": \"OK (21754020 bytes)\",\r\n    \"owner\": \"ubuntu\",\r\n    \"size\": 21754020,\r\n    \"src\": \"\/home\/ubuntu\/.ansible\/tmp\/ansible-tmp-1627824782.251616-27135-120094112712777\/tmpa148e1\",\r\n    \"state\": \"file\",\r\n    \"status_code\": 200,\r\n    \"uid\": 1000,\r\n    \"url\": \"https:\/\/nodejs.org\/dist\/v14.17.4\/node-v14.17.4-linux-x64.tar.xz\"\r\n}<\/pre>\n<p>You just have to pass the necassary parameters to the get_url<\/p>\n<p><code>dest<\/code> : Destination directory where the file should be downloaded<\/p>\n<p><code>url<\/code>: From where the file should be obtained<\/p>\n<p><code>mode<\/code>:\u00a0 The file permission mode of the file once downloaded. we are setting <code>755<\/code><\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-get_url-examples-how-to-download-file-from-url\/\">read more about <code>get_url<\/code> module in our dedicated article<\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>Example 26: ansible ad hoc command to check listening ports<\/h3>\n<p>To check the list of open ports you can use <code>netstat<\/code> or <code>ss<\/code>\u00a0 commands over the Ansible shell module but the preferred way is to use the ansible community plugin <code>listen_ports_facts<\/code> module<\/p>\n<p>This is how you can use ansible <code>listen_ports_facts<\/code> to get a list of TCP and UDP ports listening on the servers (or) hostgroup<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">$ ansible testserver -m listen_ports_facts -i prod-ansible-hosts\r\n\r\ntestserver | SUCCESS =&gt; {\r\n    \"ansible_facts\": {\r\n        \"discovered_interpreter_python\": \"\/usr\/bin\/python\",\r\n        \"tcp_listen\": [\r\n            {\r\n                \"address\": \"127.0.0.1\",\r\n                \"name\": \"\",\r\n                \"pid\": 0,\r\n                \"port\": 5000,\r\n                \"protocol\": \"tcp\",\r\n                \"stime\": \"\",\r\n                \"user\": \"\"\r\n            },\r\n            {\r\n                \"address\": \"127.0.0.1\",\r\n                \"name\": \"\",\r\n                \"pid\": 0,\r\n                \"port\": 5001,\r\n                \"protocol\": \"tcp\",\r\n                \"stime\": \"\",\r\n                \"user\": \"\"\r\n            },\r\n            {\r\n                \"address\": \"127.0.0.1\",\r\n                \"name\": \"\",\r\n                \"pid\": 0,\r\n                \"port\": 587,\r\n                \"protocol\": \"tcp\",\r\n                \"stime\": \"\",\r\n                \"user\": \"\"\r\n            },\r\n            {\r\n                \"address\": \"127.0.0.1\",\r\n                \"name\": \"\",\r\n                \"pid\": 0,\r\n                \"port\": 6062,\r\n                \"protocol\": \"tcp\",\r\n                \"stime\": \"\",\r\n                \"user\": \"\"\r\n            },<\/pre>\n<p>The output can be further filtered or optimized, If the module is used on the <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-playbook-example\/\">ansible\u00a0 playbook. <\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Thanks<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670577366\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"2742\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670577366\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670577366\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n","protected":false},"excerpt":{"rendered":"<p>Ansible ad hoc commands are one-liners designed to achieve a very specific task they are like quick snippets and your compact swiss army knife when you want to do a quick task across multiple machines. To put simply, Ansible ad hoc commands are one-liner Linux shell commands and playbooks are[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2787,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98,454],"tags":[171,438,172,334,175,168,437,174,170,169,173,176],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Ansible AD HOC Command Examples - Ansible Cheat Sheet | Devops Junction<\/title>\n<meta name=\"description\" content=\"Ansible Ad hoc commands and an ansible cheat sheet. Examples on how to use Ad hoc commands for tasks like Disk Space check, Creating file, Create user, Creating Directory, copy file, copy directory, check service status, reboot the server etc. Ansible ad hoc commands explained with examples and a cheat sheet for ansible.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ansible AD HOC Command Examples - Ansible Cheat Sheet | Devops Junction\" \/>\n<meta property=\"og:description\" content=\"Ansible Ad hoc commands and an ansible cheat sheet. Examples on how to use Ad hoc commands for tasks like Disk Space check, Creating file, Create user, Creating Directory, copy file, copy directory, check service status, reboot the server etc. Ansible ad hoc commands explained with examples and a cheat sheet for ansible.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2019-01-16T00:29:58+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-11-10T19:13:26+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.23.23-AM.png\" \/>\n\t<meta property=\"og:image:width\" content=\"790\" \/>\n\t<meta property=\"og:image:height\" content=\"580\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-16-at-4.23.23-AM.png\",\"width\":790,\"height\":580},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/\",\"name\":\"Ansible AD HOC Command Examples - Ansible Cheat Sheet | Devops Junction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#primaryimage\"},\"datePublished\":\"2019-01-16T00:29:58+00:00\",\"dateModified\":\"2022-11-10T19:13:26+00:00\",\"description\":\"Ansible Ad hoc commands and an ansible cheat sheet. Examples on how to use Ad hoc commands for tasks like Disk Space check, Creating file, Create user, Creating Directory, copy file, copy directory, check service status, reboot the server etc. Ansible ad hoc commands explained with examples and a cheat sheet for ansible.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Ansible AD HOC Command Examples &#8211; Ansible Cheat Sheet | Devops Junction\",\"datePublished\":\"2019-01-16T00:29:58+00:00\",\"dateModified\":\"2022-11-10T19:13:26+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#primaryimage\"},\"keywords\":\"ansible ad hoc commands,ansible ad hoc systemctl,ansible ad-hoc commands list,ansible cheatsheet,ansible command examples,ansible for beginners,ansible mkdir,ansible modules examples,ansible playbook example,ansible playbook examples,ansible playbook with multiple hosts,how to learn ansible\",\"articleSection\":\"Ansible,DevOps_Beginner\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/ansible-ad-hoc-commands\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2742"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=2742"}],"version-history":[{"count":6,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2742\/revisions"}],"predecessor-version":[{"id":8742,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/2742\/revisions\/8742"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/2787"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=2742"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=2742"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=2742"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}