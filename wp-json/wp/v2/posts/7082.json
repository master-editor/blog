{"id":7082,"date":"2021-07-25T01:39:51","date_gmt":"2021-07-24T20:09:51","guid":{"rendered":"https:\/\/www.middlewareinventory.com\/?p=7082"},"modified":"2022-01-12T01:53:31","modified_gmt":"2022-01-11T20:23:31","slug":"collect-efs-ec2-ansible","status":"publish","type":"post","link":"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/","title":{"rendered":"Find EC2 instances using EFS &#8211; EFS Usage Report"},"content":{"rendered":"<p>Let&#8217;s suppose that you have an infrastructure of 1000 hosts and you want to know how many of them use EFS &#8211; Elastic File System or traditionally known as Network File System<\/p>\n<p>Or Let&#8217;s just say that you have 100 EFS File systems in your AWS account and you want to audit where those EFS file systems are mounted to.<\/p>\n<p>Both are same requirement from different angle.<\/p>\n<p>So I had a recent requirement of perfoming such EFS Audit and wanted to <strong>Find EC2 instances using EFS File System<\/strong> and this is how I did it with Ansible.<\/p>\n<p>So here it goes. EFS Usage report as CSV<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM.jpg\"><img class=\"post-img alignnone wp-image-7108 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM.jpg\" alt=\"efs mounts ec2\" width=\"2328\" height=\"1310\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM.jpg 2328w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM-300x169.jpg 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM-1024x576.jpg 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM-768x432.jpg 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM-1536x864.jpg 1536w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM-2048x1152.jpg 2048w\" sizes=\"(max-width: 2328px) 100vw, 2328px\" \/><\/a><\/p>\n<p>This article is going to talk about how I have ran a Single Ansible Playbook to collect the EFS mounts of my entire EC2 instances ( Let&#8217;s just say 1000+)<\/p>\n<p>With no further ado let&#8217;s start with a playbook<\/p>\n<p>&nbsp;<\/p>\n<h2>Ansible Playbook to collect EFS mounts across all EC2 instances<\/h2>\n<p>This playbook is rather little complicated than the simple ones.<\/p>\n<p>Cause I had to use lot of Ansible&#8217;s\u00a0 Built-in filters and variables\u00a0 along with Jinja2 Filters too.<\/p>\n<p>We can first take a look at the playbook and decode it bit by bit later.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">---\r\n - name: EFS report\r\n   hosts: prodall\r\n   gather_facts: yes\r\n   tasks: \r\n    - name: \"Collect the NFS mounts\"\r\n      set_fact:\r\n       testvar: \"{{ testvar | default ({}) | combine ( { inventory_hostname : (ansible_facts.mounts | selectattr('fstype', 'in', ['nfs4','nfs']) | list | sort(attribute='mount'))[-1] } ) }}\"\r\n      register: testreg\r\n\r\n    # to print all messages in single place\r\n    - set_fact: \r\n        data: \"{{ ansible_play_hosts | map ('extract', hostvars, 'testvar') }}\"\r\n      run_once: yes \r\n\r\n  \r\n    # Parse Json and create a CSV using jq\r\n    - name: create a CSV file locally on control machine\r\n      local_action:\r\n        module: shell\r\n        args: |\r\n           echo \"Hostname,EFS Device,Mountpoint\" &gt; efstest.csv\r\n           echo {{ data | to_json | tojson  }} | jq '.[]|to_entries[] | [.key, .value.device, .value.mount] |@csv'|tr -d '\\\\\"' &gt;&gt; efsdata.csv\r\n      run_once: yes\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>Yeah. It looks simple at first sight, but it took a while to figure out the filters ( at least for me)<\/p>\n<p>So we have three tasks here in the playbook<\/p>\n<p>Everything we need to do would be taken care by the <code>gathering_facts<\/code> stage. All the tasks are just for data processing.<\/p>\n<p>Read more about\u00a0 <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-facts-list-how-to-use-ansible-facts\/\">Ansible Facts and how to use them here<\/a><\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h3>Task 1:\u00a0 Collecting the EFS mounts from ansible facts<\/h3>\n<p><span style=\"color: #e00d62;\"><strong>The First Task <\/strong><\/span>where we do the major data collection. we are using the ansible facts already collected and trying to create\u00a0 dictionary.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">- name: \"Collect NFS Mounts\"\r\n  set_fact:\r\n     testvar: \"{{ testvar | default ({}) | combine ( { inventory_hostname : (ansible_facts.mounts | selectattr('fstype', 'in', ['nfs4','nfs']) | list | sort(attribute='mount'))[-1] } ) }}\"\r\n  register: testreg<\/pre>\n<p>&nbsp;<\/p>\n<p>The hostname would be the\u00a0 <code>key<\/code> and the value would be the nfs mount related info.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"json\">\"appserver01\": {\r\n            \"block_available\": 8796052503629,\r\n            \"block_size\": 1048576,\r\n            \"block_total\": 8796093022207,\r\n            \"block_used\": 40518578,\r\n            \"device\": \"fs-xxx9s01.efs.us-east-1.amazonaws.com:\/\",\r\n            \"fstype\": \"nfs4\",\r\n            \"inode_available\": 0,\r\n            \"inode_total\": 0,\r\n            \"inode_used\": 0,\r\n            \"mount\": \"\/remotedrive\",\r\n            \"options\": \"rw,relatime,vers=4.1,rsize=1048576,wsize=1048576,namlen=255,hard,noresvport,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=172.31.2.236,local_lock=none,addr=172.31.4.26\",\r\n            \"size_available\": 9223329550045282304,\r\n            \"size_total\": 9223372036853727232,\r\n            \"uuid\": \"N\/A\"\r\n        }<\/pre>\n<p>&nbsp;<\/p>\n<p>All this would be saved into a variable named <code>testvar<\/code> on the corresponding host. It would later be referred using <code>hostvars<\/code><\/p>\n<p>&nbsp;<\/p>\n<table style=\"height: 140px; width: 100%; border-collapse: collapse; border: 1px solid; border-style: solid;\" border=\"1px\" cellpadding=\"5px\">\n<tbody>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\"><span style=\"color: #003366;\">testvar | default ({})<\/span><\/td>\n<td style=\"width: 50%; height: 28px;\">\u00a0Declaring a variable named testvar and declaring it as a dictionary. Read more about <a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-dict\/\">ansible dict here<\/a><\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\"><span style=\"color: #003366;\">combine ( {<\/span><\/td>\n<td style=\"width: 50%; height: 28px;\">\u00a0Using Combine, we are adding a { key: value } and the <code>inventory_hostname<\/code> is the key<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\"><span style=\"color: #003366;\">inventory_hostname :<\/span><\/td>\n<td style=\"width: 50%; height: 28px;\">\u00a0<a href=\"https:\/\/www.middlewareinventory.com\/blog\/ansible-inventory_hostname-ansible_hostname-variables\/\">inventory_hostname<\/a> would be replaced with the actual hostname defined on the inventory.<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\"><span style=\"color: #003366;\">(ansible_facts.mounts | selectattr(&#8216;fstype&#8217;, &#8216;in&#8217;, [&#8216;nfs4&#8242;,&#8217;nfs&#8217;]) | list<\/span><\/td>\n<td style=\"width: 50%; height: 28px;\">\u00a0<code>ansible_facts.mounts<\/code> would have the list of mounts and <code>selectattr('fstype','in',['nfs4',nfs])<\/code> would help on filtering only the nfs mounts.<\/td>\n<\/tr>\n<tr style=\"height: 28px;\">\n<td style=\"width: 50%; height: 28px;\"><span style=\"color: #003366;\">sort(attribute=&#8217;mount&#8217;))[-1]<\/span><\/td>\n<td style=\"width: 50%; height: 28px;\">\u00a0sort the output based on the attribute <code>mount<\/code>\u00a0 and<\/p>\n<div>\n<div><code>[-1]<\/code> is the same as the <code>last<\/code> filter to select the last item ( there would be only one)<\/div>\n<\/div>\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>&nbsp;<\/p>\n<h3>Task 2:\u00a0 Combining all the individual host EFS data into a Single Dictionary<\/h3>\n<p>In this task we are using ansible <code>map<\/code> filter and two\u00a0 built-in variables named <code>ansible_play_hosts<\/code> and <code>hostvars<\/code> to extract the variable named <code>testvar<\/code> we have saved earlier for all the hosts.<\/p>\n<ul>\n<li><code>hostvars<\/code>\u00a0 is a a dictionary whose keys are Ansible hostnames and values are dicts that map variable names to values<\/li>\n<li><code>ansible_play_hosts<\/code>\u00a0A list of all of the inventory hostnames that are active in the current play<code><\/code><\/li>\n<\/ul>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\"># to print all messages in single place\r\n- set_fact: \r\n    data: \"{{ ansible_play_hosts | map ('extract', hostvars, 'testvar') }}\"\r\n  run_once: yes<\/pre>\n<p>&nbsp;<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<h3>Task 3:\u00a0 Converting the Single Dictionary variable into JSON and create CSV<\/h3>\n<p>While the second task will create a dictionary named <code>data<\/code> and store all the hostnames and their efs information as <code>key: value<\/code>\u00a0 format<\/p>\n<p>We need to convert this to JSON to process it further and to select only the required attributes<\/p>\n<p>For our case, we are only taking the following attributes<\/p>\n<ul>\n<li>hostname (\u00a0 based on the inventory_hostname stored as <code>key<\/code> )<\/li>\n<li>EFS device name or Full URL<\/li>\n<li>Mount point (\u00a0 file system path )<\/li>\n<\/ul>\n<p>The outcome CSV would look something like this<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">webserver1,fs-bx239i1.efs.us-east-1.amazonaws.com:\/,\/var\/www\/html\r\nwebserver2,fs-bx239i1.efs.us-east-1.amazonaws.com:\/,\/var\/www\/html\r\nappserver1,fs-ax39g9b9.efs.us-east-1.amazonaws.com:\/,\/app\/workspace\r\nappserver2,fs-ax39g9b9.efs.us-east-1.amazonaws.com:\/,\/app\/workspace\r\nappserver3,fs-ax39g9b9.efs.us-east-1.amazonaws.com:\/,\/app\/workspace<\/pre>\n<p>Once the JSON is created, we are going to use the JSON parser <a href=\"https:\/\/stedolan.github.io\/jq\/\">jq<\/a> on the control machine for data processing and creating CSV.<\/p>\n<blockquote><p>\u00a0JQ must be installed on the control machine from where you are executing the playbook ( windows\/mac\/linux) machine<\/p><\/blockquote>\n<p>What we are doing here is that we are <code>extracting<\/code> the variable named <code>testvar<\/code> we have saved during the task 1 dedicatedly for each host in our hostgroup.<\/p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\"># Parse Json and create a CSV using jq\r\n- name: create a CSV file locally on control machine\r\n  local_action:\r\n    module: shell\r\n    args: |\r\n       echo \"Hostname,EFS Device,Mountpoint\" &gt; efstest.csv\r\n       echo {{ data | to_json | tojson  }} | jq '.[]|to_entries[] | [.key, .value.device, .value.mount] |@csv'|tr -d '\\\\\"' &gt;&gt; efstest.csv\r\n  run_once: yes\r\n<\/pre>\n<p>&nbsp;<\/p>\n<p>All the variables of All the hosts associated with the playbook, would be available in <code>hostvars<\/code> built in variable<\/p>\n<p>We are using <code>map<\/code> and <code>extract<\/code> to get only the <code>testvar<\/code> variable for the list of hosts in current play.<\/p>\n<p>While it was little confusing at first. I hope you can understand it when you look at it once or twice.<\/p>\n<p>Ansible Maps are little hard to explain and am already writing a dedicated article for ansible map.<\/p>\n<script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\r\n<ins class=\"adsbygoogle\"\r\n     style=\"display:block; text-align:center;\"\r\n     data-ad-layout=\"in-article\"\r\n     data-ad-format=\"fluid\"\r\n     data-ad-client=\"ca-pub-3398911159151128\"\r\n     data-ad-slot=\"1946393371\"><\/ins>\r\n<script>\r\n     (adsbygoogle = window.adsbygoogle || []).push({});\r\n<\/script>\n<p>&nbsp;<\/p>\n<h2>The Result CSV data<\/h2>\n<p>Here is the snippet of what the resulting CSV would look like. you can add more parameters if you want by adding them into the <code>jq<\/code> filter<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-12.49.20-AM.png\"><img class=\"post-img alignnone wp-image-7104 size-full\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-12.49.20-AM.png\" alt=\"\" width=\"1170\" height=\"302\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-12.49.20-AM.png 1170w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-12.49.20-AM-300x77.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-12.49.20-AM-1024x264.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-12.49.20-AM-768x198.png 768w\" sizes=\"(max-width: 1170px) 100vw, 1170px\" \/><\/a><\/p>\n<p>With little <code>Pivot<\/code> chart you can also come to know the list EC2 instances using the EFS file systems like this<\/p>\n<p><a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.34.19-AM.png\"><img class=\"post-img alignleft wp-image-7110 size-medium\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.34.19-AM-300x176.png\" alt=\"EFS EC2\" width=\"300\" height=\"176\" srcset=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.34.19-AM-300x176.png 300w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.34.19-AM-1024x602.png 1024w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.34.19-AM-768x451.png 768w, https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.34.19-AM.png 1184w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>You might also like this article on listing the EFS using AWS CLI<\/p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"olpoqa0T7S\"><p><a href=\"https:\/\/www.middlewareinventory.com\/blog\/aws-cli-list-efs\/\">AWS CLI List EFS Filesystem sort by Size<\/a><\/p><\/blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;AWS CLI List EFS Filesystem sort by Size&#8221; &#8212; Middleware Inventory\" src=\"https:\/\/www.middlewareinventory.com\/blog\/aws-cli-list-efs\/embed\/#?secret=olpoqa0T7S\" data-secret=\"olpoqa0T7S\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe><\/p>\n<p>&nbsp;<\/p>\n<h2>Conclusion<\/h2>\n<p>Hope this article helped you understand various filters like <code>map<\/code> , <code>to_json<\/code> etc along with data processing tricks using built in variables like <code>hostvars<\/code> .<\/p>\n<p>If you have any better way to do this. please share it with us and the world. over the comments section.<\/p>\n<a href=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\"><img class=\"post-img\" src=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/09\/DaaS.svg\" alt=\"gritfy\" width=\"1047\" height=\"415\" class=\"alignnone size-full wp-image-6623\" \/><\/a>\n<p>&nbsp;<\/p>\n<p>Cheers<br \/>\nRumen Lishkov<\/p>\n<div id=\"postfollow\">\r\n<a href='https:\/\/ko-fi.com\/O4O51FG7C' target='_blank'><img height='46' style='border:0px;height:46px;width: 186px' src='https:\/\/az743702.vo.msecnd.net\/cdn\/kofi3.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' \/><\/a>\r\n<p>Follow us on<a href=\"http:\/\/www.facebook.com\/middlewareinventory\">Facebook<\/a> or<a href=\"http:\/\/www.twitter.com\/mwinventory\">Twitter<\/a>\r\n<\/br>\r\nFor more practical videos and tutorials. <a href=\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw?sub_confirmation=1\">Subscribe to our channel<\/a>\r\n<\/br>\r\nFollow me on Linkedin <a href=\"https:\/\/www.linkedin.com\/comm\/mynetwork\/discovery-see-all?usecase=PEOPLE_FOLLOWS&followMember=saravakmwinventory\">My Profile<\/a>\r\n<\/br>\r\n<\/i>For any Consultation or to hire us <a href=\"mailto:rumenlishkoff@gmail.com\"> rumenlishkoff@gmail.com<\/a>\r\n<\/br>\r\nIf you like this article. Show your Support! <a href=\"https:\/\/ko-fi.com\/middlewareinventory\">Buy me a Coffee.<\/a>\r\n<\/br>\r\n<\/p>\r\n<p style=\"color: palevioletred !important;\">Signup for Exclusive \"Subscriber-only\" Content<\/p>\r\n\n\t\t<div class=\"emaillist\">\n\t\t\t<form action=\"#\" method=\"post\" class=\"es_subscription_form es_shortcode_form\" id=\"es_subscription_form_1670576929\" data-source=\"ig-es\">\n\t\t\t\t\t\t\t\t<div class=\"es-field-wrap\"><label>Name*<br \/><input type=\"text\" name=\"name\" class=\"ig_es_form_field_name\" placeholder=\"\" value=\"\" required=\"required\" \/><\/label><\/div><div class=\"es-field-wrap\"><label>Email*<br \/><input class=\"es_required_field es_txt_email ig_es_form_field_email\" type=\"email\" name=\"email\" value=\"\" placeholder=\"\" required=\"required\" \/><\/label><\/div><input type=\"hidden\" name=\"lists[]\" value=\"1\" \/><input type=\"hidden\" name=\"form_id\" value=\"3\" \/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page\" value=\"7082\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es_email_page_url\" value=\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"status\" value=\"Unconfirmed\"\/>\n\t\t\t\t<input type=\"hidden\" name=\"es-subscribe\" id=\"es-subscribe\" value=\"7aebfb1a9b\"\/>\n\t\t\t\t<label style=\"position:absolute;top:-99999px;left:-99999px;z-index:-99;\"><input type=\"email\" name=\"es_hp_email\" class=\"es_required_field\" tabindex=\"-1\" autocomplete=\"-1\" value=\"\"\/><\/label>\n\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" class=\"es_subscription_form_submit es_submit_button es_textbox_button\" id=\"es_subscription_form_submit_1670576929\" value=\"Subscribe\"\/>\n\n\t\t\t\t\n\t\t\t\t<span class=\"es_spinner_image\" id=\"spinner-image\"><img src=\"https:\/\/www.middlewareinventory.com\/wp-content\/plugins\/email-subscribers\/lite\/public\/images\/spinner.gif\" alt=\"Loading\"\/><\/span>\n\n\t\t\t<\/form>\n\n\t\t\t<span class=\"es_subscription_message\" id=\"es_subscription_message_1670576929\"><\/span>\n\t\t<\/div>\n\n\t\t\r\n<\/div>\r\n<hr>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s suppose that you have an infrastructure of 1000 hosts and you want to know how many of them use EFS &#8211; Elastic File System or traditionally known as Network File System Or Let&#8217;s just say that you have 100 EFS File systems in your AWS account and you want[&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":7108,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[98,234],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Find EC2 instances using EFS - EFS Usage Report | DevopsJunction<\/title>\n<meta name=\"description\" content=\"Find which EC2 instances are using EFS, EFS Usage report, EFS and EC2 mapping. EC2 instances with EFS mounts. Which servers are using EFS. EFS Mount points audit.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Find EC2 instances using EFS - EFS Usage Report | DevopsJunction\" \/>\n<meta property=\"og:description\" content=\"Find which EC2 instances are using EFS, EFS Usage report, EFS and EC2 mapping. EC2 instances with EFS mounts. Which servers are using EFS. EFS Mount points audit.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/\" \/>\n<meta property=\"og:site_name\" content=\"Middleware Inventory\" \/>\n<meta property=\"article:publisher\" content=\"http:\/\/www.facebook.com\/devopsjunc\" \/>\n<meta property=\"article:published_time\" content=\"2021-07-24T20:09:51+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-11T20:23:31+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2328\" \/>\n\t<meta property=\"og:image:height\" content=\"1310\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@mwinventory\" \/>\n<meta name=\"twitter:site\" content=\"@mwinventory\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\",\"name\":\"Middleware Inventory\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"sameAs\":[\"http:\/\/www.facebook.com\/devopsjunc\",\"https:\/\/www.youtube.com\/channel\/UCRuqBFM6ioWwviNJkgOjeWw\",\"https:\/\/twitter.com\/mwinventory\"],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2020\/09\/Screenshot-2020-09-18-at-3.49.40-AM.jpg\",\"width\":300,\"height\":107,\"caption\":\"Middleware Inventory\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\",\"url\":\"https:\/\/www.middlewareinventory.com\/\",\"name\":\"Devops Junction\",\"description\":\"An inventory of [i]nformation, Middleware and much more.\",\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.middlewareinventory.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.middlewareinventory.com\/wp-content\/uploads\/2021\/07\/Screenshot-2021-07-25-at-1.18.18-AM.jpg\",\"width\":2328,\"height\":1310,\"caption\":\"efs mounts ec2\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#webpage\",\"url\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/\",\"name\":\"Find EC2 instances using EFS - EFS Usage Report | DevopsJunction\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#primaryimage\"},\"datePublished\":\"2021-07-24T20:09:51+00:00\",\"dateModified\":\"2022-01-11T20:23:31+00:00\",\"description\":\"Find which EC2 instances are using EFS, EFS Usage report, EFS and EC2 mapping. EC2 instances with EFS mounts. Which servers are using EFS. EFS Mount points audit.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/\"]}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#webpage\"},\"author\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\"},\"headline\":\"Find EC2 instances using EFS &#8211; EFS Usage Report\",\"datePublished\":\"2021-07-24T20:09:51+00:00\",\"dateModified\":\"2022-01-11T20:23:31+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#webpage\"},\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/#organization\"},\"image\":{\"@id\":\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#primaryimage\"},\"articleSection\":\"Ansible,AWS\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.middlewareinventory.com\/blog\/collect-efs-ec2-ansible\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#\/schema\/person\/050bf13e27b309d29d1bda45c4eb3147\",\"name\":\"Rumen Lishkov\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.middlewareinventory.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/c22e4a54d67750291a9892531f94ffb3?s=96&d=mm&r=g\",\"caption\":\"Rumen Lishkov\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7082"}],"collection":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/comments?post=7082"}],"version-history":[{"count":30,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7082\/revisions"}],"predecessor-version":[{"id":7161,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/posts\/7082\/revisions\/7161"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media\/7108"}],"wp:attachment":[{"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/media?parent=7082"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/categories?post=7082"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.middlewareinventory.com\/wp-json\/wp\/v2\/tags?post=7082"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}